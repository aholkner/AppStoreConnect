#nullable enable

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Macross.Json.Extensions;

namespace StudioDrydock.AppStoreConnect.Api
{
    public partial class AppStoreClient
    {
        public class AgeRatingDeclarationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AlcoholTobaccoOrDrugUseOrReferences
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public AlcoholTobaccoOrDrugUseOrReferences? alcoholTobaccoOrDrugUseOrReferences { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Contests
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public Contests? contests { get; set; }
                    public bool? gamblingAndContests { get; set; }
                    public bool? gambling { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum GamblingSimulated
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public GamblingSimulated? gamblingSimulated { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum KidsAgeBand
                    {
                        FIVE_AND_UNDER,
                        SIX_TO_EIGHT,
                        NINE_TO_ELEVEN,
                    }
                    public KidsAgeBand? kidsAgeBand { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum MedicalOrTreatmentInformation
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public MedicalOrTreatmentInformation? medicalOrTreatmentInformation { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProfanityOrCrudeHumor
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public ProfanityOrCrudeHumor? profanityOrCrudeHumor { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SexualContentGraphicAndNudity
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public SexualContentGraphicAndNudity? sexualContentGraphicAndNudity { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SexualContentOrNudity
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public SexualContentOrNudity? sexualContentOrNudity { get; set; }
                    public bool? seventeenPlus { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum HorrorOrFearThemes
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public HorrorOrFearThemes? horrorOrFearThemes { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum MatureOrSuggestiveThemes
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public MatureOrSuggestiveThemes? matureOrSuggestiveThemes { get; set; }
                    public bool? unrestrictedWebAccess { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ViolenceCartoonOrFantasy
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public ViolenceCartoonOrFantasy? violenceCartoonOrFantasy { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ViolenceRealisticProlongedGraphicOrSadistic
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public ViolenceRealisticProlongedGraphicOrSadistic? violenceRealisticProlongedGraphicOrSadistic { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ViolenceRealistic
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public ViolenceRealistic? violenceRealistic { get; set; }
                }

                public string type { get; set; } = "ageRatingDeclarations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        public class AgeRatingDeclarationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AlcoholTobaccoOrDrugUseOrReferences
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public AlcoholTobaccoOrDrugUseOrReferences? alcoholTobaccoOrDrugUseOrReferences { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Contests
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public Contests? contests { get; set; }
                    public bool? gamblingAndContests { get; set; }
                    public bool? gambling { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum GamblingSimulated
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public GamblingSimulated? gamblingSimulated { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum KidsAgeBand
                    {
                        FIVE_AND_UNDER,
                        SIX_TO_EIGHT,
                        NINE_TO_ELEVEN,
                    }
                    public KidsAgeBand? kidsAgeBand { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum MedicalOrTreatmentInformation
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public MedicalOrTreatmentInformation? medicalOrTreatmentInformation { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProfanityOrCrudeHumor
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public ProfanityOrCrudeHumor? profanityOrCrudeHumor { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SexualContentGraphicAndNudity
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public SexualContentGraphicAndNudity? sexualContentGraphicAndNudity { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SexualContentOrNudity
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public SexualContentOrNudity? sexualContentOrNudity { get; set; }
                    public bool? seventeenPlus { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum HorrorOrFearThemes
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public HorrorOrFearThemes? horrorOrFearThemes { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum MatureOrSuggestiveThemes
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public MatureOrSuggestiveThemes? matureOrSuggestiveThemes { get; set; }
                    public bool? unrestrictedWebAccess { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ViolenceCartoonOrFantasy
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public ViolenceCartoonOrFantasy? violenceCartoonOrFantasy { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ViolenceRealisticProlongedGraphicOrSadistic
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public ViolenceRealisticProlongedGraphicOrSadistic? violenceRealisticProlongedGraphicOrSadistic { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ViolenceRealistic
                    {
                        NONE,
                        INFREQUENT_OR_MILD,
                        FREQUENT_OR_INTENSE,
                    }
                    public ViolenceRealistic? violenceRealistic { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ageRatingDeclarations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/ageRatingDeclarations/{id}
        public Task<AgeRatingDeclarationResponse> PatchAgeRatingDeclarations(string id, AgeRatingDeclarationUpdateRequest request)
        {
            string path = "/v1/ageRatingDeclarations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AgeRatingDeclarationResponse>(message);
        }

        public class AppCategoriesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platforms
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }

                    public Platforms[]? platforms { get; set; }
                }

                public class Relationships
                {
                    public class Subcategories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Parent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subcategories? subcategories { get; set; }
                    public Parent? parent { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCategories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platforms
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }

                    public Platforms[]? platforms { get; set; }
                }

                public class Relationships
                {
                    public class Subcategories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Parent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subcategories? subcategories { get; set; }
                    public Parent? parent { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCategories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCategoriesFilterPlatforms
        {
            IOS,
            MAC_OS,
            TV_OS,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCategoriesFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCategoriesInclude
        {
            parent,
            subcategories,
        }



        // /v1/appCategories
        public Task<AppCategoriesResponse> GetAppCategories(GetAppCategoriesFilterPlatforms[]? filterPlatforms = default, bool? existsParent = default, GetAppCategoriesFieldsAppCategories[]? fieldsAppCategories = default, int? limit = default, GetAppCategoriesInclude[]? include = default, int? limitSubcategories = default)
        {
            string path = "/v1/appCategories";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPlatforms != null)
                uriBuilder.AddParameter("filter[platforms]", string.Join(",", filterPlatforms));
            if (existsParent.HasValue)
                uriBuilder.AddParameter("exists[parent]", existsParent.Value.ToString());
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (limitSubcategories.HasValue)
                uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoriesResponse>(message);
        }

        public class AppCategoryResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platforms
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }

                    public Platforms[]? platforms { get; set; }
                }

                public class Relationships
                {
                    public class Subcategories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Parent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subcategories? subcategories { get; set; }
                    public Parent? parent { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCategories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platforms
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }

                    public Platforms[]? platforms { get; set; }
                }

                public class Relationships
                {
                    public class Subcategories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Parent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subcategories? subcategories { get; set; }
                    public Parent? parent { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCategories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }




        // /v1/appCategories/{id}
        public Task<AppCategoryResponse> GetAppCategories(string id, GetAppCategoriesFieldsAppCategories[]? fieldsAppCategories = default, GetAppCategoriesInclude[]? include = default, int? limitSubcategories = default)
        {
            string path = "/v1/appCategories/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (limitSubcategories.HasValue)
                uriBuilder.AddParameter("limit[subcategories]", limitSubcategories.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoryResponse>(message);
        }

        public class AppClipAdvancedExperienceImageCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                }

                public string type { get; set; } = "appClipAdvancedExperienceImages";
                public Attributes attributes { get; set; } = new Attributes();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppClipAdvancedExperienceImageResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipAdvancedExperienceImages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/appClipAdvancedExperienceImages
        public Task<AppClipAdvancedExperienceImageResponse> PostAppClipAdvancedExperienceImages(AppClipAdvancedExperienceImageCreateRequest request)
        {
            string path = "/v1/appClipAdvancedExperienceImages";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipAdvancedExperienceImageResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipAdvancedExperienceImagesFieldsAppClipAdvancedExperienceImages
        {
            assetDeliveryState,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        // /v1/appClipAdvancedExperienceImages/{id}
        public Task<AppClipAdvancedExperienceImageResponse> GetAppClipAdvancedExperienceImages(string id, GetAppClipAdvancedExperienceImagesFieldsAppClipAdvancedExperienceImages[]? fieldsAppClipAdvancedExperienceImages = default)
        {
            string path = "/v1/appClipAdvancedExperienceImages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipAdvancedExperienceImages != null)
                uriBuilder.AddParameter("fields[appClipAdvancedExperienceImages]", string.Join(",", fieldsAppClipAdvancedExperienceImages));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipAdvancedExperienceImageResponse>(message);
        }

        public class AppClipAdvancedExperienceImageUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "appClipAdvancedExperienceImages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appClipAdvancedExperienceImages/{id}
        public Task<AppClipAdvancedExperienceImageResponse> PatchAppClipAdvancedExperienceImages(string id, AppClipAdvancedExperienceImageUpdateRequest request)
        {
            string path = "/v1/appClipAdvancedExperienceImages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipAdvancedExperienceImageResponse>(message);
        }

        public class AppClipAdvancedExperienceCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public class Place
                    {
                        public class MainAddress
                        {
                            public class StructuredAddress
                            {
                                public string[]? streetAddress { get; set; }
                                public string? floor { get; set; }
                                public string? neighborhood { get; set; }
                                public string? locality { get; set; }
                                public string? stateProvince { get; set; }
                                public string? postalCode { get; set; }
                                public string? countryCode { get; set; }
                            }

                            public string? fullAddress { get; set; }
                            public StructuredAddress? structuredAddress { get; set; }
                        }

                        public class DisplayPoint
                        {
                            public class Coordinates
                            {
                                public double? latitude { get; set; }
                                public double? longitude { get; set; }
                            }

                            public Coordinates? coordinates { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Source
                            {
                                CALCULATED,
                                MANUALLY_PLACED,
                            }
                            public Source? source { get; set; }
                        }

                        public class PhoneNumber
                        {
                            public string? number { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Type
                            {
                                FAX,
                                LANDLINE,
                                MOBILE,
                                TOLLFREE,
                            }
                            public Type? type { get; set; }
                            public string? intent { get; set; }
                        }

                        public string? placeId { get; set; }
                        public string[]? names { get; set; }
                        public MainAddress? mainAddress { get; set; }
                        public DisplayPoint? displayPoint { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum MapAction
                        {
                            BUY_TICKETS,
                            VIEW_AVAILABILITY,
                            VIEW_PRICING,
                            HOTEL_BOOK_ROOM,
                            PARKING_RESERVE_PARKING,
                            RESTAURANT_JOIN_WAITLIST,
                            RESTAURANT_ORDER_DELIVERY,
                            RESTAURANT_ORDER_FOOD,
                            RESTAURANT_ORDER_TAKEOUT,
                            RESTAURANT_RESERVATION,
                            SCHEDULE_APPOINTMENT,
                            RESTAURANT_VIEW_MENU,
                            THEATER_NOW_PLAYING,
                        }
                        public MapAction? mapAction { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Relationship
                        {
                            OWNER,
                            AUTHORIZED,
                            OTHER,
                        }
                        public Relationship? relationship { get; set; }
                        public PhoneNumber? phoneNumber { get; set; }
                        public string? homePage { get; set; }
                        public string[]? categories { get; set; }
                    }

                    public string link { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                    public bool isPoweredBy { get; set; } = false;
                    public Place? place { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BusinessCategory
                    {
                        AUTOMOTIVE,
                        BEAUTY,
                        BIKES,
                        BOOKS,
                        CASINO,
                        EDUCATION,
                        EDUCATION_JAPAN,
                        ENTERTAINMENT,
                        EV_CHARGER,
                        FINANCIAL_USD,
                        FINANCIAL_CNY,
                        FINANCIAL_GBP,
                        FINANCIAL_JPY,
                        FINANCIAL_EUR,
                        FITNESS,
                        FOOD_AND_DRINK,
                        GAS,
                        GROCERY,
                        HEALTH_AND_MEDICAL,
                        HOTEL_AND_TRAVEL,
                        MUSIC,
                        PARKING,
                        PET_SERVICES,
                        PROFESSIONAL_SERVICES,
                        SHOPPING,
                        TICKETING,
                        TRANSIT,
                    }
                    public BusinessCategory? businessCategory { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum DefaultLanguage
                    {
                        AR,
                        CA,
                        CS,
                        DA,
                        DE,
                        EL,
                        EN,
                        ES,
                        FI,
                        FR,
                        HE,
                        HI,
                        HR,
                        HU,
                        ID,
                        IT,
                        JA,
                        KO,
                        MS,
                        NL,
                        NO,
                        PL,
                        PT,
                        RO,
                        RU,
                        SK,
                        SV,
                        TH,
                        TR,
                        UK,
                        VI,
                        ZH,
                    }
                    public DefaultLanguage defaultLanguage { get; set; } = default;
                }

                public class Relationships
                {
                    public class AppClip
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class HeaderImage
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipAdvancedExperienceImages";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Localizations
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipAdvancedExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data[] data { get; set; } = { };
                    }

                    public AppClip appClip { get; set; } = new AppClip();
                    public HeaderImage headerImage { get; set; } = new HeaderImage();
                    public Localizations localizations { get; set; } = new Localizations();
                }

                public string type { get; set; } = "appClipAdvancedExperiences";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Language
                    {
                        AR,
                        CA,
                        CS,
                        DA,
                        DE,
                        EL,
                        EN,
                        ES,
                        FI,
                        FR,
                        HE,
                        HI,
                        HR,
                        HU,
                        ID,
                        IT,
                        JA,
                        KO,
                        MS,
                        NL,
                        NO,
                        PL,
                        PT,
                        RO,
                        RU,
                        SK,
                        SV,
                        TH,
                        TR,
                        UK,
                        VI,
                        ZH,
                    }
                    public Language? language { get; set; }
                    public string? title { get; set; }
                    public string? subtitle { get; set; }
                }

                public string type { get; set; } = "appClipAdvancedExperienceLocalizations";
                public string? id { get; set; }
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        public class AppClipAdvancedExperienceResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class Place
                    {
                        public class MainAddress
                        {
                            public class StructuredAddress
                            {
                                public string[]? streetAddress { get; set; }
                                public string? floor { get; set; }
                                public string? neighborhood { get; set; }
                                public string? locality { get; set; }
                                public string? stateProvince { get; set; }
                                public string? postalCode { get; set; }
                                public string? countryCode { get; set; }
                            }

                            public string? fullAddress { get; set; }
                            public StructuredAddress? structuredAddress { get; set; }
                        }

                        public class DisplayPoint
                        {
                            public class Coordinates
                            {
                                public double? latitude { get; set; }
                                public double? longitude { get; set; }
                            }

                            public Coordinates? coordinates { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Source
                            {
                                CALCULATED,
                                MANUALLY_PLACED,
                            }
                            public Source? source { get; set; }
                        }

                        public class PhoneNumber
                        {
                            public string? number { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Type
                            {
                                FAX,
                                LANDLINE,
                                MOBILE,
                                TOLLFREE,
                            }
                            public Type? type { get; set; }
                            public string? intent { get; set; }
                        }

                        public string? placeId { get; set; }
                        public string[]? names { get; set; }
                        public MainAddress? mainAddress { get; set; }
                        public DisplayPoint? displayPoint { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum MapAction
                        {
                            BUY_TICKETS,
                            VIEW_AVAILABILITY,
                            VIEW_PRICING,
                            HOTEL_BOOK_ROOM,
                            PARKING_RESERVE_PARKING,
                            RESTAURANT_JOIN_WAITLIST,
                            RESTAURANT_ORDER_DELIVERY,
                            RESTAURANT_ORDER_FOOD,
                            RESTAURANT_ORDER_TAKEOUT,
                            RESTAURANT_RESERVATION,
                            SCHEDULE_APPOINTMENT,
                            RESTAURANT_VIEW_MENU,
                            THEATER_NOW_PLAYING,
                        }
                        public MapAction? mapAction { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Relationship
                        {
                            OWNER,
                            AUTHORIZED,
                            OTHER,
                        }
                        public Relationship? relationship { get; set; }
                        public PhoneNumber? phoneNumber { get; set; }
                        public string? homePage { get; set; }
                        public string[]? categories { get; set; }
                    }

                    public string? link { get; set; }
                    public int? version { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Status
                    {
                        RECEIVED,
                        DEACTIVATED,
                        APP_TRANSFER_IN_PROGRESS,
                    }
                    public Status? status { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                    public bool? isPoweredBy { get; set; }
                    public Place? place { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PlaceStatus
                    {
                        PENDING,
                        MATCHED,
                        NO_MATCH,
                    }
                    public PlaceStatus? placeStatus { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BusinessCategory
                    {
                        AUTOMOTIVE,
                        BEAUTY,
                        BIKES,
                        BOOKS,
                        CASINO,
                        EDUCATION,
                        EDUCATION_JAPAN,
                        ENTERTAINMENT,
                        EV_CHARGER,
                        FINANCIAL_USD,
                        FINANCIAL_CNY,
                        FINANCIAL_GBP,
                        FINANCIAL_JPY,
                        FINANCIAL_EUR,
                        FITNESS,
                        FOOD_AND_DRINK,
                        GAS,
                        GROCERY,
                        HEALTH_AND_MEDICAL,
                        HOTEL_AND_TRAVEL,
                        MUSIC,
                        PARKING,
                        PET_SERVICES,
                        PROFESSIONAL_SERVICES,
                        SHOPPING,
                        TICKETING,
                        TRANSIT,
                    }
                    public BusinessCategory? businessCategory { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum DefaultLanguage
                    {
                        AR,
                        CA,
                        CS,
                        DA,
                        DE,
                        EL,
                        EN,
                        ES,
                        FI,
                        FR,
                        HE,
                        HI,
                        HR,
                        HU,
                        ID,
                        IT,
                        JA,
                        KO,
                        MS,
                        NL,
                        NO,
                        PL,
                        PT,
                        RO,
                        RU,
                        SK,
                        SV,
                        TH,
                        TR,
                        UK,
                        VI,
                        ZH,
                    }
                    public DefaultLanguage? defaultLanguage { get; set; }
                }

                public class Relationships
                {
                    public class AppClip
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class HeaderImage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipAdvancedExperienceImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Localizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipAdvancedExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppClip? appClip { get; set; }
                    public HeaderImage? headerImage { get; set; }
                    public Localizations? localizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipAdvancedExperiences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appClipAdvancedExperiences
        public Task<AppClipAdvancedExperienceResponse> PostAppClipAdvancedExperiences(AppClipAdvancedExperienceCreateRequest request)
        {
            string path = "/v1/appClipAdvancedExperiences";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipAdvancedExperienceResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipAdvancedExperiencesFieldsAppClipAdvancedExperiences
        {
            action,
            appClip,
            businessCategory,
            defaultLanguage,
            headerImage,
            isPoweredBy,
            link,
            localizations,
            place,
            placeStatus,
            removed,
            status,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipAdvancedExperiencesInclude
        {
            appClip,
            headerImage,
            localizations,
        }



        // /v1/appClipAdvancedExperiences/{id}
        public Task<AppClipAdvancedExperienceResponse> GetAppClipAdvancedExperiences(string id, GetAppClipAdvancedExperiencesFieldsAppClipAdvancedExperiences[]? fieldsAppClipAdvancedExperiences = default, GetAppClipAdvancedExperiencesInclude[]? include = default, int? limitLocalizations = default)
        {
            string path = "/v1/appClipAdvancedExperiences/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipAdvancedExperiences != null)
                uriBuilder.AddParameter("fields[appClipAdvancedExperiences]", string.Join(",", fieldsAppClipAdvancedExperiences));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (limitLocalizations.HasValue)
                uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipAdvancedExperienceResponse>(message);
        }

        public class AppClipAdvancedExperienceUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public class Place
                    {
                        public class MainAddress
                        {
                            public class StructuredAddress
                            {
                                public string[]? streetAddress { get; set; }
                                public string? floor { get; set; }
                                public string? neighborhood { get; set; }
                                public string? locality { get; set; }
                                public string? stateProvince { get; set; }
                                public string? postalCode { get; set; }
                                public string? countryCode { get; set; }
                            }

                            public string? fullAddress { get; set; }
                            public StructuredAddress? structuredAddress { get; set; }
                        }

                        public class DisplayPoint
                        {
                            public class Coordinates
                            {
                                public double? latitude { get; set; }
                                public double? longitude { get; set; }
                            }

                            public Coordinates? coordinates { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Source
                            {
                                CALCULATED,
                                MANUALLY_PLACED,
                            }
                            public Source? source { get; set; }
                        }

                        public class PhoneNumber
                        {
                            public string? number { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Type
                            {
                                FAX,
                                LANDLINE,
                                MOBILE,
                                TOLLFREE,
                            }
                            public Type? type { get; set; }
                            public string? intent { get; set; }
                        }

                        public string? placeId { get; set; }
                        public string[]? names { get; set; }
                        public MainAddress? mainAddress { get; set; }
                        public DisplayPoint? displayPoint { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum MapAction
                        {
                            BUY_TICKETS,
                            VIEW_AVAILABILITY,
                            VIEW_PRICING,
                            HOTEL_BOOK_ROOM,
                            PARKING_RESERVE_PARKING,
                            RESTAURANT_JOIN_WAITLIST,
                            RESTAURANT_ORDER_DELIVERY,
                            RESTAURANT_ORDER_FOOD,
                            RESTAURANT_ORDER_TAKEOUT,
                            RESTAURANT_RESERVATION,
                            SCHEDULE_APPOINTMENT,
                            RESTAURANT_VIEW_MENU,
                            THEATER_NOW_PLAYING,
                        }
                        public MapAction? mapAction { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Relationship
                        {
                            OWNER,
                            AUTHORIZED,
                            OTHER,
                        }
                        public Relationship? relationship { get; set; }
                        public PhoneNumber? phoneNumber { get; set; }
                        public string? homePage { get; set; }
                        public string[]? categories { get; set; }
                    }

                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                    public bool? isPoweredBy { get; set; }
                    public Place? place { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BusinessCategory
                    {
                        AUTOMOTIVE,
                        BEAUTY,
                        BIKES,
                        BOOKS,
                        CASINO,
                        EDUCATION,
                        EDUCATION_JAPAN,
                        ENTERTAINMENT,
                        EV_CHARGER,
                        FINANCIAL_USD,
                        FINANCIAL_CNY,
                        FINANCIAL_GBP,
                        FINANCIAL_JPY,
                        FINANCIAL_EUR,
                        FITNESS,
                        FOOD_AND_DRINK,
                        GAS,
                        GROCERY,
                        HEALTH_AND_MEDICAL,
                        HOTEL_AND_TRAVEL,
                        MUSIC,
                        PARKING,
                        PET_SERVICES,
                        PROFESSIONAL_SERVICES,
                        SHOPPING,
                        TICKETING,
                        TRANSIT,
                    }
                    public BusinessCategory? businessCategory { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum DefaultLanguage
                    {
                        AR,
                        CA,
                        CS,
                        DA,
                        DE,
                        EL,
                        EN,
                        ES,
                        FI,
                        FR,
                        HE,
                        HI,
                        HR,
                        HU,
                        ID,
                        IT,
                        JA,
                        KO,
                        MS,
                        NL,
                        NO,
                        PL,
                        PT,
                        RO,
                        RU,
                        SK,
                        SV,
                        TH,
                        TR,
                        UK,
                        VI,
                        ZH,
                    }
                    public DefaultLanguage? defaultLanguage { get; set; }
                    public bool? removed { get; set; }
                }

                public class Relationships
                {
                    public class AppClip
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class HeaderImage
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipAdvancedExperienceImages";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class Localizations
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipAdvancedExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public AppClip? appClip { get; set; }
                    public HeaderImage? headerImage { get; set; }
                    public Localizations? localizations { get; set; }
                }

                public string type { get; set; } = "appClipAdvancedExperiences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Language
                    {
                        AR,
                        CA,
                        CS,
                        DA,
                        DE,
                        EL,
                        EN,
                        ES,
                        FI,
                        FR,
                        HE,
                        HI,
                        HR,
                        HU,
                        ID,
                        IT,
                        JA,
                        KO,
                        MS,
                        NL,
                        NO,
                        PL,
                        PT,
                        RO,
                        RU,
                        SK,
                        SV,
                        TH,
                        TR,
                        UK,
                        VI,
                        ZH,
                    }
                    public Language? language { get; set; }
                    public string? title { get; set; }
                    public string? subtitle { get; set; }
                }

                public string type { get; set; } = "appClipAdvancedExperienceLocalizations";
                public string? id { get; set; }
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        // /v1/appClipAdvancedExperiences/{id}
        public Task<AppClipAdvancedExperienceResponse> PatchAppClipAdvancedExperiences(string id, AppClipAdvancedExperienceUpdateRequest request)
        {
            string path = "/v1/appClipAdvancedExperiences/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipAdvancedExperienceResponse>(message);
        }

        public class AppClipAppStoreReviewDetailCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string[]? invocationUrls { get; set; }
                }

                public class Relationships
                {
                    public class AppClipDefaultExperience
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppClipDefaultExperience appClipDefaultExperience { get; set; } = new AppClipDefaultExperience();
                }

                public string type { get; set; } = "appClipAppStoreReviewDetails";
                public Attributes? attributes { get; set; }
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppClipAppStoreReviewDetailResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string[]? invocationUrls { get; set; }
                }

                public class Relationships
                {
                    public class AppClipDefaultExperience
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipAppStoreReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                }

                public class Relationships
                {
                    public class AppClip
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class ReleaseWithAppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperienceLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClipAppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipAppStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppClip? appClip { get; set; }
                    public ReleaseWithAppStoreVersion? releaseWithAppStoreVersion { get; set; }
                    public AppClipDefaultExperienceLocalizations? appClipDefaultExperienceLocalizations { get; set; }
                    public AppClipAppStoreReviewDetail? appClipAppStoreReviewDetail { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipDefaultExperiences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appClipAppStoreReviewDetails
        public Task<AppClipAppStoreReviewDetailResponse> PostAppClipAppStoreReviewDetails(AppClipAppStoreReviewDetailCreateRequest request)
        {
            string path = "/v1/appClipAppStoreReviewDetails";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipAppStoreReviewDetailResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipAppStoreReviewDetailsFieldsAppClipAppStoreReviewDetails
        {
            appClipDefaultExperience,
            invocationUrls,
        }



        // /v1/appClipAppStoreReviewDetails/{id}
        public Task<AppClipAppStoreReviewDetailResponse> GetAppClipAppStoreReviewDetails(string id, GetAppClipAppStoreReviewDetailsFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, string[]? include = default)
        {
            string path = "/v1/appClipAppStoreReviewDetails/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipAppStoreReviewDetailResponse>(message);
        }

        public class AppClipAppStoreReviewDetailUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string[]? invocationUrls { get; set; }
                }

                public string type { get; set; } = "appClipAppStoreReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appClipAppStoreReviewDetails/{id}
        public Task<AppClipAppStoreReviewDetailResponse> PatchAppClipAppStoreReviewDetails(string id, AppClipAppStoreReviewDetailUpdateRequest request)
        {
            string path = "/v1/appClipAppStoreReviewDetails/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipAppStoreReviewDetailResponse>(message);
        }

        public class AppClipDefaultExperienceLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string locale { get; set; } = "";
                    public string? subtitle { get; set; }
                }

                public class Relationships
                {
                    public class AppClipDefaultExperience
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppClipDefaultExperience appClipDefaultExperience { get; set; } = new AppClipDefaultExperience();
                }

                public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppClipDefaultExperienceLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? subtitle { get; set; }
                }

                public class Relationships
                {
                    public class AppClipDefaultExperience
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipHeaderImage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipHeaderImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                    public AppClipHeaderImage? appClipHeaderImage { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appClipDefaultExperienceLocalizations
        public Task<AppClipDefaultExperienceLocalizationResponse> PostAppClipDefaultExperienceLocalizations(AppClipDefaultExperienceLocalizationCreateRequest request)
        {
            string path = "/v1/appClipDefaultExperienceLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipDefaultExperienceLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperienceLocalizationsFieldsAppClipDefaultExperienceLocalizations
        {
            appClipDefaultExperience,
            appClipHeaderImage,
            locale,
            subtitle,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperienceLocalizationsInclude
        {
            appClipDefaultExperience,
            appClipHeaderImage,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperienceLocalizationsFieldsAppClipHeaderImages
        {
            appClipDefaultExperienceLocalization,
            assetDeliveryState,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        // /v1/appClipDefaultExperienceLocalizations/{id}
        public Task<AppClipDefaultExperienceLocalizationResponse> GetAppClipDefaultExperienceLocalizations(string id, GetAppClipDefaultExperienceLocalizationsFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, GetAppClipDefaultExperienceLocalizationsInclude[]? include = default, GetAppClipDefaultExperienceLocalizationsFieldsAppClipHeaderImages[]? fieldsAppClipHeaderImages = default)
        {
            string path = "/v1/appClipDefaultExperienceLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipDefaultExperienceLocalizations != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppClipHeaderImages != null)
                uriBuilder.AddParameter("fields[appClipHeaderImages]", string.Join(",", fieldsAppClipHeaderImages));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipDefaultExperienceLocalizationResponse>(message);
        }

        public class AppClipDefaultExperienceLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? subtitle { get; set; }
                }

                public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appClipDefaultExperienceLocalizations/{id}
        public Task<AppClipDefaultExperienceLocalizationResponse> PatchAppClipDefaultExperienceLocalizations(string id, AppClipDefaultExperienceLocalizationUpdateRequest request)
        {
            string path = "/v1/appClipDefaultExperienceLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipDefaultExperienceLocalizationResponse>(message);
        }

        // /v1/appClipDefaultExperienceLocalizations/{id}
        public Task DeleteAppClipDefaultExperienceLocalizations(string id)
        {
            string path = "/v1/appClipDefaultExperienceLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppClipDefaultExperienceCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                }

                public class Relationships
                {
                    public class AppClip
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class ReleaseWithAppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperienceTemplate
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public AppClip appClip { get; set; } = new AppClip();
                    public ReleaseWithAppStoreVersion? releaseWithAppStoreVersion { get; set; }
                    public AppClipDefaultExperienceTemplate? appClipDefaultExperienceTemplate { get; set; }
                }

                public string type { get; set; } = "appClipDefaultExperiences";
                public Attributes? attributes { get; set; }
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppClipDefaultExperienceResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                }

                public class Relationships
                {
                    public class AppClip
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class ReleaseWithAppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperienceLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClipAppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipAppStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppClip? appClip { get; set; }
                    public ReleaseWithAppStoreVersion? releaseWithAppStoreVersion { get; set; }
                    public AppClipDefaultExperienceLocalizations? appClipDefaultExperienceLocalizations { get; set; }
                    public AppClipAppStoreReviewDetail? appClipAppStoreReviewDetail { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipDefaultExperiences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appClipDefaultExperiences
        public Task<AppClipDefaultExperienceResponse> PostAppClipDefaultExperiences(AppClipDefaultExperienceCreateRequest request)
        {
            string path = "/v1/appClipDefaultExperiences";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipDefaultExperienceResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesInclude
        {
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesFieldsAppClipAppStoreReviewDetails
        {
            appClipDefaultExperience,
            invocationUrls,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesFieldsAppClipDefaultExperienceLocalizations
        {
            appClipDefaultExperience,
            appClipHeaderImage,
            locale,
            subtitle,
        }



        // /v1/appClipDefaultExperiences/{id}
        public Task<AppClipDefaultExperienceResponse> GetAppClipDefaultExperiences(string id, GetAppClipDefaultExperiencesFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GetAppClipDefaultExperiencesInclude[]? include = default, GetAppClipDefaultExperiencesFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, GetAppClipDefaultExperiencesFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppClipDefaultExperiencesFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, int? limitAppClipDefaultExperienceLocalizations = default)
        {
            string path = "/v1/appClipDefaultExperiences/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppClipAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppClipDefaultExperienceLocalizations != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
            if (limitAppClipDefaultExperienceLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipDefaultExperienceResponse>(message);
        }

        public class AppClipDefaultExperienceUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                }

                public class Relationships
                {
                    public class ReleaseWithAppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public ReleaseWithAppStoreVersion? releaseWithAppStoreVersion { get; set; }
                }

                public string type { get; set; } = "appClipDefaultExperiences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appClipDefaultExperiences/{id}
        public Task<AppClipDefaultExperienceResponse> PatchAppClipDefaultExperiences(string id, AppClipDefaultExperienceUpdateRequest request)
        {
            string path = "/v1/appClipDefaultExperiences/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipDefaultExperienceResponse>(message);
        }

        // /v1/appClipDefaultExperiences/{id}
        public Task DeleteAppClipDefaultExperiences(string id)
        {
            string path = "/v1/appClipDefaultExperiences/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppClipHeaderImageCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                }

                public class Relationships
                {
                    public class AppClipDefaultExperienceLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppClipDefaultExperienceLocalization appClipDefaultExperienceLocalization { get; set; } = new AppClipDefaultExperienceLocalization();
                }

                public string type { get; set; } = "appClipHeaderImages";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppClipHeaderImageResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class AppClipDefaultExperienceLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppClipDefaultExperienceLocalization? appClipDefaultExperienceLocalization { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipHeaderImages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? subtitle { get; set; }
                }

                public class Relationships
                {
                    public class AppClipDefaultExperience
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipHeaderImage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipHeaderImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                    public AppClipHeaderImage? appClipHeaderImage { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appClipHeaderImages
        public Task<AppClipHeaderImageResponse> PostAppClipHeaderImages(AppClipHeaderImageCreateRequest request)
        {
            string path = "/v1/appClipHeaderImages";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipHeaderImageResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipHeaderImagesFieldsAppClipHeaderImages
        {
            appClipDefaultExperienceLocalization,
            assetDeliveryState,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        // /v1/appClipHeaderImages/{id}
        public Task<AppClipHeaderImageResponse> GetAppClipHeaderImages(string id, GetAppClipHeaderImagesFieldsAppClipHeaderImages[]? fieldsAppClipHeaderImages = default, string[]? include = default)
        {
            string path = "/v1/appClipHeaderImages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipHeaderImages != null)
                uriBuilder.AddParameter("fields[appClipHeaderImages]", string.Join(",", fieldsAppClipHeaderImages));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipHeaderImageResponse>(message);
        }

        public class AppClipHeaderImageUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "appClipHeaderImages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appClipHeaderImages/{id}
        public Task<AppClipHeaderImageResponse> PatchAppClipHeaderImages(string id, AppClipHeaderImageUpdateRequest request)
        {
            string path = "/v1/appClipHeaderImages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppClipHeaderImageResponse>(message);
        }

        // /v1/appClipHeaderImages/{id}
        public Task DeleteAppClipHeaderImages(string id)
        {
            string path = "/v1/appClipHeaderImages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppClipResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? bundleId { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperiences
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AppClipDefaultExperiences? appClipDefaultExperiences { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClips";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsFieldsAppClips
        {
            app,
            appClipAdvancedExperiences,
            appClipDefaultExperiences,
            bundleId,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsInclude
        {
            app,
            appClipDefaultExperiences,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsFieldsAppClipAdvancedExperiences
        {
            action,
            appClip,
            businessCategory,
            defaultLanguage,
            headerImage,
            isPoweredBy,
            link,
            localizations,
            place,
            placeStatus,
            removed,
            status,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }



        // /v1/appClips/{id}
        public Task<AppClipResponse> GetAppClips(string id, GetAppClipsFieldsAppClips[]? fieldsAppClips = default, GetAppClipsInclude[]? include = default, GetAppClipsFieldsAppClipAdvancedExperiences[]? fieldsAppClipAdvancedExperiences = default, GetAppClipsFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, int? limitAppClipDefaultExperiences = default)
        {
            string path = "/v1/appClips/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClips != null)
                uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppClipAdvancedExperiences != null)
                uriBuilder.AddParameter("fields[appClipAdvancedExperiences]", string.Join(",", fieldsAppClipAdvancedExperiences));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (limitAppClipDefaultExperiences.HasValue)
                uriBuilder.AddParameter("limit[appClipDefaultExperiences]", limitAppClipDefaultExperiences.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipResponse>(message);
        }

        public class AppCustomProductPageLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string locale { get; set; } = "";
                    public string? promotionalText { get; set; }
                }

                public class Relationships
                {
                    public class AppCustomProductPageVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppCustomProductPageVersion appCustomProductPageVersion { get; set; } = new AppCustomProductPageVersion();
                }

                public string type { get; set; } = "appCustomProductPageLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppCustomProductPageLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? promotionalText { get; set; }
                }

                public class Relationships
                {
                    public class AppCustomProductPageVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshotSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppPreviewSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppCustomProductPageVersion? appCustomProductPageVersion { get; set; }
                    public AppScreenshotSets? appScreenshotSets { get; set; }
                    public AppPreviewSets? appPreviewSets { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCustomProductPageLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appCustomProductPageLocalizations
        public Task<AppCustomProductPageLocalizationResponse> PostAppCustomProductPageLocalizations(AppCustomProductPageLocalizationCreateRequest request)
        {
            string path = "/v1/appCustomProductPageLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppCustomProductPageLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsInclude
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }




        // /v1/appCustomProductPageLocalizations/{id}
        public Task<AppCustomProductPageLocalizationResponse> GetAppCustomProductPageLocalizations(string id, GetAppCustomProductPageLocalizationsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppCustomProductPageLocalizationsInclude[]? include = default, GetAppCustomProductPageLocalizationsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppCustomProductPageLocalizationsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limitAppPreviewSets = default, int? limitAppScreenshotSets = default)
        {
            string path = "/v1/appCustomProductPageLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (limitAppPreviewSets.HasValue)
                uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());
            if (limitAppScreenshotSets.HasValue)
                uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCustomProductPageLocalizationResponse>(message);
        }

        public class AppCustomProductPageLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? promotionalText { get; set; }
                }

                public string type { get; set; } = "appCustomProductPageLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appCustomProductPageLocalizations/{id}
        public Task<AppCustomProductPageLocalizationResponse> PatchAppCustomProductPageLocalizations(string id, AppCustomProductPageLocalizationUpdateRequest request)
        {
            string path = "/v1/appCustomProductPageLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppCustomProductPageLocalizationResponse>(message);
        }

        // /v1/appCustomProductPageLocalizations/{id}
        public Task DeleteAppCustomProductPageLocalizations(string id)
        {
            string path = "/v1/appCustomProductPageLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppCustomProductPageVersionCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class AppCustomProductPage
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class AppCustomProductPageLocalizations
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public AppCustomProductPage appCustomProductPage { get; set; } = new AppCustomProductPage();
                    public AppCustomProductPageLocalizations? appCustomProductPageLocalizations { get; set; }
                }

                public string type { get; set; } = "appCustomProductPageVersions";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppCustomProductPageVersionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? version { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        READY_FOR_REVIEW,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        ACCEPTED,
                        APPROVED,
                        REPLACED_WITH_NEW_VERSION,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class AppCustomProductPage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppCustomProductPage? appCustomProductPage { get; set; }
                    public AppCustomProductPageLocalizations? appCustomProductPageLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCustomProductPageVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appCustomProductPageVersions
        public Task<AppCustomProductPageVersionResponse> PostAppCustomProductPageVersions(AppCustomProductPageVersionCreateRequest request)
        {
            string path = "/v1/appCustomProductPageVersions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppCustomProductPageVersionResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageVersionsFieldsAppCustomProductPageVersions
        {
            appCustomProductPage,
            appCustomProductPageLocalizations,
            state,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageVersionsInclude
        {
            appCustomProductPage,
            appCustomProductPageLocalizations,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageVersionsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }



        // /v1/appCustomProductPageVersions/{id}
        public Task<AppCustomProductPageVersionResponse> GetAppCustomProductPageVersions(string id, GetAppCustomProductPageVersionsFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, GetAppCustomProductPageVersionsInclude[]? include = default, GetAppCustomProductPageVersionsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, int? limitAppCustomProductPageLocalizations = default)
        {
            string path = "/v1/appCustomProductPageVersions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCustomProductPageVersions != null)
                uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (limitAppCustomProductPageLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appCustomProductPageLocalizations]", limitAppCustomProductPageLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCustomProductPageVersionResponse>(message);
        }

        public class AppCustomProductPageCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class AppCustomProductPageVersions
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersionTemplate
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class CustomProductPageTemplate
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public App app { get; set; } = new App();
                    public AppCustomProductPageVersions? appCustomProductPageVersions { get; set; }
                    public AppStoreVersionTemplate? appStoreVersionTemplate { get; set; }
                    public CustomProductPageTemplate? customProductPageTemplate { get; set; }
                }

                public string type { get; set; } = "appCustomProductPages";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public class Included
            {
                public class Attributes
                {
                    public string locale { get; set; } = "";
                    public string? promotionalText { get; set; }
                }

                public class Relationships
                {
                    public class AppCustomProductPageVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public AppCustomProductPageVersion? appCustomProductPageVersion { get; set; }
                }

                public string type { get; set; } = "appCustomProductPageLocalizations";
                public string? id { get; set; }
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        public class AppCustomProductPageResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? url { get; set; }
                    public bool? visible { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AppCustomProductPageVersions? appCustomProductPageVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCustomProductPages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appCustomProductPages
        public Task<AppCustomProductPageResponse> PostAppCustomProductPages(AppCustomProductPageCreateRequest request)
        {
            string path = "/v1/appCustomProductPages";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppCustomProductPageResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPagesFieldsAppCustomProductPages
        {
            app,
            appCustomProductPageVersions,
            appStoreVersionTemplate,
            customProductPageTemplate,
            name,
            url,
            visible,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPagesInclude
        {
            app,
            appCustomProductPageVersions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPagesFieldsAppCustomProductPageVersions
        {
            appCustomProductPage,
            appCustomProductPageLocalizations,
            state,
            version,
        }



        // /v1/appCustomProductPages/{id}
        public Task<AppCustomProductPageResponse> GetAppCustomProductPages(string id, GetAppCustomProductPagesFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, GetAppCustomProductPagesInclude[]? include = default, GetAppCustomProductPagesFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, int? limitAppCustomProductPageVersions = default)
        {
            string path = "/v1/appCustomProductPages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCustomProductPages != null)
                uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppCustomProductPageVersions != null)
                uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
            if (limitAppCustomProductPageVersions.HasValue)
                uriBuilder.AddParameter("limit[appCustomProductPageVersions]", limitAppCustomProductPageVersions.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCustomProductPageResponse>(message);
        }

        public class AppCustomProductPageUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public bool? visible { get; set; }
                }

                public string type { get; set; } = "appCustomProductPages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appCustomProductPages/{id}
        public Task<AppCustomProductPageResponse> PatchAppCustomProductPages(string id, AppCustomProductPageUpdateRequest request)
        {
            string path = "/v1/appCustomProductPages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppCustomProductPageResponse>(message);
        }

        // /v1/appCustomProductPages/{id}
        public Task DeleteAppCustomProductPages(string id)
        {
            string path = "/v1/appCustomProductPages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppEncryptionDeclarationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? usesEncryption { get; set; }
                    public bool? exempt { get; set; }
                    public bool? containsProprietaryCryptography { get; set; }
                    public bool? containsThirdPartyCryptography { get; set; }
                    public bool? availableOnFrenchStore { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? documentUrl { get; set; }
                    public string? documentName { get; set; }
                    public string? documentType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppEncryptionDeclarationState
                    {
                        IN_REVIEW,
                        APPROVED,
                        REJECTED,
                        INVALID,
                        EXPIRED,
                    }
                    public AppEncryptionDeclarationState? appEncryptionDeclarationState { get; set; }
                    public string? codeValue { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEncryptionDeclarations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEncryptionDeclarationsFilterPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEncryptionDeclarationsFieldsAppEncryptionDeclarations
        {
            app,
            appEncryptionDeclarationState,
            availableOnFrenchStore,
            builds,
            codeValue,
            containsProprietaryCryptography,
            containsThirdPartyCryptography,
            documentName,
            documentType,
            documentUrl,
            exempt,
            platform,
            uploadedDate,
            usesEncryption,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEncryptionDeclarationsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/appEncryptionDeclarations
        public Task<AppEncryptionDeclarationsResponse> GetAppEncryptionDeclarations(GetAppEncryptionDeclarationsFilterPlatform[]? filterPlatform = default, string[]? filterApp = default, string[]? filterBuilds = default, GetAppEncryptionDeclarationsFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, int? limit = default, string[]? include = default, GetAppEncryptionDeclarationsFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/appEncryptionDeclarations";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (filterBuilds != null)
                uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
            if (fieldsAppEncryptionDeclarations != null)
                uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEncryptionDeclarationsResponse>(message);
        }

        public class AppEncryptionDeclarationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? usesEncryption { get; set; }
                    public bool? exempt { get; set; }
                    public bool? containsProprietaryCryptography { get; set; }
                    public bool? containsThirdPartyCryptography { get; set; }
                    public bool? availableOnFrenchStore { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? documentUrl { get; set; }
                    public string? documentName { get; set; }
                    public string? documentType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppEncryptionDeclarationState
                    {
                        IN_REVIEW,
                        APPROVED,
                        REJECTED,
                        INVALID,
                        EXPIRED,
                    }
                    public AppEncryptionDeclarationState? appEncryptionDeclarationState { get; set; }
                    public string? codeValue { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEncryptionDeclarations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }




        // /v1/appEncryptionDeclarations/{id}
        public Task<AppEncryptionDeclarationResponse> GetAppEncryptionDeclarations(string id, GetAppEncryptionDeclarationsFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, string[]? include = default, GetAppEncryptionDeclarationsFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/appEncryptionDeclarations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEncryptionDeclarations != null)
                uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEncryptionDeclarationResponse>(message);
        }

        public class AppEventLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string locale { get; set; } = "";
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppEvent appEvent { get; set; } = new AppEvent();
                }

                public string type { get; set; } = "appEventLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppEventLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEventScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEventVideoClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventVideoClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppEvent? appEvent { get; set; }
                    public AppEventScreenshots? appEventScreenshots { get; set; }
                    public AppEventVideoClips? appEventVideoClips { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appEventLocalizations
        public Task<AppEventLocalizationResponse> PostAppEventLocalizations(AppEventLocalizationCreateRequest request)
        {
            string path = "/v1/appEventLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppEventLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventLocalizationsFieldsAppEventLocalizations
        {
            appEvent,
            appEventScreenshots,
            appEventVideoClips,
            locale,
            longDescription,
            name,
            shortDescription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventLocalizationsInclude
        {
            appEvent,
            appEventScreenshots,
            appEventVideoClips,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventLocalizationsFieldsAppEventScreenshots
        {
            appEventAssetType,
            appEventLocalization,
            assetDeliveryState,
            assetToken,
            fileName,
            fileSize,
            imageAsset,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventLocalizationsFieldsAppEventVideoClips
        {
            appEventAssetType,
            appEventLocalization,
            assetDeliveryState,
            fileName,
            fileSize,
            previewFrameTimeCode,
            previewImage,
            uploadOperations,
            uploaded,
            videoUrl,
        }




        // /v1/appEventLocalizations/{id}
        public Task<AppEventLocalizationResponse> GetAppEventLocalizations(string id, GetAppEventLocalizationsFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, GetAppEventLocalizationsInclude[]? include = default, GetAppEventLocalizationsFieldsAppEventScreenshots[]? fieldsAppEventScreenshots = default, GetAppEventLocalizationsFieldsAppEventVideoClips[]? fieldsAppEventVideoClips = default, int? limitAppEventScreenshots = default, int? limitAppEventVideoClips = default)
        {
            string path = "/v1/appEventLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEventLocalizations != null)
                uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppEventScreenshots != null)
                uriBuilder.AddParameter("fields[appEventScreenshots]", string.Join(",", fieldsAppEventScreenshots));
            if (fieldsAppEventVideoClips != null)
                uriBuilder.AddParameter("fields[appEventVideoClips]", string.Join(",", fieldsAppEventVideoClips));
            if (limitAppEventScreenshots.HasValue)
                uriBuilder.AddParameter("limit[appEventScreenshots]", limitAppEventScreenshots.Value.ToString());
            if (limitAppEventVideoClips.HasValue)
                uriBuilder.AddParameter("limit[appEventVideoClips]", limitAppEventVideoClips.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEventLocalizationResponse>(message);
        }

        public class AppEventLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appEventLocalizations/{id}
        public Task<AppEventLocalizationResponse> PatchAppEventLocalizations(string id, AppEventLocalizationUpdateRequest request)
        {
            string path = "/v1/appEventLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppEventLocalizationResponse>(message);
        }

        // /v1/appEventLocalizations/{id}
        public Task DeleteAppEventLocalizations(string id)
        {
            string path = "/v1/appEventLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppEventScreenshotCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppEventAssetType
                    {
                        EVENT_CARD,
                        EVENT_DETAILS_PAGE,
                    }
                    public AppEventAssetType appEventAssetType { get; set; } = default;
                }

                public class Relationships
                {
                    public class AppEventLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appEventLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppEventLocalization appEventLocalization { get; set; } = new AppEventLocalization();
                }

                public string type { get; set; } = "appEventScreenshots";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppEventScreenshotResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public string? assetToken { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppEventAssetType
                    {
                        EVENT_CARD,
                        EVENT_DETAILS_PAGE,
                    }
                    public AppEventAssetType? appEventAssetType { get; set; }
                }

                public class Relationships
                {
                    public class AppEventLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppEventLocalization? appEventLocalization { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEventScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEventVideoClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventVideoClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppEvent? appEvent { get; set; }
                    public AppEventScreenshots? appEventScreenshots { get; set; }
                    public AppEventVideoClips? appEventVideoClips { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appEventScreenshots
        public Task<AppEventScreenshotResponse> PostAppEventScreenshots(AppEventScreenshotCreateRequest request)
        {
            string path = "/v1/appEventScreenshots";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppEventScreenshotResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventScreenshotsFieldsAppEventScreenshots
        {
            appEventAssetType,
            appEventLocalization,
            assetDeliveryState,
            assetToken,
            fileName,
            fileSize,
            imageAsset,
            uploadOperations,
            uploaded,
        }



        // /v1/appEventScreenshots/{id}
        public Task<AppEventScreenshotResponse> GetAppEventScreenshots(string id, GetAppEventScreenshotsFieldsAppEventScreenshots[]? fieldsAppEventScreenshots = default, string[]? include = default)
        {
            string path = "/v1/appEventScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEventScreenshots != null)
                uriBuilder.AddParameter("fields[appEventScreenshots]", string.Join(",", fieldsAppEventScreenshots));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEventScreenshotResponse>(message);
        }

        public class AppEventScreenshotUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "appEventScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appEventScreenshots/{id}
        public Task<AppEventScreenshotResponse> PatchAppEventScreenshots(string id, AppEventScreenshotUpdateRequest request)
        {
            string path = "/v1/appEventScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppEventScreenshotResponse>(message);
        }

        // /v1/appEventScreenshots/{id}
        public Task DeleteAppEventScreenshots(string id)
        {
            string path = "/v1/appEventScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppEventVideoClipCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                    public string? previewFrameTimeCode { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppEventAssetType
                    {
                        EVENT_CARD,
                        EVENT_DETAILS_PAGE,
                    }
                    public AppEventAssetType appEventAssetType { get; set; } = default;
                }

                public class Relationships
                {
                    public class AppEventLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appEventLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppEventLocalization appEventLocalization { get; set; } = new AppEventLocalization();
                }

                public string type { get; set; } = "appEventVideoClips";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppEventVideoClipResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class PreviewImage
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? previewFrameTimeCode { get; set; }
                    public string? videoUrl { get; set; }
                    public PreviewImage? previewImage { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppEventAssetType
                    {
                        EVENT_CARD,
                        EVENT_DETAILS_PAGE,
                    }
                    public AppEventAssetType? appEventAssetType { get; set; }
                }

                public class Relationships
                {
                    public class AppEventLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppEventLocalization? appEventLocalization { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventVideoClips";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEventScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEventVideoClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventVideoClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppEvent? appEvent { get; set; }
                    public AppEventScreenshots? appEventScreenshots { get; set; }
                    public AppEventVideoClips? appEventVideoClips { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appEventVideoClips
        public Task<AppEventVideoClipResponse> PostAppEventVideoClips(AppEventVideoClipCreateRequest request)
        {
            string path = "/v1/appEventVideoClips";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppEventVideoClipResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventVideoClipsFieldsAppEventVideoClips
        {
            appEventAssetType,
            appEventLocalization,
            assetDeliveryState,
            fileName,
            fileSize,
            previewFrameTimeCode,
            previewImage,
            uploadOperations,
            uploaded,
            videoUrl,
        }



        // /v1/appEventVideoClips/{id}
        public Task<AppEventVideoClipResponse> GetAppEventVideoClips(string id, GetAppEventVideoClipsFieldsAppEventVideoClips[]? fieldsAppEventVideoClips = default, string[]? include = default)
        {
            string path = "/v1/appEventVideoClips/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEventVideoClips != null)
                uriBuilder.AddParameter("fields[appEventVideoClips]", string.Join(",", fieldsAppEventVideoClips));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEventVideoClipResponse>(message);
        }

        public class AppEventVideoClipUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? previewFrameTimeCode { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "appEventVideoClips";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appEventVideoClips/{id}
        public Task<AppEventVideoClipResponse> PatchAppEventVideoClips(string id, AppEventVideoClipUpdateRequest request)
        {
            string path = "/v1/appEventVideoClips/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppEventVideoClipResponse>(message);
        }

        // /v1/appEventVideoClips/{id}
        public Task DeleteAppEventVideoClips(string id)
        {
            string path = "/v1/appEventVideoClips/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppEventCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public class TerritorySchedules
                    {
                        public string[]? territories { get; set; }
                        public string? publishStart { get; set; }
                        public string? eventStart { get; set; }
                        public string? eventEnd { get; set; }
                    }

                    public string referenceName { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Badge
                    {
                        LIVE_EVENT,
                        PREMIERE,
                        CHALLENGE,
                        COMPETITION,
                        NEW_SEASON,
                        MAJOR_UPDATE,
                        SPECIAL_EVENT,
                    }
                    public Badge? badge { get; set; }
                    public string? deepLink { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PurchaseRequirement
                    {
                        NO_COST_ASSOCIATED,
                        IN_APP_PURCHASE,
                        SUBSCRIPTION,
                        IN_APP_PURCHASE_AND_SUBSCRIPTION,
                        IN_APP_PURCHASE_OR_SUBSCRIPTION,
                    }
                    public PurchaseRequirement? purchaseRequirement { get; set; }
                    public string? primaryLocale { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Priority
                    {
                        HIGH,
                        NORMAL,
                    }
                    public Priority? priority { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Purpose
                    {
                        APPROPRIATE_FOR_ALL_USERS,
                        ATTRACT_NEW_USERS,
                        KEEP_ACTIVE_USERS_INFORMED,
                        BRING_BACK_LAPSED_USERS,
                    }
                    public Purpose? purpose { get; set; }
                    public TerritorySchedules[]? territorySchedules { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public App app { get; set; } = new App();
                }

                public string type { get; set; } = "appEvents";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppEventResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class TerritorySchedules
                    {
                        public string[]? territories { get; set; }
                        public string? publishStart { get; set; }
                        public string? eventStart { get; set; }
                        public string? eventEnd { get; set; }
                    }

                    public class ArchivedTerritorySchedules
                    {
                        public string[]? territories { get; set; }
                        public string? publishStart { get; set; }
                        public string? eventStart { get; set; }
                        public string? eventEnd { get; set; }
                    }

                    public string? referenceName { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Badge
                    {
                        LIVE_EVENT,
                        PREMIERE,
                        CHALLENGE,
                        COMPETITION,
                        NEW_SEASON,
                        MAJOR_UPDATE,
                        SPECIAL_EVENT,
                    }
                    public Badge? badge { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum EventState
                    {
                        DRAFT,
                        READY_FOR_REVIEW,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        REJECTED,
                        ACCEPTED,
                        APPROVED,
                        PUBLISHED,
                        PAST,
                        ARCHIVED,
                    }
                    public EventState? eventState { get; set; }
                    public string? deepLink { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PurchaseRequirement
                    {
                        NO_COST_ASSOCIATED,
                        IN_APP_PURCHASE,
                        SUBSCRIPTION,
                        IN_APP_PURCHASE_AND_SUBSCRIPTION,
                        IN_APP_PURCHASE_OR_SUBSCRIPTION,
                    }
                    public PurchaseRequirement? purchaseRequirement { get; set; }
                    public string? primaryLocale { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Priority
                    {
                        HIGH,
                        NORMAL,
                    }
                    public Priority? priority { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Purpose
                    {
                        APPROPRIATE_FOR_ALL_USERS,
                        ATTRACT_NEW_USERS,
                        KEEP_ACTIVE_USERS_INFORMED,
                        BRING_BACK_LAPSED_USERS,
                    }
                    public Purpose? purpose { get; set; }
                    public TerritorySchedules[]? territorySchedules { get; set; }
                    public ArchivedTerritorySchedules[]? archivedTerritorySchedules { get; set; }
                }

                public class Relationships
                {
                    public class Localizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Localizations? localizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEvents";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEventScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEventVideoClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventVideoClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppEvent? appEvent { get; set; }
                    public AppEventScreenshots? appEventScreenshots { get; set; }
                    public AppEventVideoClips? appEventVideoClips { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appEvents
        public Task<AppEventResponse> PostAppEvents(AppEventCreateRequest request)
        {
            string path = "/v1/appEvents";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppEventResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventsFieldsAppEvents
        {
            app,
            archivedTerritorySchedules,
            badge,
            deepLink,
            eventState,
            localizations,
            primaryLocale,
            priority,
            purchaseRequirement,
            purpose,
            referenceName,
            territorySchedules,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventsFieldsAppEventLocalizations
        {
            appEvent,
            appEventScreenshots,
            appEventVideoClips,
            locale,
            longDescription,
            name,
            shortDescription,
        }



        // /v1/appEvents/{id}
        public Task<AppEventResponse> GetAppEvents(string id, GetAppEventsFieldsAppEvents[]? fieldsAppEvents = default, string[]? include = default, GetAppEventsFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, int? limitLocalizations = default)
        {
            string path = "/v1/appEvents/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEvents != null)
                uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppEventLocalizations != null)
                uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
            if (limitLocalizations.HasValue)
                uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEventResponse>(message);
        }

        public class AppEventUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public class TerritorySchedules
                    {
                        public string[]? territories { get; set; }
                        public string? publishStart { get; set; }
                        public string? eventStart { get; set; }
                        public string? eventEnd { get; set; }
                    }

                    public string? referenceName { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Badge
                    {
                        LIVE_EVENT,
                        PREMIERE,
                        CHALLENGE,
                        COMPETITION,
                        NEW_SEASON,
                        MAJOR_UPDATE,
                        SPECIAL_EVENT,
                    }
                    public Badge? badge { get; set; }
                    public string? deepLink { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PurchaseRequirement
                    {
                        NO_COST_ASSOCIATED,
                        IN_APP_PURCHASE,
                        SUBSCRIPTION,
                        IN_APP_PURCHASE_AND_SUBSCRIPTION,
                        IN_APP_PURCHASE_OR_SUBSCRIPTION,
                    }
                    public PurchaseRequirement? purchaseRequirement { get; set; }
                    public string? primaryLocale { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Priority
                    {
                        HIGH,
                        NORMAL,
                    }
                    public Priority? priority { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Purpose
                    {
                        APPROPRIATE_FOR_ALL_USERS,
                        ATTRACT_NEW_USERS,
                        KEEP_ACTIVE_USERS_INFORMED,
                        BRING_BACK_LAPSED_USERS,
                    }
                    public Purpose? purpose { get; set; }
                    public TerritorySchedules[]? territorySchedules { get; set; }
                }

                public string type { get; set; } = "appEvents";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appEvents/{id}
        public Task<AppEventResponse> PatchAppEvents(string id, AppEventUpdateRequest request)
        {
            string path = "/v1/appEvents/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppEventResponse>(message);
        }

        // /v1/appEvents/{id}
        public Task DeleteAppEvents(string id)
        {
            string path = "/v1/appEvents/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppInfoLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string locale { get; set; } = "";
                    public string? name { get; set; }
                    public string? subtitle { get; set; }
                    public string? privacyPolicyUrl { get; set; }
                    public string? privacyChoicesUrl { get; set; }
                    public string? privacyPolicyText { get; set; }
                }

                public class Relationships
                {
                    public class AppInfo
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppInfo appInfo { get; set; } = new AppInfo();
                }

                public string type { get; set; } = "appInfoLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppInfoLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? subtitle { get; set; }
                    public string? privacyPolicyUrl { get; set; }
                    public string? privacyChoicesUrl { get; set; }
                    public string? privacyPolicyText { get; set; }
                }

                public class Relationships
                {
                    public class AppInfo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppInfo? appInfo { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appInfoLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreState
                    {
                        ACCEPTED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        DEVELOPER_REJECTED,
                        IN_REVIEW,
                        INVALID_BINARY,
                        METADATA_REJECTED,
                        PENDING_APPLE_RELEASE,
                        PENDING_CONTRACT,
                        PENDING_DEVELOPER_RELEASE,
                        PREPARE_FOR_SUBMISSION,
                        PREORDER_READY_FOR_SALE,
                        PROCESSING_FOR_APP_STORE,
                        READY_FOR_REVIEW,
                        READY_FOR_SALE,
                        REJECTED,
                        REMOVED_FROM_SALE,
                        WAITING_FOR_EXPORT_COMPLIANCE,
                        WAITING_FOR_REVIEW,
                        REPLACED_WITH_NEW_VERSION,
                    }
                    public AppStoreState? appStoreState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreAgeRating
                    {
                        FOUR_PLUS,
                        NINE_PLUS,
                        TWELVE_PLUS,
                        SEVENTEEN_PLUS,
                    }
                    public AppStoreAgeRating? appStoreAgeRating { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BrazilAgeRating
                    {
                        L,
                        TEN,
                        TWELVE,
                        FOURTEEN,
                        SIXTEEN,
                        EIGHTEEN,
                    }
                    public BrazilAgeRating? brazilAgeRating { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum KidsAgeBand
                    {
                        FIVE_AND_UNDER,
                        SIX_TO_EIGHT,
                        NINE_TO_ELEVEN,
                    }
                    public KidsAgeBand? kidsAgeBand { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AgeRatingDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ageRatingDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfoLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfoLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PrimaryCategory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryOne
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryTwo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondaryCategory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryOne
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryTwo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AgeRatingDeclaration? ageRatingDeclaration { get; set; }
                    public AppInfoLocalizations? appInfoLocalizations { get; set; }
                    public PrimaryCategory? primaryCategory { get; set; }
                    public PrimarySubcategoryOne? primarySubcategoryOne { get; set; }
                    public PrimarySubcategoryTwo? primarySubcategoryTwo { get; set; }
                    public SecondaryCategory? secondaryCategory { get; set; }
                    public SecondarySubcategoryOne? secondarySubcategoryOne { get; set; }
                    public SecondarySubcategoryTwo? secondarySubcategoryTwo { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appInfos";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appInfoLocalizations
        public Task<AppInfoLocalizationResponse> PostAppInfoLocalizations(AppInfoLocalizationCreateRequest request)
        {
            string path = "/v1/appInfoLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppInfoLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfoLocalizationsFieldsAppInfoLocalizations
        {
            appInfo,
            locale,
            name,
            privacyChoicesUrl,
            privacyPolicyText,
            privacyPolicyUrl,
            subtitle,
        }



        // /v1/appInfoLocalizations/{id}
        public Task<AppInfoLocalizationResponse> GetAppInfoLocalizations(string id, GetAppInfoLocalizationsFieldsAppInfoLocalizations[]? fieldsAppInfoLocalizations = default, string[]? include = default)
        {
            string path = "/v1/appInfoLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppInfoLocalizations != null)
                uriBuilder.AddParameter("fields[appInfoLocalizations]", string.Join(",", fieldsAppInfoLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppInfoLocalizationResponse>(message);
        }

        public class AppInfoLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? subtitle { get; set; }
                    public string? privacyPolicyUrl { get; set; }
                    public string? privacyChoicesUrl { get; set; }
                    public string? privacyPolicyText { get; set; }
                }

                public string type { get; set; } = "appInfoLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appInfoLocalizations/{id}
        public Task<AppInfoLocalizationResponse> PatchAppInfoLocalizations(string id, AppInfoLocalizationUpdateRequest request)
        {
            string path = "/v1/appInfoLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppInfoLocalizationResponse>(message);
        }

        // /v1/appInfoLocalizations/{id}
        public Task DeleteAppInfoLocalizations(string id)
        {
            string path = "/v1/appInfoLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppInfoResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreState
                    {
                        ACCEPTED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        DEVELOPER_REJECTED,
                        IN_REVIEW,
                        INVALID_BINARY,
                        METADATA_REJECTED,
                        PENDING_APPLE_RELEASE,
                        PENDING_CONTRACT,
                        PENDING_DEVELOPER_RELEASE,
                        PREPARE_FOR_SUBMISSION,
                        PREORDER_READY_FOR_SALE,
                        PROCESSING_FOR_APP_STORE,
                        READY_FOR_REVIEW,
                        READY_FOR_SALE,
                        REJECTED,
                        REMOVED_FROM_SALE,
                        WAITING_FOR_EXPORT_COMPLIANCE,
                        WAITING_FOR_REVIEW,
                        REPLACED_WITH_NEW_VERSION,
                    }
                    public AppStoreState? appStoreState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreAgeRating
                    {
                        FOUR_PLUS,
                        NINE_PLUS,
                        TWELVE_PLUS,
                        SEVENTEEN_PLUS,
                    }
                    public AppStoreAgeRating? appStoreAgeRating { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BrazilAgeRating
                    {
                        L,
                        TEN,
                        TWELVE,
                        FOURTEEN,
                        SIXTEEN,
                        EIGHTEEN,
                    }
                    public BrazilAgeRating? brazilAgeRating { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum KidsAgeBand
                    {
                        FIVE_AND_UNDER,
                        SIX_TO_EIGHT,
                        NINE_TO_ELEVEN,
                    }
                    public KidsAgeBand? kidsAgeBand { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AgeRatingDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ageRatingDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfoLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfoLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PrimaryCategory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryOne
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryTwo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondaryCategory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryOne
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryTwo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AgeRatingDeclaration? ageRatingDeclaration { get; set; }
                    public AppInfoLocalizations? appInfoLocalizations { get; set; }
                    public PrimaryCategory? primaryCategory { get; set; }
                    public PrimarySubcategoryOne? primarySubcategoryOne { get; set; }
                    public PrimarySubcategoryTwo? primarySubcategoryTwo { get; set; }
                    public SecondaryCategory? secondaryCategory { get; set; }
                    public SecondarySubcategoryOne? secondarySubcategoryOne { get; set; }
                    public SecondarySubcategoryTwo? secondarySubcategoryTwo { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appInfos";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosFieldsAppInfos
        {
            ageRatingDeclaration,
            app,
            appInfoLocalizations,
            appStoreAgeRating,
            appStoreState,
            brazilAgeRating,
            kidsAgeBand,
            primaryCategory,
            primarySubcategoryOne,
            primarySubcategoryTwo,
            secondaryCategory,
            secondarySubcategoryOne,
            secondarySubcategoryTwo,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosInclude
        {
            ageRatingDeclaration,
            app,
            appInfoLocalizations,
            primaryCategory,
            primarySubcategoryOne,
            primarySubcategoryTwo,
            secondaryCategory,
            secondarySubcategoryOne,
            secondarySubcategoryTwo,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosFieldsAgeRatingDeclarations
        {
            alcoholTobaccoOrDrugUseOrReferences,
            contests,
            gambling,
            gamblingAndContests,
            gamblingSimulated,
            horrorOrFearThemes,
            kidsAgeBand,
            matureOrSuggestiveThemes,
            medicalOrTreatmentInformation,
            profanityOrCrudeHumor,
            seventeenPlus,
            sexualContentGraphicAndNudity,
            sexualContentOrNudity,
            unrestrictedWebAccess,
            violenceCartoonOrFantasy,
            violenceRealistic,
            violenceRealisticProlongedGraphicOrSadistic,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosFieldsAppInfoLocalizations
        {
            appInfo,
            locale,
            name,
            privacyChoicesUrl,
            privacyPolicyText,
            privacyPolicyUrl,
            subtitle,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }



        // /v1/appInfos/{id}
        public Task<AppInfoResponse> GetAppInfos(string id, GetAppInfosFieldsAppInfos[]? fieldsAppInfos = default, GetAppInfosInclude[]? include = default, GetAppInfosFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, GetAppInfosFieldsAppInfoLocalizations[]? fieldsAppInfoLocalizations = default, GetAppInfosFieldsAppCategories[]? fieldsAppCategories = default, int? limitAppInfoLocalizations = default)
        {
            string path = "/v1/appInfos/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppInfos != null)
                uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAgeRatingDeclarations != null)
                uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
            if (fieldsAppInfoLocalizations != null)
                uriBuilder.AddParameter("fields[appInfoLocalizations]", string.Join(",", fieldsAppInfoLocalizations));
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
            if (limitAppInfoLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appInfoLocalizations]", limitAppInfoLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppInfoResponse>(message);
        }

        public class AppInfoUpdateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class PrimaryCategory
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryOne
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryTwo
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SecondaryCategory
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryOne
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryTwo
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public PrimaryCategory? primaryCategory { get; set; }
                    public PrimarySubcategoryOne? primarySubcategoryOne { get; set; }
                    public PrimarySubcategoryTwo? primarySubcategoryTwo { get; set; }
                    public SecondaryCategory? secondaryCategory { get; set; }
                    public SecondarySubcategoryOne? secondarySubcategoryOne { get; set; }
                    public SecondarySubcategoryTwo? secondarySubcategoryTwo { get; set; }
                }

                public string type { get; set; } = "appInfos";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appInfos/{id}
        public Task<AppInfoResponse> PatchAppInfos(string id, AppInfoUpdateRequest request)
        {
            string path = "/v1/appInfos/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppInfoResponse>(message);
        }

        public class AppPreOrderCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? appReleaseDate { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public App app { get; set; } = new App();
                }

                public string type { get; set; } = "appPreOrders";
                public Attributes? attributes { get; set; }
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppPreOrderResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? preOrderAvailableDate { get; set; }
                    public string? appReleaseDate { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPreOrders";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appPreOrders
        public Task<AppPreOrderResponse> PostAppPreOrders(AppPreOrderCreateRequest request)
        {
            string path = "/v1/appPreOrders";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppPreOrderResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPreOrdersFieldsAppPreOrders
        {
            app,
            appReleaseDate,
            preOrderAvailableDate,
        }



        // /v1/appPreOrders/{id}
        public Task<AppPreOrderResponse> GetAppPreOrders(string id, GetAppPreOrdersFieldsAppPreOrders[]? fieldsAppPreOrders = default, string[]? include = default)
        {
            string path = "/v1/appPreOrders/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPreOrders != null)
                uriBuilder.AddParameter("fields[appPreOrders]", string.Join(",", fieldsAppPreOrders));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPreOrderResponse>(message);
        }

        public class AppPreOrderUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? appReleaseDate { get; set; }
                }

                public string type { get; set; } = "appPreOrders";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appPreOrders/{id}
        public Task<AppPreOrderResponse> PatchAppPreOrders(string id, AppPreOrderUpdateRequest request)
        {
            string path = "/v1/appPreOrders/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppPreOrderResponse>(message);
        }

        // /v1/appPreOrders/{id}
        public Task DeleteAppPreOrders(string id)
        {
            string path = "/v1/appPreOrders/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppPreviewSetCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PreviewType
                    {
                        IPHONE_67,
                        IPHONE_61,
                        IPHONE_65,
                        IPHONE_58,
                        IPHONE_55,
                        IPHONE_47,
                        IPHONE_40,
                        IPHONE_35,
                        IPAD_PRO_3GEN_129,
                        IPAD_PRO_3GEN_11,
                        IPAD_PRO_129,
                        IPAD_105,
                        IPAD_97,
                        DESKTOP,
                        APPLE_TV,
                    }
                    public PreviewType previewType { get; set; } = default;
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                }

                public string type { get; set; } = "appPreviewSets";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        public class AppPreviewSetResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PreviewType
                    {
                        IPHONE_67,
                        IPHONE_61,
                        IPHONE_65,
                        IPHONE_58,
                        IPHONE_55,
                        IPHONE_47,
                        IPHONE_40,
                        IPHONE_35,
                        IPAD_PRO_3GEN_129,
                        IPAD_PRO_3GEN_11,
                        IPAD_PRO_129,
                        IPAD_105,
                        IPAD_97,
                        DESKTOP,
                        APPLE_TV,
                    }
                    public PreviewType? previewType { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppPreviews
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviews";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                    public AppPreviews? appPreviews { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPreviewSets";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appPreviewSets
        public Task<AppPreviewSetResponse> PostAppPreviewSets(AppPreviewSetCreateRequest request)
        {
            string path = "/v1/appPreviewSets";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppPreviewSetResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPreviewSetsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPreviewSetsInclude
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPreviewSetsFieldsAppPreviews
        {
            appPreviewSet,
            assetDeliveryState,
            fileName,
            fileSize,
            mimeType,
            previewFrameTimeCode,
            previewImage,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
            videoUrl,
        }



        // /v1/appPreviewSets/{id}
        public Task<AppPreviewSetResponse> GetAppPreviewSets(string id, GetAppPreviewSetsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, GetAppPreviewSetsInclude[]? include = default, GetAppPreviewSetsFieldsAppPreviews[]? fieldsAppPreviews = default, int? limitAppPreviews = default)
        {
            string path = "/v1/appPreviewSets/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppPreviews != null)
                uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
            if (limitAppPreviews.HasValue)
                uriBuilder.AddParameter("limit[appPreviews]", limitAppPreviews.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPreviewSetResponse>(message);
        }

        // /v1/appPreviewSets/{id}
        public Task DeleteAppPreviewSets(string id)
        {
            string path = "/v1/appPreviewSets/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppPreviewCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                    public string? previewFrameTimeCode { get; set; }
                    public string? mimeType { get; set; }
                }

                public class Relationships
                {
                    public class AppPreviewSet
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppPreviewSet appPreviewSet { get; set; } = new AppPreviewSet();
                }

                public string type { get; set; } = "appPreviews";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppPreviewResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class PreviewImage
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public string? previewFrameTimeCode { get; set; }
                    public string? mimeType { get; set; }
                    public string? videoUrl { get; set; }
                    public PreviewImage? previewImage { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class AppPreviewSet
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppPreviewSet? appPreviewSet { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPreviews";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PreviewType
                    {
                        IPHONE_67,
                        IPHONE_61,
                        IPHONE_65,
                        IPHONE_58,
                        IPHONE_55,
                        IPHONE_47,
                        IPHONE_40,
                        IPHONE_35,
                        IPAD_PRO_3GEN_129,
                        IPAD_PRO_3GEN_11,
                        IPAD_PRO_129,
                        IPAD_105,
                        IPAD_97,
                        DESKTOP,
                        APPLE_TV,
                    }
                    public PreviewType? previewType { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppPreviews
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviews";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                    public AppPreviews? appPreviews { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPreviewSets";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appPreviews
        public Task<AppPreviewResponse> PostAppPreviews(AppPreviewCreateRequest request)
        {
            string path = "/v1/appPreviews";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppPreviewResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPreviewsFieldsAppPreviews
        {
            appPreviewSet,
            assetDeliveryState,
            fileName,
            fileSize,
            mimeType,
            previewFrameTimeCode,
            previewImage,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
            videoUrl,
        }



        // /v1/appPreviews/{id}
        public Task<AppPreviewResponse> GetAppPreviews(string id, GetAppPreviewsFieldsAppPreviews[]? fieldsAppPreviews = default, string[]? include = default)
        {
            string path = "/v1/appPreviews/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPreviews != null)
                uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPreviewResponse>(message);
        }

        public class AppPreviewUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public string? previewFrameTimeCode { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "appPreviews";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appPreviews/{id}
        public Task<AppPreviewResponse> PatchAppPreviews(string id, AppPreviewUpdateRequest request)
        {
            string path = "/v1/appPreviews/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppPreviewResponse>(message);
        }

        // /v1/appPreviews/{id}
        public Task DeleteAppPreviews(string id)
        {
            string path = "/v1/appPreviews/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppPricePointsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? customerPrice { get; set; }
                    public string? proceeds { get; set; }
                }

                public class Relationships
                {
                    public class PriceTier
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPriceTiers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public PriceTier? priceTier { get; set; }
                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPricePoints";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPricePointsFieldsAppPricePoints
        {
            customerPrice,
            priceTier,
            proceeds,
            territory,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPricePointsInclude
        {
            priceTier,
            territory,
        }



        // /v1/appPricePoints
        public Task<AppPricePointsResponse> GetAppPricePoints(string[]? filterPriceTier = default, string[]? filterTerritory = default, GetAppPricePointsFieldsAppPricePoints[]? fieldsAppPricePoints = default, int? limit = default, GetAppPricePointsInclude[]? include = default, string[]? fieldsTerritories = default)
        {
            string path = "/v1/appPricePoints";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPriceTier != null)
                uriBuilder.AddParameter("filter[priceTier]", string.Join(",", filterPriceTier));
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsAppPricePoints != null)
                uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPricePointsResponse>(message);
        }

        public class AppPricePointResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? customerPrice { get; set; }
                    public string? proceeds { get; set; }
                }

                public class Relationships
                {
                    public class PriceTier
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPriceTiers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public PriceTier? priceTier { get; set; }
                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPricePoints";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }




        // /v1/appPricePoints/{id}
        public Task<AppPricePointResponse> GetAppPricePoints(string id, GetAppPricePointsFieldsAppPricePoints[]? fieldsAppPricePoints = default, GetAppPricePointsInclude[]? include = default, string[]? fieldsTerritories = default)
        {
            string path = "/v1/appPricePoints/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPricePoints != null)
                uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPricePointResponse>(message);
        }

        public class AppPriceTiersResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PricePoints? pricePoints { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPriceTiers";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? customerPrice { get; set; }
                    public string? proceeds { get; set; }
                }

                public class Relationships
                {
                    public class PriceTier
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPriceTiers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public PriceTier? priceTier { get; set; }
                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPricePoints";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }





        // /v1/appPriceTiers
        public Task<AppPriceTiersResponse> GetAppPriceTiers(string[]? filterId = default, string[]? fieldsAppPriceTiers = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/appPriceTiers";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (fieldsAppPriceTiers != null)
                uriBuilder.AddParameter("fields[appPriceTiers]", string.Join(",", fieldsAppPriceTiers));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPriceTiersResponse>(message);
        }

        public class AppPriceTierResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PricePoints? pricePoints { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPriceTiers";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? customerPrice { get; set; }
                    public string? proceeds { get; set; }
                }

                public class Relationships
                {
                    public class PriceTier
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPriceTiers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public PriceTier? priceTier { get; set; }
                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPricePoints";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }



        // /v1/appPriceTiers/{id}
        public Task<AppPriceTierResponse> GetAppPriceTiers(string id, string[]? fieldsAppPriceTiers = default, string[]? include = default)
        {
            string path = "/v1/appPriceTiers/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPriceTiers != null)
                uriBuilder.AddParameter("fields[appPriceTiers]", string.Join(",", fieldsAppPriceTiers));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPriceTierResponse>(message);
        }

        public class AppPriceResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PriceTier
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPriceTiers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public PriceTier? priceTier { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPrices";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPricesFieldsAppPrices
        {
            app,
            priceTier,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPricesInclude
        {
            app,
            priceTier,
        }


        // /v1/appPrices/{id}
        public Task<AppPriceResponse> GetAppPrices(string id, GetAppPricesFieldsAppPrices[]? fieldsAppPrices = default, GetAppPricesInclude[]? include = default)
        {
            string path = "/v1/appPrices/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPrices != null)
                uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPriceResponse>(message);
        }

        public class AppScreenshotSetCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ScreenshotDisplayType
                    {
                        APP_IPHONE_67,
                        APP_IPHONE_61,
                        APP_IPHONE_65,
                        APP_IPHONE_58,
                        APP_IPHONE_55,
                        APP_IPHONE_47,
                        APP_IPHONE_40,
                        APP_IPHONE_35,
                        APP_IPAD_PRO_3GEN_129,
                        APP_IPAD_PRO_3GEN_11,
                        APP_IPAD_PRO_129,
                        APP_IPAD_105,
                        APP_IPAD_97,
                        APP_DESKTOP,
                        APP_WATCH_ULTRA,
                        APP_WATCH_SERIES_7,
                        APP_WATCH_SERIES_4,
                        APP_WATCH_SERIES_3,
                        APP_APPLE_TV,
                        IMESSAGE_APP_IPHONE_67,
                        IMESSAGE_APP_IPHONE_61,
                        IMESSAGE_APP_IPHONE_65,
                        IMESSAGE_APP_IPHONE_58,
                        IMESSAGE_APP_IPHONE_55,
                        IMESSAGE_APP_IPHONE_47,
                        IMESSAGE_APP_IPHONE_40,
                        IMESSAGE_APP_IPAD_PRO_3GEN_129,
                        IMESSAGE_APP_IPAD_PRO_3GEN_11,
                        IMESSAGE_APP_IPAD_PRO_129,
                        IMESSAGE_APP_IPAD_105,
                        IMESSAGE_APP_IPAD_97,
                    }
                    public ScreenshotDisplayType screenshotDisplayType { get; set; } = default;
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                }

                public string type { get; set; } = "appScreenshotSets";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        public class AppScreenshotSetResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ScreenshotDisplayType
                    {
                        APP_IPHONE_67,
                        APP_IPHONE_61,
                        APP_IPHONE_65,
                        APP_IPHONE_58,
                        APP_IPHONE_55,
                        APP_IPHONE_47,
                        APP_IPHONE_40,
                        APP_IPHONE_35,
                        APP_IPAD_PRO_3GEN_129,
                        APP_IPAD_PRO_3GEN_11,
                        APP_IPAD_PRO_129,
                        APP_IPAD_105,
                        APP_IPAD_97,
                        APP_DESKTOP,
                        APP_WATCH_ULTRA,
                        APP_WATCH_SERIES_7,
                        APP_WATCH_SERIES_4,
                        APP_WATCH_SERIES_3,
                        APP_APPLE_TV,
                        IMESSAGE_APP_IPHONE_67,
                        IMESSAGE_APP_IPHONE_61,
                        IMESSAGE_APP_IPHONE_65,
                        IMESSAGE_APP_IPHONE_58,
                        IMESSAGE_APP_IPHONE_55,
                        IMESSAGE_APP_IPHONE_47,
                        IMESSAGE_APP_IPHONE_40,
                        IMESSAGE_APP_IPAD_PRO_3GEN_129,
                        IMESSAGE_APP_IPAD_PRO_3GEN_11,
                        IMESSAGE_APP_IPAD_PRO_129,
                        IMESSAGE_APP_IPAD_105,
                        IMESSAGE_APP_IPAD_97,
                    }
                    public ScreenshotDisplayType? screenshotDisplayType { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                    public AppScreenshots? appScreenshots { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appScreenshotSets";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appScreenshotSets
        public Task<AppScreenshotSetResponse> PostAppScreenshotSets(AppScreenshotSetCreateRequest request)
        {
            string path = "/v1/appScreenshotSets";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppScreenshotSetResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppScreenshotSetsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppScreenshotSetsInclude
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppScreenshotSetsFieldsAppScreenshots
        {
            appScreenshotSet,
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        // /v1/appScreenshotSets/{id}
        public Task<AppScreenshotSetResponse> GetAppScreenshotSets(string id, GetAppScreenshotSetsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppScreenshotSetsInclude[]? include = default, GetAppScreenshotSetsFieldsAppScreenshots[]? fieldsAppScreenshots = default, int? limitAppScreenshots = default)
        {
            string path = "/v1/appScreenshotSets/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppScreenshots != null)
                uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
            if (limitAppScreenshots.HasValue)
                uriBuilder.AddParameter("limit[appScreenshots]", limitAppScreenshots.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppScreenshotSetResponse>(message);
        }

        // /v1/appScreenshotSets/{id}
        public Task DeleteAppScreenshotSets(string id)
        {
            string path = "/v1/appScreenshotSets/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppScreenshotCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                }

                public class Relationships
                {
                    public class AppScreenshotSet
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppScreenshotSet appScreenshotSet { get; set; } = new AppScreenshotSet();
                }

                public string type { get; set; } = "appScreenshots";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppScreenshotResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public string? assetToken { get; set; }
                    public string? assetType { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class AppScreenshotSet
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppScreenshotSet? appScreenshotSet { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ScreenshotDisplayType
                    {
                        APP_IPHONE_67,
                        APP_IPHONE_61,
                        APP_IPHONE_65,
                        APP_IPHONE_58,
                        APP_IPHONE_55,
                        APP_IPHONE_47,
                        APP_IPHONE_40,
                        APP_IPHONE_35,
                        APP_IPAD_PRO_3GEN_129,
                        APP_IPAD_PRO_3GEN_11,
                        APP_IPAD_PRO_129,
                        APP_IPAD_105,
                        APP_IPAD_97,
                        APP_DESKTOP,
                        APP_WATCH_ULTRA,
                        APP_WATCH_SERIES_7,
                        APP_WATCH_SERIES_4,
                        APP_WATCH_SERIES_3,
                        APP_APPLE_TV,
                        IMESSAGE_APP_IPHONE_67,
                        IMESSAGE_APP_IPHONE_61,
                        IMESSAGE_APP_IPHONE_65,
                        IMESSAGE_APP_IPHONE_58,
                        IMESSAGE_APP_IPHONE_55,
                        IMESSAGE_APP_IPHONE_47,
                        IMESSAGE_APP_IPHONE_40,
                        IMESSAGE_APP_IPAD_PRO_3GEN_129,
                        IMESSAGE_APP_IPAD_PRO_3GEN_11,
                        IMESSAGE_APP_IPAD_PRO_129,
                        IMESSAGE_APP_IPAD_105,
                        IMESSAGE_APP_IPAD_97,
                    }
                    public ScreenshotDisplayType? screenshotDisplayType { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                    public AppScreenshots? appScreenshots { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appScreenshotSets";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appScreenshots
        public Task<AppScreenshotResponse> PostAppScreenshots(AppScreenshotCreateRequest request)
        {
            string path = "/v1/appScreenshots";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppScreenshotResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppScreenshotsFieldsAppScreenshots
        {
            appScreenshotSet,
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        // /v1/appScreenshots/{id}
        public Task<AppScreenshotResponse> GetAppScreenshots(string id, GetAppScreenshotsFieldsAppScreenshots[]? fieldsAppScreenshots = default, string[]? include = default)
        {
            string path = "/v1/appScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppScreenshots != null)
                uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppScreenshotResponse>(message);
        }

        public class AppScreenshotUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "appScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appScreenshots/{id}
        public Task<AppScreenshotResponse> PatchAppScreenshots(string id, AppScreenshotUpdateRequest request)
        {
            string path = "/v1/appScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppScreenshotResponse>(message);
        }

        // /v1/appScreenshots/{id}
        public Task DeleteAppScreenshots(string id)
        {
            string path = "/v1/appScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppStoreReviewAttachmentCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                }

                public class Relationships
                {
                    public class AppStoreReviewDetail
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreReviewDetail appStoreReviewDetail { get; set; } = new AppStoreReviewDetail();
                }

                public string type { get; set; } = "appStoreReviewAttachments";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreReviewAttachmentResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppStoreReviewDetail? appStoreReviewDetail { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreReviewAttachments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? contactFirstName { get; set; }
                    public string? contactLastName { get; set; }
                    public string? contactPhone { get; set; }
                    public string? contactEmail { get; set; }
                    public string? demoAccountName { get; set; }
                    public string? demoAccountPassword { get; set; }
                    public bool? demoAccountRequired { get; set; }
                    public string? notes { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewAttachments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewAttachments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppStoreReviewAttachments? appStoreReviewAttachments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreReviewAttachments
        public Task<AppStoreReviewAttachmentResponse> PostAppStoreReviewAttachments(AppStoreReviewAttachmentCreateRequest request)
        {
            string path = "/v1/appStoreReviewAttachments";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreReviewAttachmentResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreReviewAttachmentsFieldsAppStoreReviewAttachments
        {
            appStoreReviewDetail,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        // /v1/appStoreReviewAttachments/{id}
        public Task<AppStoreReviewAttachmentResponse> GetAppStoreReviewAttachments(string id, GetAppStoreReviewAttachmentsFieldsAppStoreReviewAttachments[]? fieldsAppStoreReviewAttachments = default, string[]? include = default)
        {
            string path = "/v1/appStoreReviewAttachments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreReviewAttachments != null)
                uriBuilder.AddParameter("fields[appStoreReviewAttachments]", string.Join(",", fieldsAppStoreReviewAttachments));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreReviewAttachmentResponse>(message);
        }

        public class AppStoreReviewAttachmentUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "appStoreReviewAttachments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreReviewAttachments/{id}
        public Task<AppStoreReviewAttachmentResponse> PatchAppStoreReviewAttachments(string id, AppStoreReviewAttachmentUpdateRequest request)
        {
            string path = "/v1/appStoreReviewAttachments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreReviewAttachmentResponse>(message);
        }

        // /v1/appStoreReviewAttachments/{id}
        public Task DeleteAppStoreReviewAttachments(string id)
        {
            string path = "/v1/appStoreReviewAttachments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppStoreReviewDetailCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? contactFirstName { get; set; }
                    public string? contactLastName { get; set; }
                    public string? contactPhone { get; set; }
                    public string? contactEmail { get; set; }
                    public string? demoAccountName { get; set; }
                    public string? demoAccountPassword { get; set; }
                    public bool? demoAccountRequired { get; set; }
                    public string? notes { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersion appStoreVersion { get; set; } = new AppStoreVersion();
                }

                public string type { get; set; } = "appStoreReviewDetails";
                public Attributes? attributes { get; set; }
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreReviewDetailResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? contactFirstName { get; set; }
                    public string? contactLastName { get; set; }
                    public string? contactPhone { get; set; }
                    public string? contactEmail { get; set; }
                    public string? demoAccountName { get; set; }
                    public string? demoAccountPassword { get; set; }
                    public bool? demoAccountRequired { get; set; }
                    public string? notes { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewAttachments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewAttachments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppStoreReviewAttachments? appStoreReviewAttachments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreReviewDetails
        public Task<AppStoreReviewDetailResponse> PostAppStoreReviewDetails(AppStoreReviewDetailCreateRequest request)
        {
            string path = "/v1/appStoreReviewDetails";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreReviewDetailResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreReviewDetailsFieldsAppStoreReviewDetails
        {
            appStoreReviewAttachments,
            appStoreVersion,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreReviewDetailsInclude
        {
            appStoreReviewAttachments,
            appStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreReviewDetailsFieldsAppStoreReviewAttachments
        {
            appStoreReviewDetail,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        // /v1/appStoreReviewDetails/{id}
        public Task<AppStoreReviewDetailResponse> GetAppStoreReviewDetails(string id, GetAppStoreReviewDetailsFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, GetAppStoreReviewDetailsInclude[]? include = default, GetAppStoreReviewDetailsFieldsAppStoreReviewAttachments[]? fieldsAppStoreReviewAttachments = default, int? limitAppStoreReviewAttachments = default)
        {
            string path = "/v1/appStoreReviewDetails/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppStoreReviewAttachments != null)
                uriBuilder.AddParameter("fields[appStoreReviewAttachments]", string.Join(",", fieldsAppStoreReviewAttachments));
            if (limitAppStoreReviewAttachments.HasValue)
                uriBuilder.AddParameter("limit[appStoreReviewAttachments]", limitAppStoreReviewAttachments.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreReviewDetailResponse>(message);
        }

        public class AppStoreReviewDetailUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? contactFirstName { get; set; }
                    public string? contactLastName { get; set; }
                    public string? contactPhone { get; set; }
                    public string? contactEmail { get; set; }
                    public string? demoAccountName { get; set; }
                    public string? demoAccountPassword { get; set; }
                    public bool? demoAccountRequired { get; set; }
                    public string? notes { get; set; }
                }

                public string type { get; set; } = "appStoreReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreReviewDetails/{id}
        public Task<AppStoreReviewDetailResponse> PatchAppStoreReviewDetails(string id, AppStoreReviewDetailUpdateRequest request)
        {
            string path = "/v1/appStoreReviewDetails/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreReviewDetailResponse>(message);
        }

        public class AppStoreVersionExperimentTreatmentLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string locale { get; set; } = "";
                }

                public class Relationships
                {
                    public class AppStoreVersionExperimentTreatment
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatments";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersionExperimentTreatment appStoreVersionExperimentTreatment { get; set; } = new AppStoreVersionExperimentTreatment();
                }

                public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionExperimentTreatmentLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionExperimentTreatment
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshotSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppPreviewSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionExperimentTreatment? appStoreVersionExperimentTreatment { get; set; }
                    public AppScreenshotSets? appScreenshotSets { get; set; }
                    public AppPreviewSets? appPreviewSets { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersionExperimentTreatmentLocalizations
        public Task<AppStoreVersionExperimentTreatmentLocalizationResponse> PostAppStoreVersionExperimentTreatmentLocalizations(AppStoreVersionExperimentTreatmentLocalizationCreateRequest request)
        {
            string path = "/v1/appStoreVersionExperimentTreatmentLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionExperimentTreatmentLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsInclude
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }




        // /v1/appStoreVersionExperimentTreatmentLocalizations/{id}
        public Task<AppStoreVersionExperimentTreatmentLocalizationResponse> GetAppStoreVersionExperimentTreatmentLocalizations(string id, GetAppStoreVersionExperimentTreatmentLocalizationsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, GetAppStoreVersionExperimentTreatmentLocalizationsInclude[]? include = default, GetAppStoreVersionExperimentTreatmentLocalizationsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppStoreVersionExperimentTreatmentLocalizationsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limitAppPreviewSets = default, int? limitAppScreenshotSets = default)
        {
            string path = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (limitAppPreviewSets.HasValue)
                uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());
            if (limitAppScreenshotSets.HasValue)
                uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionExperimentTreatmentLocalizationResponse>(message);
        }

        // /v1/appStoreVersionExperimentTreatmentLocalizations/{id}
        public Task DeleteAppStoreVersionExperimentTreatmentLocalizations(string id)
        {
            string path = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppStoreVersionExperimentTreatmentCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public string? appIconName { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionExperiment
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersionExperiment appStoreVersionExperiment { get; set; } = new AppStoreVersionExperiment();
                }

                public string type { get; set; } = "appStoreVersionExperimentTreatments";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionExperimentTreatmentResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class AppIcon
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? name { get; set; }
                    public AppIcon? appIcon { get; set; }
                    public string? appIconName { get; set; }
                    public string? promotedDate { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionExperiment
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionExperiment? appStoreVersionExperiment { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalizations? appStoreVersionExperimentTreatmentLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionExperimentTreatments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersionExperimentTreatments
        public Task<AppStoreVersionExperimentTreatmentResponse> PostAppStoreVersionExperimentTreatments(AppStoreVersionExperimentTreatmentCreateRequest request)
        {
            string path = "/v1/appStoreVersionExperimentTreatments";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionExperimentTreatmentResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperimentTreatments
        {
            appIcon,
            appIconName,
            appStoreVersionExperiment,
            appStoreVersionExperimentTreatmentLocalizations,
            name,
            promotedDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentsInclude
        {
            appStoreVersionExperiment,
            appStoreVersionExperimentTreatmentLocalizations,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }



        // /v1/appStoreVersionExperimentTreatments/{id}
        public Task<AppStoreVersionExperimentTreatmentResponse> GetAppStoreVersionExperimentTreatments(string id, GetAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, GetAppStoreVersionExperimentTreatmentsInclude[]? include = default, GetAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, int? limitAppStoreVersionExperimentTreatmentLocalizations = default)
        {
            string path = "/v1/appStoreVersionExperimentTreatments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionExperimentTreatments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (limitAppStoreVersionExperimentTreatmentLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionExperimentTreatmentResponse>(message);
        }

        public class AppStoreVersionExperimentTreatmentUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? appIconName { get; set; }
                }

                public string type { get; set; } = "appStoreVersionExperimentTreatments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreVersionExperimentTreatments/{id}
        public Task<AppStoreVersionExperimentTreatmentResponse> PatchAppStoreVersionExperimentTreatments(string id, AppStoreVersionExperimentTreatmentUpdateRequest request)
        {
            string path = "/v1/appStoreVersionExperimentTreatments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionExperimentTreatmentResponse>(message);
        }

        // /v1/appStoreVersionExperimentTreatments/{id}
        public Task DeleteAppStoreVersionExperimentTreatments(string id)
        {
            string path = "/v1/appStoreVersionExperimentTreatments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppStoreVersionExperimentCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public int trafficProportion { get; set; } = 0;
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersion appStoreVersion { get; set; } = new AppStoreVersion();
                }

                public string type { get; set; } = "appStoreVersionExperiments";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionExperimentResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public int? trafficProportion { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        READY_FOR_REVIEW,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        ACCEPTED,
                        APPROVED,
                        REJECTED,
                        COMPLETED,
                        STOPPED,
                    }
                    public State? state { get; set; }
                    public bool? reviewRequired { get; set; }
                    public string? startDate { get; set; }
                    public string? endDate { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppStoreVersionExperimentTreatments? appStoreVersionExperimentTreatments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionExperiments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersionExperiments
        public Task<AppStoreVersionExperimentResponse> PostAppStoreVersionExperiments(AppStoreVersionExperimentCreateRequest request)
        {
            string path = "/v1/appStoreVersionExperiments";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionExperimentResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentsFieldsAppStoreVersionExperiments
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
            endDate,
            name,
            reviewRequired,
            startDate,
            started,
            state,
            trafficProportion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentsInclude
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentsFieldsAppStoreVersionExperimentTreatments
        {
            appIcon,
            appIconName,
            appStoreVersionExperiment,
            appStoreVersionExperimentTreatmentLocalizations,
            name,
            promotedDate,
        }



        // /v1/appStoreVersionExperiments/{id}
        public Task<AppStoreVersionExperimentResponse> GetAppStoreVersionExperiments(string id, GetAppStoreVersionExperimentsFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, GetAppStoreVersionExperimentsInclude[]? include = default, GetAppStoreVersionExperimentsFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, int? limitAppStoreVersionExperimentTreatments = default)
        {
            string path = "/v1/appStoreVersionExperiments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionExperiments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppStoreVersionExperimentTreatments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
            if (limitAppStoreVersionExperimentTreatments.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionExperimentResponse>(message);
        }

        public class AppStoreVersionExperimentUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public int? trafficProportion { get; set; }
                    public bool? started { get; set; }
                }

                public string type { get; set; } = "appStoreVersionExperiments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreVersionExperiments/{id}
        public Task<AppStoreVersionExperimentResponse> PatchAppStoreVersionExperiments(string id, AppStoreVersionExperimentUpdateRequest request)
        {
            string path = "/v1/appStoreVersionExperiments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionExperimentResponse>(message);
        }

        // /v1/appStoreVersionExperiments/{id}
        public Task DeleteAppStoreVersionExperiments(string id)
        {
            string path = "/v1/appStoreVersionExperiments/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppStoreVersionLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? description { get; set; }
                    public string locale { get; set; } = "";
                    public string? keywords { get; set; }
                    public string? marketingUrl { get; set; }
                    public string? promotionalText { get; set; }
                    public string? supportUrl { get; set; }
                    public string? whatsNew { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersion appStoreVersion { get; set; } = new AppStoreVersion();
                }

                public string type { get; set; } = "appStoreVersionLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? description { get; set; }
                    public string? locale { get; set; }
                    public string? keywords { get; set; }
                    public string? marketingUrl { get; set; }
                    public string? promotionalText { get; set; }
                    public string? supportUrl { get; set; }
                    public string? whatsNew { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshotSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppPreviewSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppScreenshotSets? appScreenshotSets { get; set; }
                    public AppPreviewSets? appPreviewSets { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersionLocalizations
        public Task<AppStoreVersionLocalizationResponse> PostAppStoreVersionLocalizations(AppStoreVersionLocalizationCreateRequest request)
        {
            string path = "/v1/appStoreVersionLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsInclude
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }




        // /v1/appStoreVersionLocalizations/{id}
        public Task<AppStoreVersionLocalizationResponse> GetAppStoreVersionLocalizations(string id, GetAppStoreVersionLocalizationsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, GetAppStoreVersionLocalizationsInclude[]? include = default, GetAppStoreVersionLocalizationsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppStoreVersionLocalizationsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limitAppPreviewSets = default, int? limitAppScreenshotSets = default)
        {
            string path = "/v1/appStoreVersionLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (limitAppPreviewSets.HasValue)
                uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());
            if (limitAppScreenshotSets.HasValue)
                uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionLocalizationResponse>(message);
        }

        public class AppStoreVersionLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? description { get; set; }
                    public string? keywords { get; set; }
                    public string? marketingUrl { get; set; }
                    public string? promotionalText { get; set; }
                    public string? supportUrl { get; set; }
                    public string? whatsNew { get; set; }
                }

                public string type { get; set; } = "appStoreVersionLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreVersionLocalizations/{id}
        public Task<AppStoreVersionLocalizationResponse> PatchAppStoreVersionLocalizations(string id, AppStoreVersionLocalizationUpdateRequest request)
        {
            string path = "/v1/appStoreVersionLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionLocalizationResponse>(message);
        }

        // /v1/appStoreVersionLocalizations/{id}
        public Task DeleteAppStoreVersionLocalizations(string id)
        {
            string path = "/v1/appStoreVersionLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppStoreVersionPhasedReleaseCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PhasedReleaseState
                    {
                        INACTIVE,
                        ACTIVE,
                        PAUSED,
                        COMPLETE,
                    }
                    public PhasedReleaseState? phasedReleaseState { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersion appStoreVersion { get; set; } = new AppStoreVersion();
                }

                public string type { get; set; } = "appStoreVersionPhasedReleases";
                public Attributes? attributes { get; set; }
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionPhasedReleaseResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PhasedReleaseState
                    {
                        INACTIVE,
                        ACTIVE,
                        PAUSED,
                        COMPLETE,
                    }
                    public PhasedReleaseState? phasedReleaseState { get; set; }
                    public string? startDate { get; set; }
                    public int? totalPauseDuration { get; set; }
                    public int? currentDayNumber { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionPhasedReleases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersionPhasedReleases
        public Task<AppStoreVersionPhasedReleaseResponse> PostAppStoreVersionPhasedReleases(AppStoreVersionPhasedReleaseCreateRequest request)
        {
            string path = "/v1/appStoreVersionPhasedReleases";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionPhasedReleaseResponse>(message);
        }

        public class AppStoreVersionPhasedReleaseUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PhasedReleaseState
                    {
                        INACTIVE,
                        ACTIVE,
                        PAUSED,
                        COMPLETE,
                    }
                    public PhasedReleaseState? phasedReleaseState { get; set; }
                }

                public string type { get; set; } = "appStoreVersionPhasedReleases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreVersionPhasedReleases/{id}
        public Task<AppStoreVersionPhasedReleaseResponse> PatchAppStoreVersionPhasedReleases(string id, AppStoreVersionPhasedReleaseUpdateRequest request)
        {
            string path = "/v1/appStoreVersionPhasedReleases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionPhasedReleaseResponse>(message);
        }

        // /v1/appStoreVersionPhasedReleases/{id}
        public Task DeleteAppStoreVersionPhasedReleases(string id)
        {
            string path = "/v1/appStoreVersionPhasedReleases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppStoreVersionPromotionCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class AppStoreVersionExperimentTreatment
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatments";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersion appStoreVersion { get; set; } = new AppStoreVersion();
                    public AppStoreVersionExperimentTreatment appStoreVersionExperimentTreatment { get; set; } = new AppStoreVersionExperimentTreatment();
                }

                public string type { get; set; } = "appStoreVersionPromotions";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionPromotionResponse
        {
            public class Data
            {
                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionPromotions";
                public string id { get; set; } = "";
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersionPromotions
        public Task<AppStoreVersionPromotionResponse> PostAppStoreVersionPromotions(AppStoreVersionPromotionCreateRequest request)
        {
            string path = "/v1/appStoreVersionPromotions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionPromotionResponse>(message);
        }

        public class AppStoreVersionReleaseRequestCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersion appStoreVersion { get; set; } = new AppStoreVersion();
                }

                public string type { get; set; } = "appStoreVersionReleaseRequests";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionReleaseRequestResponse
        {
            public class Data
            {
                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionReleaseRequests";
                public string id { get; set; } = "";
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersionReleaseRequests
        public Task<AppStoreVersionReleaseRequestResponse> PostAppStoreVersionReleaseRequests(AppStoreVersionReleaseRequestCreateRequest request)
        {
            string path = "/v1/appStoreVersionReleaseRequests";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionReleaseRequestResponse>(message);
        }

        public class AppStoreVersionSubmissionCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersion appStoreVersion { get; set; } = new AppStoreVersion();
                }

                public string type { get; set; } = "appStoreVersionSubmissions";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionSubmissionResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionSubmissions";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? versionString { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreState
                    {
                        ACCEPTED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        DEVELOPER_REJECTED,
                        IN_REVIEW,
                        INVALID_BINARY,
                        METADATA_REJECTED,
                        PENDING_APPLE_RELEASE,
                        PENDING_CONTRACT,
                        PENDING_DEVELOPER_RELEASE,
                        PREPARE_FOR_SUBMISSION,
                        PREORDER_READY_FOR_SALE,
                        PROCESSING_FOR_APP_STORE,
                        READY_FOR_REVIEW,
                        READY_FOR_SALE,
                        REJECTED,
                        REMOVED_FROM_SALE,
                        WAITING_FOR_EXPORT_COMPLIANCE,
                        WAITING_FOR_REVIEW,
                        REPLACED_WITH_NEW_VERSION,
                    }
                    public AppStoreState? appStoreState { get; set; }
                    public string? copyright { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ReleaseType
                    {
                        MANUAL,
                        AFTER_APPROVAL,
                        SCHEDULED,
                    }
                    public ReleaseType? releaseType { get; set; }
                    public string? earliestReleaseDate { get; set; }
                    public bool? downloadable { get; set; }
                    public string? createdDate { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AgeRatingDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ageRatingDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionPhasedRelease
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionPhasedReleases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class RoutingAppCoverage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "routingAppCoverages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperience
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperiments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AgeRatingDeclaration? ageRatingDeclaration { get; set; }
                    public AppStoreVersionLocalizations? appStoreVersionLocalizations { get; set; }
                    public Build? build { get; set; }
                    public AppStoreVersionPhasedRelease? appStoreVersionPhasedRelease { get; set; }
                    public RoutingAppCoverage? routingAppCoverage { get; set; }
                    public AppStoreReviewDetail? appStoreReviewDetail { get; set; }
                    public AppStoreVersionSubmission? appStoreVersionSubmission { get; set; }
                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                    public AppStoreVersionExperiments? appStoreVersionExperiments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersionSubmissions
        public Task<AppStoreVersionSubmissionResponse> PostAppStoreVersionSubmissions(AppStoreVersionSubmissionCreateRequest request)
        {
            string path = "/v1/appStoreVersionSubmissions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionSubmissionResponse>(message);
        }

        // /v1/appStoreVersionSubmissions/{id}
        public Task DeleteAppStoreVersionSubmissions(string id)
        {
            string path = "/v1/appStoreVersionSubmissions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppStoreVersionCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform platform { get; set; } = default;
                    public string versionString { get; set; } = "";
                    public string? copyright { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ReleaseType
                    {
                        MANUAL,
                        AFTER_APPROVAL,
                        SCHEDULED,
                    }
                    public ReleaseType? releaseType { get; set; }
                    public string? earliestReleaseDate { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class AppStoreVersionLocalizations
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class Build
                    {
                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public App app { get; set; } = new App();
                    public AppStoreVersionLocalizations? appStoreVersionLocalizations { get; set; }
                    public Build? build { get; set; }
                }

                public string type { get; set; } = "appStoreVersions";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class AppStoreVersionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? versionString { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreState
                    {
                        ACCEPTED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        DEVELOPER_REJECTED,
                        IN_REVIEW,
                        INVALID_BINARY,
                        METADATA_REJECTED,
                        PENDING_APPLE_RELEASE,
                        PENDING_CONTRACT,
                        PENDING_DEVELOPER_RELEASE,
                        PREPARE_FOR_SUBMISSION,
                        PREORDER_READY_FOR_SALE,
                        PROCESSING_FOR_APP_STORE,
                        READY_FOR_REVIEW,
                        READY_FOR_SALE,
                        REJECTED,
                        REMOVED_FROM_SALE,
                        WAITING_FOR_EXPORT_COMPLIANCE,
                        WAITING_FOR_REVIEW,
                        REPLACED_WITH_NEW_VERSION,
                    }
                    public AppStoreState? appStoreState { get; set; }
                    public string? copyright { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ReleaseType
                    {
                        MANUAL,
                        AFTER_APPROVAL,
                        SCHEDULED,
                    }
                    public ReleaseType? releaseType { get; set; }
                    public string? earliestReleaseDate { get; set; }
                    public bool? downloadable { get; set; }
                    public string? createdDate { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AgeRatingDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ageRatingDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionPhasedRelease
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionPhasedReleases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class RoutingAppCoverage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "routingAppCoverages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperience
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperiments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AgeRatingDeclaration? ageRatingDeclaration { get; set; }
                    public AppStoreVersionLocalizations? appStoreVersionLocalizations { get; set; }
                    public Build? build { get; set; }
                    public AppStoreVersionPhasedRelease? appStoreVersionPhasedRelease { get; set; }
                    public RoutingAppCoverage? routingAppCoverage { get; set; }
                    public AppStoreReviewDetail? appStoreReviewDetail { get; set; }
                    public AppStoreVersionSubmission? appStoreVersionSubmission { get; set; }
                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                    public AppStoreVersionExperiments? appStoreVersionExperiments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersions
        public Task<AppStoreVersionResponse> PostAppStoreVersions(AppStoreVersionCreateRequest request)
        {
            string path = "/v1/appStoreVersions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsInclude
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            routingAppCoverage,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsAppStoreVersionExperiments
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
            endDate,
            name,
            reviewRequired,
            startDate,
            started,
            state,
            trafficProportion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsCustomerReviews
        {
            body,
            createdDate,
            rating,
            response,
            reviewerNickname,
            territory,
            title,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsAppStoreReviewDetails
        {
            appStoreReviewAttachments,
            appStoreVersion,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsRoutingAppCoverages
        {
            appStoreVersion,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsAppStoreVersionPhasedReleases
        {
            appStoreVersion,
            currentDayNumber,
            phasedReleaseState,
            startDate,
            totalPauseDuration,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        // /v1/appStoreVersions/{id}
        public Task<AppStoreVersionResponse> GetAppStoreVersions(string id, GetAppStoreVersionsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppStoreVersionsInclude[]? include = default, GetAppStoreVersionsFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, GetAppStoreVersionsFieldsCustomerReviews[]? fieldsCustomerReviews = default, GetAppStoreVersionsFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, GetAppStoreVersionsFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GetAppStoreVersionsFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, GetAppStoreVersionsFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, GetAppStoreVersionsFieldsBuilds[]? fieldsBuilds = default, GetAppStoreVersionsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limitAppStoreVersionExperiments = default, int? limitAppStoreVersionLocalizations = default)
        {
            string path = "/v1/appStoreVersions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsAppStoreVersionExperiments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
            if (fieldsCustomerReviews != null)
                uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
            if (fieldsAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (fieldsRoutingAppCoverages != null)
                uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
            if (fieldsAppStoreVersionPhasedReleases != null)
                uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limitAppStoreVersionExperiments.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments.Value.ToString());
            if (limitAppStoreVersionLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionResponse>(message);
        }

        public class AppStoreVersionUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? versionString { get; set; }
                    public string? copyright { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ReleaseType
                    {
                        MANUAL,
                        AFTER_APPROVAL,
                        SCHEDULED,
                    }
                    public ReleaseType? releaseType { get; set; }
                    public string? earliestReleaseDate { get; set; }
                    public bool? downloadable { get; set; }
                }

                public class Relationships
                {
                    public class Build
                    {
                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperience
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public Build? build { get; set; }
                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                }

                public string type { get; set; } = "appStoreVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreVersions/{id}
        public Task<AppStoreVersionResponse> PatchAppStoreVersions(string id, AppStoreVersionUpdateRequest request)
        {
            string path = "/v1/appStoreVersions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppStoreVersionResponse>(message);
        }

        // /v1/appStoreVersions/{id}
        public Task DeleteAppStoreVersions(string id)
        {
            string path = "/v1/appStoreVersions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class AppsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFilterAppStoreVersionsAppStoreState
        {
            ACCEPTED,
            DEVELOPER_REMOVED_FROM_SALE,
            DEVELOPER_REJECTED,
            IN_REVIEW,
            INVALID_BINARY,
            METADATA_REJECTED,
            PENDING_APPLE_RELEASE,
            PENDING_CONTRACT,
            PENDING_DEVELOPER_RELEASE,
            PREPARE_FOR_SUBMISSION,
            PREORDER_READY_FOR_SALE,
            PROCESSING_FOR_APP_STORE,
            READY_FOR_REVIEW,
            READY_FOR_SALE,
            REJECTED,
            REMOVED_FROM_SALE,
            WAITING_FOR_EXPORT_COMPLIANCE,
            WAITING_FOR_REVIEW,
            REPLACED_WITH_NEW_VERSION,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFilterAppStoreVersionsPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }








        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsSort
        {
            bundleId,
            [EnumMember(Value = "-bundleId")]
            bundleIdDescending,
            name,
            [EnumMember(Value = "-name")]
            nameDescending,
            sku,
            [EnumMember(Value = "-sku")]
            skuDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInclude
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            builds,
            ciProduct,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            preOrder,
            preReleaseVersions,
            prices,
            promotedPurchases,
            reviewSubmissions,
            subscriptionGracePeriod,
            subscriptionGroups,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsBetaAppReviewDetails
        {
            app,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsCiProducts
        {
            additionalRepositories,
            app,
            buildRuns,
            bundleId,
            createdDate,
            name,
            primaryRepositories,
            productType,
            workflows,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsReviewSubmissions
        {
            app,
            appStoreVersionForReview,
            canceled,
            items,
            platform,
            state,
            submitted,
            submittedDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsBetaGroups
        {
            app,
            betaTesters,
            builds,
            createdDate,
            feedbackEnabled,
            hasAccessToAllBuilds,
            iosBuildsAvailableForAppleSiliconMac,
            isInternalGroup,
            name,
            publicLink,
            publicLinkEnabled,
            publicLinkId,
            publicLinkLimit,
            publicLinkLimitEnabled,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsCustomerReviews
        {
            body,
            createdDate,
            rating,
            response,
            reviewerNickname,
            territory,
            title,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsAppEvents
        {
            app,
            archivedTerritorySchedules,
            badge,
            deepLink,
            eventState,
            localizations,
            primaryLocale,
            priority,
            purchaseRequirement,
            purpose,
            referenceName,
            territorySchedules,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsBetaLicenseAgreements
        {
            agreementText,
            app,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsAppClips
        {
            app,
            appClipAdvancedExperiences,
            appClipDefaultExperiences,
            bundleId,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsAppInfos
        {
            ageRatingDeclaration,
            app,
            appInfoLocalizations,
            appStoreAgeRating,
            appStoreState,
            brazilAgeRating,
            kidsAgeBand,
            primaryCategory,
            primarySubcategoryOne,
            primarySubcategoryTwo,
            secondaryCategory,
            secondarySubcategoryOne,
            secondarySubcategoryTwo,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsBetaAppLocalizations
        {
            app,
            description,
            feedbackEmail,
            locale,
            marketingUrl,
            privacyPolicyUrl,
            tvOsPrivacyPolicy,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsAppPricePoints
        {
            app,
            customerPrice,
            priceTier,
            proceeds,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsPreReleaseVersions
        {
            app,
            builds,
            platform,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsSubscriptionGroups
        {
            app,
            referenceName,
            subscriptionGroupLocalizations,
            subscriptions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsAppPrices
        {
            app,
            priceTier,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsAppPreOrders
        {
            app,
            appReleaseDate,
            preOrderAvailableDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsGameCenterEnabledVersions
        {
            app,
            compatibleVersions,
            iconAsset,
            platform,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsSubscriptionGracePeriods
        {
            app,
            optIn,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsEndUserLicenseAgreements
        {
            agreementText,
            app,
            territories,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsAppCustomProductPages
        {
            app,
            appCustomProductPageVersions,
            appStoreVersionTemplate,
            customProductPageTemplate,
            name,
            url,
            visible,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsFieldsPerfPowerMetrics
        {
            deviceType,
            metricType,
            platform,
        }



















        // /v1/apps
        public Task<AppsResponse> GetApps(GetAppsFilterAppStoreVersionsAppStoreState[]? filterAppStoreVersionsAppStoreState = default, GetAppsFilterAppStoreVersionsPlatform[]? filterAppStoreVersionsPlatform = default, string[]? filterBundleId = default, string[]? filterName = default, string[]? filterSku = default, string[]? filterAppStoreVersions = default, string[]? filterId = default, bool? existsGameCenterEnabledVersions = default, GetAppsSort[]? sort = default, GetAppsFieldsApps[]? fieldsApps = default, int? limit = default, GetAppsInclude[]? include = default, GetAppsFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, GetAppsFieldsCiProducts[]? fieldsCiProducts = default, GetAppsFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, GetAppsFieldsBetaGroups[]? fieldsBetaGroups = default, GetAppsFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetAppsFieldsCustomerReviews[]? fieldsCustomerReviews = default, GetAppsFieldsAppEvents[]? fieldsAppEvents = default, GetAppsFieldsBuilds[]? fieldsBuilds = default, GetAppsFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, GetAppsFieldsAppClips[]? fieldsAppClips = default, GetAppsFieldsAppInfos[]? fieldsAppInfos = default, GetAppsFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, GetAppsFieldsAppPricePoints[]? fieldsAppPricePoints = default, GetAppsFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, GetAppsFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetAppsFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, GetAppsFieldsAppPrices[]? fieldsAppPrices = default, GetAppsFieldsAppPreOrders[]? fieldsAppPreOrders = default, GetAppsFieldsGameCenterEnabledVersions[]? fieldsGameCenterEnabledVersions = default, GetAppsFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default, GetAppsFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, GetAppsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppsFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, string[]? fieldsTerritories = default, GetAppsFieldsPerfPowerMetrics[]? fieldsPerfPowerMetrics = default, int? limitAppClips = default, int? limitAppCustomProductPages = default, int? limitAppEvents = default, int? limitAppInfos = default, int? limitAppStoreVersions = default, int? limitAvailableTerritories = default, int? limitBetaAppLocalizations = default, int? limitBetaGroups = default, int? limitBuilds = default, int? limitGameCenterEnabledVersions = default, int? limitInAppPurchases = default, int? limitInAppPurchasesV2 = default, int? limitPreReleaseVersions = default, int? limitPrices = default, int? limitPromotedPurchases = default, int? limitReviewSubmissions = default, int? limitSubscriptionGroups = default)
        {
            string path = "/v1/apps";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterAppStoreVersionsAppStoreState != null)
                uriBuilder.AddParameter("filter[appStoreVersions.appStoreState]", string.Join(",", filterAppStoreVersionsAppStoreState));
            if (filterAppStoreVersionsPlatform != null)
                uriBuilder.AddParameter("filter[appStoreVersions.platform]", string.Join(",", filterAppStoreVersionsPlatform));
            if (filterBundleId != null)
                uriBuilder.AddParameter("filter[bundleId]", string.Join(",", filterBundleId));
            if (filterName != null)
                uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
            if (filterSku != null)
                uriBuilder.AddParameter("filter[sku]", string.Join(",", filterSku));
            if (filterAppStoreVersions != null)
                uriBuilder.AddParameter("filter[appStoreVersions]", string.Join(",", filterAppStoreVersions));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (existsGameCenterEnabledVersions.HasValue)
                uriBuilder.AddParameter("exists[gameCenterEnabledVersions]", existsGameCenterEnabledVersions.Value.ToString());
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBetaAppReviewDetails != null)
                uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (fieldsReviewSubmissions != null)
                uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsCustomerReviews != null)
                uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
            if (fieldsAppEvents != null)
                uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsBetaLicenseAgreements != null)
                uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
            if (fieldsAppClips != null)
                uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
            if (fieldsAppInfos != null)
                uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
            if (fieldsBetaAppLocalizations != null)
                uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
            if (fieldsAppPricePoints != null)
                uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsSubscriptionGroups != null)
                uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
            if (fieldsAppPrices != null)
                uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
            if (fieldsAppPreOrders != null)
                uriBuilder.AddParameter("fields[appPreOrders]", string.Join(",", fieldsAppPreOrders));
            if (fieldsGameCenterEnabledVersions != null)
                uriBuilder.AddParameter("fields[gameCenterEnabledVersions]", string.Join(",", fieldsGameCenterEnabledVersions));
            if (fieldsSubscriptionGracePeriods != null)
                uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));
            if (fieldsEndUserLicenseAgreements != null)
                uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppCustomProductPages != null)
                uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (fieldsPerfPowerMetrics != null)
                uriBuilder.AddParameter("fields[perfPowerMetrics]", string.Join(",", fieldsPerfPowerMetrics));
            if (limitAppClips.HasValue)
                uriBuilder.AddParameter("limit[appClips]", limitAppClips.Value.ToString());
            if (limitAppCustomProductPages.HasValue)
                uriBuilder.AddParameter("limit[appCustomProductPages]", limitAppCustomProductPages.Value.ToString());
            if (limitAppEvents.HasValue)
                uriBuilder.AddParameter("limit[appEvents]", limitAppEvents.Value.ToString());
            if (limitAppInfos.HasValue)
                uriBuilder.AddParameter("limit[appInfos]", limitAppInfos.Value.ToString());
            if (limitAppStoreVersions.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersions]", limitAppStoreVersions.Value.ToString());
            if (limitAvailableTerritories.HasValue)
                uriBuilder.AddParameter("limit[availableTerritories]", limitAvailableTerritories.Value.ToString());
            if (limitBetaAppLocalizations.HasValue)
                uriBuilder.AddParameter("limit[betaAppLocalizations]", limitBetaAppLocalizations.Value.ToString());
            if (limitBetaGroups.HasValue)
                uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
            if (limitGameCenterEnabledVersions.HasValue)
                uriBuilder.AddParameter("limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions.Value.ToString());
            if (limitInAppPurchases.HasValue)
                uriBuilder.AddParameter("limit[inAppPurchases]", limitInAppPurchases.Value.ToString());
            if (limitInAppPurchasesV2.HasValue)
                uriBuilder.AddParameter("limit[inAppPurchasesV2]", limitInAppPurchasesV2.Value.ToString());
            if (limitPreReleaseVersions.HasValue)
                uriBuilder.AddParameter("limit[preReleaseVersions]", limitPreReleaseVersions.Value.ToString());
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
            if (limitPromotedPurchases.HasValue)
                uriBuilder.AddParameter("limit[promotedPurchases]", limitPromotedPurchases.Value.ToString());
            if (limitReviewSubmissions.HasValue)
                uriBuilder.AddParameter("limit[reviewSubmissions]", limitReviewSubmissions.Value.ToString());
            if (limitSubscriptionGroups.HasValue)
                uriBuilder.AddParameter("limit[subscriptionGroups]", limitSubscriptionGroups.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppsResponse>(message);
        }

        public class AppResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }













































        // /v1/apps/{id}
        public Task<AppResponse> GetApps(string id, GetAppsFieldsApps[]? fieldsApps = default, GetAppsInclude[]? include = default, GetAppsFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, GetAppsFieldsCiProducts[]? fieldsCiProducts = default, GetAppsFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, GetAppsFieldsBetaGroups[]? fieldsBetaGroups = default, GetAppsFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetAppsFieldsCustomerReviews[]? fieldsCustomerReviews = default, GetAppsFieldsAppEvents[]? fieldsAppEvents = default, GetAppsFieldsBuilds[]? fieldsBuilds = default, GetAppsFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, GetAppsFieldsAppClips[]? fieldsAppClips = default, GetAppsFieldsAppInfos[]? fieldsAppInfos = default, GetAppsFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, GetAppsFieldsAppPricePoints[]? fieldsAppPricePoints = default, GetAppsFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, GetAppsFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetAppsFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, GetAppsFieldsAppPrices[]? fieldsAppPrices = default, GetAppsFieldsAppPreOrders[]? fieldsAppPreOrders = default, GetAppsFieldsGameCenterEnabledVersions[]? fieldsGameCenterEnabledVersions = default, GetAppsFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default, GetAppsFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, GetAppsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppsFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, string[]? fieldsTerritories = default, GetAppsFieldsPerfPowerMetrics[]? fieldsPerfPowerMetrics = default, int? limitAppClips = default, int? limitAppCustomProductPages = default, int? limitAppEvents = default, int? limitAppInfos = default, int? limitAppStoreVersions = default, int? limitAvailableTerritories = default, int? limitBetaAppLocalizations = default, int? limitBetaGroups = default, int? limitBuilds = default, int? limitGameCenterEnabledVersions = default, int? limitInAppPurchases = default, int? limitInAppPurchasesV2 = default, int? limitPreReleaseVersions = default, int? limitPrices = default, int? limitPromotedPurchases = default, int? limitReviewSubmissions = default, int? limitSubscriptionGroups = default)
        {
            string path = "/v1/apps/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBetaAppReviewDetails != null)
                uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (fieldsReviewSubmissions != null)
                uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsCustomerReviews != null)
                uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
            if (fieldsAppEvents != null)
                uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsBetaLicenseAgreements != null)
                uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
            if (fieldsAppClips != null)
                uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
            if (fieldsAppInfos != null)
                uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
            if (fieldsBetaAppLocalizations != null)
                uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
            if (fieldsAppPricePoints != null)
                uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsSubscriptionGroups != null)
                uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
            if (fieldsAppPrices != null)
                uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
            if (fieldsAppPreOrders != null)
                uriBuilder.AddParameter("fields[appPreOrders]", string.Join(",", fieldsAppPreOrders));
            if (fieldsGameCenterEnabledVersions != null)
                uriBuilder.AddParameter("fields[gameCenterEnabledVersions]", string.Join(",", fieldsGameCenterEnabledVersions));
            if (fieldsSubscriptionGracePeriods != null)
                uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));
            if (fieldsEndUserLicenseAgreements != null)
                uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppCustomProductPages != null)
                uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (fieldsPerfPowerMetrics != null)
                uriBuilder.AddParameter("fields[perfPowerMetrics]", string.Join(",", fieldsPerfPowerMetrics));
            if (limitAppClips.HasValue)
                uriBuilder.AddParameter("limit[appClips]", limitAppClips.Value.ToString());
            if (limitAppCustomProductPages.HasValue)
                uriBuilder.AddParameter("limit[appCustomProductPages]", limitAppCustomProductPages.Value.ToString());
            if (limitAppEvents.HasValue)
                uriBuilder.AddParameter("limit[appEvents]", limitAppEvents.Value.ToString());
            if (limitAppInfos.HasValue)
                uriBuilder.AddParameter("limit[appInfos]", limitAppInfos.Value.ToString());
            if (limitAppStoreVersions.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersions]", limitAppStoreVersions.Value.ToString());
            if (limitAvailableTerritories.HasValue)
                uriBuilder.AddParameter("limit[availableTerritories]", limitAvailableTerritories.Value.ToString());
            if (limitBetaAppLocalizations.HasValue)
                uriBuilder.AddParameter("limit[betaAppLocalizations]", limitBetaAppLocalizations.Value.ToString());
            if (limitBetaGroups.HasValue)
                uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
            if (limitGameCenterEnabledVersions.HasValue)
                uriBuilder.AddParameter("limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions.Value.ToString());
            if (limitInAppPurchases.HasValue)
                uriBuilder.AddParameter("limit[inAppPurchases]", limitInAppPurchases.Value.ToString());
            if (limitInAppPurchasesV2.HasValue)
                uriBuilder.AddParameter("limit[inAppPurchasesV2]", limitInAppPurchasesV2.Value.ToString());
            if (limitPreReleaseVersions.HasValue)
                uriBuilder.AddParameter("limit[preReleaseVersions]", limitPreReleaseVersions.Value.ToString());
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
            if (limitPromotedPurchases.HasValue)
                uriBuilder.AddParameter("limit[promotedPurchases]", limitPromotedPurchases.Value.ToString());
            if (limitReviewSubmissions.HasValue)
                uriBuilder.AddParameter("limit[reviewSubmissions]", limitReviewSubmissions.Value.ToString());
            if (limitSubscriptionGroups.HasValue)
                uriBuilder.AddParameter("limit[subscriptionGroups]", limitSubscriptionGroups.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        public class AppUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? bundleId { get; set; }
                    public string? primaryLocale { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class Prices
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public class Included
            {
                public string type { get; set; } = "appPrices";
                public string? id { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        // /v1/apps/{id}
        public Task<AppResponse> PatchApps(string id, AppUpdateRequest request)
        {
            string path = "/v1/apps/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<AppResponse>(message);
        }

        public class BetaAppClipInvocationLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string title { get; set; } = "";
                    public string locale { get; set; } = "";
                }

                public class Relationships
                {
                    public class BetaAppClipInvocation
                    {
                        public class Data
                        {
                            public string type { get; set; } = "betaAppClipInvocations";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public BetaAppClipInvocation betaAppClipInvocation { get; set; } = new BetaAppClipInvocation();
                }

                public string type { get; set; } = "betaAppClipInvocationLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class BetaAppClipInvocationLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? title { get; set; }
                    public string? locale { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppClipInvocationLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/betaAppClipInvocationLocalizations
        public Task<BetaAppClipInvocationLocalizationResponse> PostBetaAppClipInvocationLocalizations(BetaAppClipInvocationLocalizationCreateRequest request)
        {
            string path = "/v1/betaAppClipInvocationLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaAppClipInvocationLocalizationResponse>(message);
        }

        public class BetaAppClipInvocationLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? title { get; set; }
                }

                public string type { get; set; } = "betaAppClipInvocationLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/betaAppClipInvocationLocalizations/{id}
        public Task<BetaAppClipInvocationLocalizationResponse> PatchBetaAppClipInvocationLocalizations(string id, BetaAppClipInvocationLocalizationUpdateRequest request)
        {
            string path = "/v1/betaAppClipInvocationLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaAppClipInvocationLocalizationResponse>(message);
        }

        // /v1/betaAppClipInvocationLocalizations/{id}
        public Task DeleteBetaAppClipInvocationLocalizations(string id)
        {
            string path = "/v1/betaAppClipInvocationLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class BetaAppClipInvocationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string url { get; set; } = "";
                }

                public class Relationships
                {
                    public class BuildBundle
                    {
                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class BetaAppClipInvocationLocalizations
                    {
                        public class Data
                        {
                            public string type { get; set; } = "betaAppClipInvocationLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Data[] data { get; set; } = { };
                    }

                    public BuildBundle buildBundle { get; set; } = new BuildBundle();
                    public BetaAppClipInvocationLocalizations betaAppClipInvocationLocalizations { get; set; } = new BetaAppClipInvocationLocalizations();
                }

                public string type { get; set; } = "betaAppClipInvocations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public class Included
            {
                public class Attributes
                {
                    public string title { get; set; } = "";
                    public string locale { get; set; } = "";
                }

                public class Relationships
                {
                    public class BetaAppClipInvocation
                    {
                        public class Data
                        {
                            public string type { get; set; } = "betaAppClipInvocations";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public BetaAppClipInvocation? betaAppClipInvocation { get; set; }
                }

                public string type { get; set; } = "betaAppClipInvocationLocalizations";
                public string? id { get; set; }
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        public class BetaAppClipInvocationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? url { get; set; }
                }

                public class Relationships
                {
                    public class BetaAppClipInvocationLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppClipInvocationLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public BetaAppClipInvocationLocalizations? betaAppClipInvocationLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppClipInvocations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? title { get; set; }
                    public string? locale { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppClipInvocationLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/betaAppClipInvocations
        public Task<BetaAppClipInvocationResponse> PostBetaAppClipInvocations(BetaAppClipInvocationCreateRequest request)
        {
            string path = "/v1/betaAppClipInvocations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaAppClipInvocationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppClipInvocationsFieldsBetaAppClipInvocations
        {
            betaAppClipInvocationLocalizations,
            buildBundle,
            url,
        }




        // /v1/betaAppClipInvocations/{id}
        public Task<BetaAppClipInvocationResponse> GetBetaAppClipInvocations(string id, GetBetaAppClipInvocationsFieldsBetaAppClipInvocations[]? fieldsBetaAppClipInvocations = default, string[]? include = default, int? limitBetaAppClipInvocationLocalizations = default)
        {
            string path = "/v1/betaAppClipInvocations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaAppClipInvocations != null)
                uriBuilder.AddParameter("fields[betaAppClipInvocations]", string.Join(",", fieldsBetaAppClipInvocations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (limitBetaAppClipInvocationLocalizations.HasValue)
                uriBuilder.AddParameter("limit[betaAppClipInvocationLocalizations]", limitBetaAppClipInvocationLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppClipInvocationResponse>(message);
        }

        public class BetaAppClipInvocationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? url { get; set; }
                }

                public string type { get; set; } = "betaAppClipInvocations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/betaAppClipInvocations/{id}
        public Task<BetaAppClipInvocationResponse> PatchBetaAppClipInvocations(string id, BetaAppClipInvocationUpdateRequest request)
        {
            string path = "/v1/betaAppClipInvocations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaAppClipInvocationResponse>(message);
        }

        // /v1/betaAppClipInvocations/{id}
        public Task DeleteBetaAppClipInvocations(string id)
        {
            string path = "/v1/betaAppClipInvocations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class BetaAppLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? feedbackEmail { get; set; }
                    public string? marketingUrl { get; set; }
                    public string? privacyPolicyUrl { get; set; }
                    public string? tvOsPrivacyPolicy { get; set; }
                    public string? description { get; set; }
                    public string? locale { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppLocalizationsFieldsBetaAppLocalizations
        {
            app,
            description,
            feedbackEmail,
            locale,
            marketingUrl,
            privacyPolicyUrl,
            tvOsPrivacyPolicy,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppLocalizationsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/betaAppLocalizations
        public Task<BetaAppLocalizationsResponse> GetBetaAppLocalizations(string[]? filterLocale = default, string[]? filterApp = default, GetBetaAppLocalizationsFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, int? limit = default, string[]? include = default, GetBetaAppLocalizationsFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaAppLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterLocale != null)
                uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (fieldsBetaAppLocalizations != null)
                uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppLocalizationsResponse>(message);
        }

        public class BetaAppLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? feedbackEmail { get; set; }
                    public string? marketingUrl { get; set; }
                    public string? privacyPolicyUrl { get; set; }
                    public string? tvOsPrivacyPolicy { get; set; }
                    public string? description { get; set; }
                    public string locale { get; set; } = "";
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public App app { get; set; } = new App();
                }

                public string type { get; set; } = "betaAppLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class BetaAppLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? feedbackEmail { get; set; }
                    public string? marketingUrl { get; set; }
                    public string? privacyPolicyUrl { get; set; }
                    public string? tvOsPrivacyPolicy { get; set; }
                    public string? description { get; set; }
                    public string? locale { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/betaAppLocalizations
        public Task<BetaAppLocalizationResponse> PostBetaAppLocalizations(BetaAppLocalizationCreateRequest request)
        {
            string path = "/v1/betaAppLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaAppLocalizationResponse>(message);
        }




        // /v1/betaAppLocalizations/{id}
        public Task<BetaAppLocalizationResponse> GetBetaAppLocalizations(string id, GetBetaAppLocalizationsFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, string[]? include = default, GetBetaAppLocalizationsFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaAppLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaAppLocalizations != null)
                uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppLocalizationResponse>(message);
        }

        public class BetaAppLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? feedbackEmail { get; set; }
                    public string? marketingUrl { get; set; }
                    public string? privacyPolicyUrl { get; set; }
                    public string? tvOsPrivacyPolicy { get; set; }
                    public string? description { get; set; }
                }

                public string type { get; set; } = "betaAppLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/betaAppLocalizations/{id}
        public Task<BetaAppLocalizationResponse> PatchBetaAppLocalizations(string id, BetaAppLocalizationUpdateRequest request)
        {
            string path = "/v1/betaAppLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaAppLocalizationResponse>(message);
        }

        // /v1/betaAppLocalizations/{id}
        public Task DeleteBetaAppLocalizations(string id)
        {
            string path = "/v1/betaAppLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class BetaAppReviewDetailsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? contactFirstName { get; set; }
                    public string? contactLastName { get; set; }
                    public string? contactPhone { get; set; }
                    public string? contactEmail { get; set; }
                    public string? demoAccountName { get; set; }
                    public string? demoAccountPassword { get; set; }
                    public bool? demoAccountRequired { get; set; }
                    public string? notes { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppReviewDetailsFieldsBetaAppReviewDetails
        {
            app,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppReviewDetailsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/betaAppReviewDetails
        public Task<BetaAppReviewDetailsResponse> GetBetaAppReviewDetails(string[] filterApp, GetBetaAppReviewDetailsFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, int? limit = default, string[]? include = default, GetBetaAppReviewDetailsFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaAppReviewDetails";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (fieldsBetaAppReviewDetails != null)
                uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppReviewDetailsResponse>(message);
        }

        public class BetaAppReviewDetailResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? contactFirstName { get; set; }
                    public string? contactLastName { get; set; }
                    public string? contactPhone { get; set; }
                    public string? contactEmail { get; set; }
                    public string? demoAccountName { get; set; }
                    public string? demoAccountPassword { get; set; }
                    public bool? demoAccountRequired { get; set; }
                    public string? notes { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }




        // /v1/betaAppReviewDetails/{id}
        public Task<BetaAppReviewDetailResponse> GetBetaAppReviewDetails(string id, GetBetaAppReviewDetailsFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, string[]? include = default, GetBetaAppReviewDetailsFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaAppReviewDetails/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaAppReviewDetails != null)
                uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppReviewDetailResponse>(message);
        }

        public class BetaAppReviewDetailUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? contactFirstName { get; set; }
                    public string? contactLastName { get; set; }
                    public string? contactPhone { get; set; }
                    public string? contactEmail { get; set; }
                    public string? demoAccountName { get; set; }
                    public string? demoAccountPassword { get; set; }
                    public bool? demoAccountRequired { get; set; }
                    public string? notes { get; set; }
                }

                public string type { get; set; } = "betaAppReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/betaAppReviewDetails/{id}
        public Task<BetaAppReviewDetailResponse> PatchBetaAppReviewDetails(string id, BetaAppReviewDetailUpdateRequest request)
        {
            string path = "/v1/betaAppReviewDetails/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaAppReviewDetailResponse>(message);
        }

        public class BetaAppReviewSubmissionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BetaReviewState
                    {
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        REJECTED,
                        APPROVED,
                    }
                    public BetaReviewState? betaReviewState { get; set; }
                    public string? submittedDate { get; set; }
                }

                public class Relationships
                {
                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Build? build { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppReviewSubmissions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class IconAssetToken
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? version { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? expired { get; set; }
                    public string? minOsVersion { get; set; }
                    public string? lsMinimumSystemVersion { get; set; }
                    public string? computedMinMacOsVersion { get; set; }
                    public IconAssetToken? iconAssetToken { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProcessingState
                    {
                        PROCESSING,
                        FAILED,
                        INVALID,
                        VALID,
                    }
                    public ProcessingState? processingState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BuildAudienceType
                    {
                        INTERNAL_ONLY,
                        APP_STORE_ELIGIBLE,
                    }
                    public BuildAudienceType? buildAudienceType { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class PreReleaseVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IndividualTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaBuildLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaBuildLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEncryptionDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BuildBetaDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBetaDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Icons
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildIcons";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BuildBundles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PreReleaseVersion? preReleaseVersion { get; set; }
                    public IndividualTesters? individualTesters { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public BetaBuildLocalizations? betaBuildLocalizations { get; set; }
                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                    public BetaAppReviewSubmission? betaAppReviewSubmission { get; set; }
                    public App? app { get; set; }
                    public BuildBetaDetail? buildBetaDetail { get; set; }
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public Icons? icons { get; set; }
                    public BuildBundles? buildBundles { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppReviewSubmissionsFilterBetaReviewState
        {
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            REJECTED,
            APPROVED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppReviewSubmissionsFieldsBetaAppReviewSubmissions
        {
            betaReviewState,
            build,
            submittedDate,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppReviewSubmissionsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        // /v1/betaAppReviewSubmissions
        public Task<BetaAppReviewSubmissionsResponse> GetBetaAppReviewSubmissions(string[] filterBuild, GetBetaAppReviewSubmissionsFilterBetaReviewState[]? filterBetaReviewState = default, GetBetaAppReviewSubmissionsFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, int? limit = default, string[]? include = default, GetBetaAppReviewSubmissionsFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/betaAppReviewSubmissions";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterBuild != null)
                uriBuilder.AddParameter("filter[build]", string.Join(",", filterBuild));
            if (filterBetaReviewState != null)
                uriBuilder.AddParameter("filter[betaReviewState]", string.Join(",", filterBetaReviewState));
            if (fieldsBetaAppReviewSubmissions != null)
                uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppReviewSubmissionsResponse>(message);
        }

        public class BetaAppReviewSubmissionCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class Build
                    {
                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Build build { get; set; } = new Build();
                }

                public string type { get; set; } = "betaAppReviewSubmissions";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class BetaAppReviewSubmissionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BetaReviewState
                    {
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        REJECTED,
                        APPROVED,
                    }
                    public BetaReviewState? betaReviewState { get; set; }
                    public string? submittedDate { get; set; }
                }

                public class Relationships
                {
                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Build? build { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppReviewSubmissions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class IconAssetToken
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? version { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? expired { get; set; }
                    public string? minOsVersion { get; set; }
                    public string? lsMinimumSystemVersion { get; set; }
                    public string? computedMinMacOsVersion { get; set; }
                    public IconAssetToken? iconAssetToken { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProcessingState
                    {
                        PROCESSING,
                        FAILED,
                        INVALID,
                        VALID,
                    }
                    public ProcessingState? processingState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BuildAudienceType
                    {
                        INTERNAL_ONLY,
                        APP_STORE_ELIGIBLE,
                    }
                    public BuildAudienceType? buildAudienceType { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class PreReleaseVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IndividualTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaBuildLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaBuildLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEncryptionDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BuildBetaDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBetaDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Icons
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildIcons";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BuildBundles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PreReleaseVersion? preReleaseVersion { get; set; }
                    public IndividualTesters? individualTesters { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public BetaBuildLocalizations? betaBuildLocalizations { get; set; }
                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                    public BetaAppReviewSubmission? betaAppReviewSubmission { get; set; }
                    public App? app { get; set; }
                    public BuildBetaDetail? buildBetaDetail { get; set; }
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public Icons? icons { get; set; }
                    public BuildBundles? buildBundles { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/betaAppReviewSubmissions
        public Task<BetaAppReviewSubmissionResponse> PostBetaAppReviewSubmissions(BetaAppReviewSubmissionCreateRequest request)
        {
            string path = "/v1/betaAppReviewSubmissions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaAppReviewSubmissionResponse>(message);
        }




        // /v1/betaAppReviewSubmissions/{id}
        public Task<BetaAppReviewSubmissionResponse> GetBetaAppReviewSubmissions(string id, GetBetaAppReviewSubmissionsFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, string[]? include = default, GetBetaAppReviewSubmissionsFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/betaAppReviewSubmissions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaAppReviewSubmissions != null)
                uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppReviewSubmissionResponse>(message);
        }

        public class BetaBuildLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? whatsNew { get; set; }
                    public string? locale { get; set; }
                }

                public class Relationships
                {
                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Build? build { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaBuildLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class IconAssetToken
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? version { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? expired { get; set; }
                    public string? minOsVersion { get; set; }
                    public string? lsMinimumSystemVersion { get; set; }
                    public string? computedMinMacOsVersion { get; set; }
                    public IconAssetToken? iconAssetToken { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProcessingState
                    {
                        PROCESSING,
                        FAILED,
                        INVALID,
                        VALID,
                    }
                    public ProcessingState? processingState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BuildAudienceType
                    {
                        INTERNAL_ONLY,
                        APP_STORE_ELIGIBLE,
                    }
                    public BuildAudienceType? buildAudienceType { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class PreReleaseVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IndividualTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaBuildLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaBuildLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEncryptionDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BuildBetaDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBetaDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Icons
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildIcons";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BuildBundles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PreReleaseVersion? preReleaseVersion { get; set; }
                    public IndividualTesters? individualTesters { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public BetaBuildLocalizations? betaBuildLocalizations { get; set; }
                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                    public BetaAppReviewSubmission? betaAppReviewSubmission { get; set; }
                    public App? app { get; set; }
                    public BuildBetaDetail? buildBetaDetail { get; set; }
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public Icons? icons { get; set; }
                    public BuildBundles? buildBundles { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaBuildLocalizationsFieldsBetaBuildLocalizations
        {
            build,
            locale,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaBuildLocalizationsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        // /v1/betaBuildLocalizations
        public Task<BetaBuildLocalizationsResponse> GetBetaBuildLocalizations(string[]? filterLocale = default, string[]? filterBuild = default, GetBetaBuildLocalizationsFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, int? limit = default, string[]? include = default, GetBetaBuildLocalizationsFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/betaBuildLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterLocale != null)
                uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
            if (filterBuild != null)
                uriBuilder.AddParameter("filter[build]", string.Join(",", filterBuild));
            if (fieldsBetaBuildLocalizations != null)
                uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaBuildLocalizationsResponse>(message);
        }

        public class BetaBuildLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? whatsNew { get; set; }
                    public string locale { get; set; } = "";
                }

                public class Relationships
                {
                    public class Build
                    {
                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Build build { get; set; } = new Build();
                }

                public string type { get; set; } = "betaBuildLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class BetaBuildLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? whatsNew { get; set; }
                    public string? locale { get; set; }
                }

                public class Relationships
                {
                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Build? build { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaBuildLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class IconAssetToken
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? version { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? expired { get; set; }
                    public string? minOsVersion { get; set; }
                    public string? lsMinimumSystemVersion { get; set; }
                    public string? computedMinMacOsVersion { get; set; }
                    public IconAssetToken? iconAssetToken { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProcessingState
                    {
                        PROCESSING,
                        FAILED,
                        INVALID,
                        VALID,
                    }
                    public ProcessingState? processingState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BuildAudienceType
                    {
                        INTERNAL_ONLY,
                        APP_STORE_ELIGIBLE,
                    }
                    public BuildAudienceType? buildAudienceType { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class PreReleaseVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IndividualTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaBuildLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaBuildLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEncryptionDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BuildBetaDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBetaDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Icons
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildIcons";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BuildBundles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PreReleaseVersion? preReleaseVersion { get; set; }
                    public IndividualTesters? individualTesters { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public BetaBuildLocalizations? betaBuildLocalizations { get; set; }
                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                    public BetaAppReviewSubmission? betaAppReviewSubmission { get; set; }
                    public App? app { get; set; }
                    public BuildBetaDetail? buildBetaDetail { get; set; }
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public Icons? icons { get; set; }
                    public BuildBundles? buildBundles { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/betaBuildLocalizations
        public Task<BetaBuildLocalizationResponse> PostBetaBuildLocalizations(BetaBuildLocalizationCreateRequest request)
        {
            string path = "/v1/betaBuildLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaBuildLocalizationResponse>(message);
        }




        // /v1/betaBuildLocalizations/{id}
        public Task<BetaBuildLocalizationResponse> GetBetaBuildLocalizations(string id, GetBetaBuildLocalizationsFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, string[]? include = default, GetBetaBuildLocalizationsFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/betaBuildLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaBuildLocalizations != null)
                uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaBuildLocalizationResponse>(message);
        }

        public class BetaBuildLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? whatsNew { get; set; }
                }

                public string type { get; set; } = "betaBuildLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/betaBuildLocalizations/{id}
        public Task<BetaBuildLocalizationResponse> PatchBetaBuildLocalizations(string id, BetaBuildLocalizationUpdateRequest request)
        {
            string path = "/v1/betaBuildLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaBuildLocalizationResponse>(message);
        }

        // /v1/betaBuildLocalizations/{id}
        public Task DeleteBetaBuildLocalizations(string id)
        {
            string path = "/v1/betaBuildLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class BetaGroupsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? createdDate { get; set; }
                    public bool? isInternalGroup { get; set; }
                    public bool? hasAccessToAllBuilds { get; set; }
                    public bool? publicLinkEnabled { get; set; }
                    public string? publicLinkId { get; set; }
                    public bool? publicLinkLimitEnabled { get; set; }
                    public int? publicLinkLimit { get; set; }
                    public string? publicLink { get; set; }
                    public bool? feedbackEnabled { get; set; }
                    public bool? iosBuildsAvailableForAppleSiliconMac { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public Builds? builds { get; set; }
                    public BetaTesters? betaTesters { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaGroups";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }









        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsSort
        {
            createdDate,
            [EnumMember(Value = "-createdDate")]
            createdDateDescending,
            name,
            [EnumMember(Value = "-name")]
            nameDescending,
            publicLinkEnabled,
            [EnumMember(Value = "-publicLinkEnabled")]
            publicLinkEnabledDescending,
            publicLinkLimit,
            [EnumMember(Value = "-publicLinkLimit")]
            publicLinkLimitDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsFieldsBetaGroups
        {
            app,
            betaTesters,
            builds,
            createdDate,
            feedbackEnabled,
            hasAccessToAllBuilds,
            iosBuildsAvailableForAppleSiliconMac,
            isInternalGroup,
            name,
            publicLink,
            publicLinkEnabled,
            publicLinkId,
            publicLinkLimit,
            publicLinkLimitEnabled,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsInclude
        {
            app,
            betaTesters,
            builds,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsFieldsBetaTesters
        {
            apps,
            betaGroups,
            builds,
            email,
            firstName,
            inviteType,
            lastName,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }




        // /v1/betaGroups
        public Task<BetaGroupsResponse> GetBetaGroups(string[]? filterIsInternalGroup = default, string[]? filterName = default, string[]? filterPublicLink = default, string[]? filterPublicLinkEnabled = default, string[]? filterPublicLinkLimitEnabled = default, string[]? filterApp = default, string[]? filterBuilds = default, string[]? filterId = default, GetBetaGroupsSort[]? sort = default, GetBetaGroupsFieldsBetaGroups[]? fieldsBetaGroups = default, int? limit = default, GetBetaGroupsInclude[]? include = default, GetBetaGroupsFieldsBetaTesters[]? fieldsBetaTesters = default, GetBetaGroupsFieldsApps[]? fieldsApps = default, GetBetaGroupsFieldsBuilds[]? fieldsBuilds = default, int? limitBetaTesters = default, int? limitBuilds = default)
        {
            string path = "/v1/betaGroups";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterIsInternalGroup != null)
                uriBuilder.AddParameter("filter[isInternalGroup]", string.Join(",", filterIsInternalGroup));
            if (filterName != null)
                uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
            if (filterPublicLink != null)
                uriBuilder.AddParameter("filter[publicLink]", string.Join(",", filterPublicLink));
            if (filterPublicLinkEnabled != null)
                uriBuilder.AddParameter("filter[publicLinkEnabled]", string.Join(",", filterPublicLinkEnabled));
            if (filterPublicLinkLimitEnabled != null)
                uriBuilder.AddParameter("filter[publicLinkLimitEnabled]", string.Join(",", filterPublicLinkLimitEnabled));
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (filterBuilds != null)
                uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limitBetaTesters.HasValue)
                uriBuilder.AddParameter("limit[betaTesters]", limitBetaTesters.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaGroupsResponse>(message);
        }

        public class BetaGroupCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public bool? isInternalGroup { get; set; }
                    public bool? hasAccessToAllBuilds { get; set; }
                    public bool? publicLinkEnabled { get; set; }
                    public bool? publicLinkLimitEnabled { get; set; }
                    public int? publicLinkLimit { get; set; }
                    public bool? feedbackEnabled { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Builds
                    {
                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class BetaTesters
                    {
                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public App app { get; set; } = new App();
                    public Builds? builds { get; set; }
                    public BetaTesters? betaTesters { get; set; }
                }

                public string type { get; set; } = "betaGroups";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class BetaGroupResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? createdDate { get; set; }
                    public bool? isInternalGroup { get; set; }
                    public bool? hasAccessToAllBuilds { get; set; }
                    public bool? publicLinkEnabled { get; set; }
                    public string? publicLinkId { get; set; }
                    public bool? publicLinkLimitEnabled { get; set; }
                    public int? publicLinkLimit { get; set; }
                    public string? publicLink { get; set; }
                    public bool? feedbackEnabled { get; set; }
                    public bool? iosBuildsAvailableForAppleSiliconMac { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public Builds? builds { get; set; }
                    public BetaTesters? betaTesters { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaGroups";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/betaGroups
        public Task<BetaGroupResponse> PostBetaGroups(BetaGroupCreateRequest request)
        {
            string path = "/v1/betaGroups";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaGroupResponse>(message);
        }








        // /v1/betaGroups/{id}
        public Task<BetaGroupResponse> GetBetaGroups(string id, GetBetaGroupsFieldsBetaGroups[]? fieldsBetaGroups = default, GetBetaGroupsInclude[]? include = default, GetBetaGroupsFieldsBetaTesters[]? fieldsBetaTesters = default, GetBetaGroupsFieldsApps[]? fieldsApps = default, GetBetaGroupsFieldsBuilds[]? fieldsBuilds = default, int? limitBetaTesters = default, int? limitBuilds = default)
        {
            string path = "/v1/betaGroups/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limitBetaTesters.HasValue)
                uriBuilder.AddParameter("limit[betaTesters]", limitBetaTesters.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaGroupResponse>(message);
        }

        public class BetaGroupUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public bool? publicLinkEnabled { get; set; }
                    public bool? publicLinkLimitEnabled { get; set; }
                    public int? publicLinkLimit { get; set; }
                    public bool? feedbackEnabled { get; set; }
                    public bool? iosBuildsAvailableForAppleSiliconMac { get; set; }
                }

                public string type { get; set; } = "betaGroups";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/betaGroups/{id}
        public Task<BetaGroupResponse> PatchBetaGroups(string id, BetaGroupUpdateRequest request)
        {
            string path = "/v1/betaGroups/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaGroupResponse>(message);
        }

        // /v1/betaGroups/{id}
        public Task DeleteBetaGroups(string id)
        {
            string path = "/v1/betaGroups/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class BetaLicenseAgreementsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? agreementText { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaLicenseAgreements";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaLicenseAgreementsFieldsBetaLicenseAgreements
        {
            agreementText,
            app,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaLicenseAgreementsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/betaLicenseAgreements
        public Task<BetaLicenseAgreementsResponse> GetBetaLicenseAgreements(string[]? filterApp = default, GetBetaLicenseAgreementsFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, int? limit = default, string[]? include = default, GetBetaLicenseAgreementsFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaLicenseAgreements";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (fieldsBetaLicenseAgreements != null)
                uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaLicenseAgreementsResponse>(message);
        }

        public class BetaLicenseAgreementResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? agreementText { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaLicenseAgreements";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }




        // /v1/betaLicenseAgreements/{id}
        public Task<BetaLicenseAgreementResponse> GetBetaLicenseAgreements(string id, GetBetaLicenseAgreementsFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, string[]? include = default, GetBetaLicenseAgreementsFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaLicenseAgreements/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaLicenseAgreements != null)
                uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaLicenseAgreementResponse>(message);
        }

        public class BetaLicenseAgreementUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? agreementText { get; set; }
                }

                public string type { get; set; } = "betaLicenseAgreements";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/betaLicenseAgreements/{id}
        public Task<BetaLicenseAgreementResponse> PatchBetaLicenseAgreements(string id, BetaLicenseAgreementUpdateRequest request)
        {
            string path = "/v1/betaLicenseAgreements/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaLicenseAgreementResponse>(message);
        }

        public class BetaTesterInvitationCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class BetaTester
                    {
                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public BetaTester betaTester { get; set; } = new BetaTester();
                    public App app { get; set; } = new App();
                }

                public string type { get; set; } = "betaTesterInvitations";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class BetaTesterInvitationResponse
        {
            public class Data
            {
                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaTesterInvitations";
                public string id { get; set; } = "";
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/betaTesterInvitations
        public Task<BetaTesterInvitationResponse> PostBetaTesterInvitations(BetaTesterInvitationCreateRequest request)
        {
            string path = "/v1/betaTesterInvitations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaTesterInvitationResponse>(message);
        }

        public class BetaTestersResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? firstName { get; set; }
                    public string? lastName { get; set; }
                    public string? email { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InviteType
                    {
                        EMAIL,
                        PUBLIC_LINK,
                    }
                    public InviteType? inviteType { get; set; }
                }

                public class Relationships
                {
                    public class Apps
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Apps? apps { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public Builds? builds { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersFilterInviteType
        {
            EMAIL,
            PUBLIC_LINK,
        }







        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersSort
        {
            email,
            [EnumMember(Value = "-email")]
            emailDescending,
            firstName,
            [EnumMember(Value = "-firstName")]
            firstNameDescending,
            inviteType,
            [EnumMember(Value = "-inviteType")]
            inviteTypeDescending,
            lastName,
            [EnumMember(Value = "-lastName")]
            lastNameDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersFieldsBetaTesters
        {
            apps,
            betaGroups,
            builds,
            email,
            firstName,
            inviteType,
            lastName,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersInclude
        {
            apps,
            betaGroups,
            builds,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersFieldsBetaGroups
        {
            app,
            betaTesters,
            builds,
            createdDate,
            feedbackEnabled,
            hasAccessToAllBuilds,
            iosBuildsAvailableForAppleSiliconMac,
            isInternalGroup,
            name,
            publicLink,
            publicLinkEnabled,
            publicLinkId,
            publicLinkLimit,
            publicLinkLimitEnabled,
        }





        // /v1/betaTesters
        public Task<BetaTestersResponse> GetBetaTesters(string[]? filterEmail = default, string[]? filterFirstName = default, GetBetaTestersFilterInviteType[]? filterInviteType = default, string[]? filterLastName = default, string[]? filterApps = default, string[]? filterBetaGroups = default, string[]? filterBuilds = default, string[]? filterId = default, GetBetaTestersSort[]? sort = default, GetBetaTestersFieldsBetaTesters[]? fieldsBetaTesters = default, int? limit = default, GetBetaTestersInclude[]? include = default, GetBetaTestersFieldsApps[]? fieldsApps = default, GetBetaTestersFieldsBuilds[]? fieldsBuilds = default, GetBetaTestersFieldsBetaGroups[]? fieldsBetaGroups = default, int? limitApps = default, int? limitBetaGroups = default, int? limitBuilds = default)
        {
            string path = "/v1/betaTesters";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterEmail != null)
                uriBuilder.AddParameter("filter[email]", string.Join(",", filterEmail));
            if (filterFirstName != null)
                uriBuilder.AddParameter("filter[firstName]", string.Join(",", filterFirstName));
            if (filterInviteType != null)
                uriBuilder.AddParameter("filter[inviteType]", string.Join(",", filterInviteType));
            if (filterLastName != null)
                uriBuilder.AddParameter("filter[lastName]", string.Join(",", filterLastName));
            if (filterApps != null)
                uriBuilder.AddParameter("filter[apps]", string.Join(",", filterApps));
            if (filterBetaGroups != null)
                uriBuilder.AddParameter("filter[betaGroups]", string.Join(",", filterBetaGroups));
            if (filterBuilds != null)
                uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (limitApps.HasValue)
                uriBuilder.AddParameter("limit[apps]", limitApps.Value.ToString());
            if (limitBetaGroups.HasValue)
                uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaTestersResponse>(message);
        }

        public class BetaTesterCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? firstName { get; set; }
                    public string? lastName { get; set; }
                    public string email { get; set; } = "";
                }

                public class Relationships
                {
                    public class BetaGroups
                    {
                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public BetaGroups? betaGroups { get; set; }
                    public Builds? builds { get; set; }
                }

                public string type { get; set; } = "betaTesters";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        public class BetaTesterResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? firstName { get; set; }
                    public string? lastName { get; set; }
                    public string? email { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InviteType
                    {
                        EMAIL,
                        PUBLIC_LINK,
                    }
                    public InviteType? inviteType { get; set; }
                }

                public class Relationships
                {
                    public class Apps
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Apps? apps { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public Builds? builds { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/betaTesters
        public Task<BetaTesterResponse> PostBetaTesters(BetaTesterCreateRequest request)
        {
            string path = "/v1/betaTesters";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BetaTesterResponse>(message);
        }









        // /v1/betaTesters/{id}
        public Task<BetaTesterResponse> GetBetaTesters(string id, GetBetaTestersFieldsBetaTesters[]? fieldsBetaTesters = default, GetBetaTestersInclude[]? include = default, GetBetaTestersFieldsApps[]? fieldsApps = default, GetBetaTestersFieldsBuilds[]? fieldsBuilds = default, GetBetaTestersFieldsBetaGroups[]? fieldsBetaGroups = default, int? limitApps = default, int? limitBetaGroups = default, int? limitBuilds = default)
        {
            string path = "/v1/betaTesters/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (limitApps.HasValue)
                uriBuilder.AddParameter("limit[apps]", limitApps.Value.ToString());
            if (limitBetaGroups.HasValue)
                uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaTesterResponse>(message);
        }

        // /v1/betaTesters/{id}
        public Task DeleteBetaTesters(string id)
        {
            string path = "/v1/betaTesters/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class BuildBetaDetailsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? autoNotifyEnabled { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InternalBuildState
                    {
                        PROCESSING,
                        PROCESSING_EXCEPTION,
                        MISSING_EXPORT_COMPLIANCE,
                        READY_FOR_BETA_TESTING,
                        IN_BETA_TESTING,
                        EXPIRED,
                        IN_EXPORT_COMPLIANCE_REVIEW,
                    }
                    public InternalBuildState? internalBuildState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ExternalBuildState
                    {
                        PROCESSING,
                        PROCESSING_EXCEPTION,
                        MISSING_EXPORT_COMPLIANCE,
                        READY_FOR_BETA_TESTING,
                        IN_BETA_TESTING,
                        EXPIRED,
                        READY_FOR_BETA_SUBMISSION,
                        IN_EXPORT_COMPLIANCE_REVIEW,
                        WAITING_FOR_BETA_REVIEW,
                        IN_BETA_REVIEW,
                        BETA_REJECTED,
                        BETA_APPROVED,
                    }
                    public ExternalBuildState? externalBuildState { get; set; }
                }

                public class Relationships
                {
                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Build? build { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "buildBetaDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class IconAssetToken
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? version { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? expired { get; set; }
                    public string? minOsVersion { get; set; }
                    public string? lsMinimumSystemVersion { get; set; }
                    public string? computedMinMacOsVersion { get; set; }
                    public IconAssetToken? iconAssetToken { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProcessingState
                    {
                        PROCESSING,
                        FAILED,
                        INVALID,
                        VALID,
                    }
                    public ProcessingState? processingState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BuildAudienceType
                    {
                        INTERNAL_ONLY,
                        APP_STORE_ELIGIBLE,
                    }
                    public BuildAudienceType? buildAudienceType { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class PreReleaseVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IndividualTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaBuildLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaBuildLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEncryptionDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BuildBetaDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBetaDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Icons
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildIcons";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BuildBundles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PreReleaseVersion? preReleaseVersion { get; set; }
                    public IndividualTesters? individualTesters { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public BetaBuildLocalizations? betaBuildLocalizations { get; set; }
                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                    public BetaAppReviewSubmission? betaAppReviewSubmission { get; set; }
                    public App? app { get; set; }
                    public BuildBetaDetail? buildBetaDetail { get; set; }
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public Icons? icons { get; set; }
                    public BuildBundles? buildBundles { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildBetaDetailsFieldsBuildBetaDetails
        {
            autoNotifyEnabled,
            build,
            externalBuildState,
            internalBuildState,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildBetaDetailsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        // /v1/buildBetaDetails
        public Task<BuildBetaDetailsResponse> GetBuildBetaDetails(string[]? filterBuild = default, string[]? filterId = default, GetBuildBetaDetailsFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, int? limit = default, string[]? include = default, GetBuildBetaDetailsFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/buildBetaDetails";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterBuild != null)
                uriBuilder.AddParameter("filter[build]", string.Join(",", filterBuild));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (fieldsBuildBetaDetails != null)
                uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildBetaDetailsResponse>(message);
        }

        public class BuildBetaDetailResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? autoNotifyEnabled { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InternalBuildState
                    {
                        PROCESSING,
                        PROCESSING_EXCEPTION,
                        MISSING_EXPORT_COMPLIANCE,
                        READY_FOR_BETA_TESTING,
                        IN_BETA_TESTING,
                        EXPIRED,
                        IN_EXPORT_COMPLIANCE_REVIEW,
                    }
                    public InternalBuildState? internalBuildState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ExternalBuildState
                    {
                        PROCESSING,
                        PROCESSING_EXCEPTION,
                        MISSING_EXPORT_COMPLIANCE,
                        READY_FOR_BETA_TESTING,
                        IN_BETA_TESTING,
                        EXPIRED,
                        READY_FOR_BETA_SUBMISSION,
                        IN_EXPORT_COMPLIANCE_REVIEW,
                        WAITING_FOR_BETA_REVIEW,
                        IN_BETA_REVIEW,
                        BETA_REJECTED,
                        BETA_APPROVED,
                    }
                    public ExternalBuildState? externalBuildState { get; set; }
                }

                public class Relationships
                {
                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Build? build { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "buildBetaDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class IconAssetToken
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? version { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? expired { get; set; }
                    public string? minOsVersion { get; set; }
                    public string? lsMinimumSystemVersion { get; set; }
                    public string? computedMinMacOsVersion { get; set; }
                    public IconAssetToken? iconAssetToken { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProcessingState
                    {
                        PROCESSING,
                        FAILED,
                        INVALID,
                        VALID,
                    }
                    public ProcessingState? processingState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BuildAudienceType
                    {
                        INTERNAL_ONLY,
                        APP_STORE_ELIGIBLE,
                    }
                    public BuildAudienceType? buildAudienceType { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class PreReleaseVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IndividualTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaBuildLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaBuildLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEncryptionDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BuildBetaDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBetaDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Icons
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildIcons";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BuildBundles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PreReleaseVersion? preReleaseVersion { get; set; }
                    public IndividualTesters? individualTesters { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public BetaBuildLocalizations? betaBuildLocalizations { get; set; }
                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                    public BetaAppReviewSubmission? betaAppReviewSubmission { get; set; }
                    public App? app { get; set; }
                    public BuildBetaDetail? buildBetaDetail { get; set; }
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public Icons? icons { get; set; }
                    public BuildBundles? buildBundles { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }




        // /v1/buildBetaDetails/{id}
        public Task<BuildBetaDetailResponse> GetBuildBetaDetails(string id, GetBuildBetaDetailsFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, string[]? include = default, GetBuildBetaDetailsFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/buildBetaDetails/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuildBetaDetails != null)
                uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildBetaDetailResponse>(message);
        }

        public class BuildBetaDetailUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? autoNotifyEnabled { get; set; }
                }

                public string type { get; set; } = "buildBetaDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/buildBetaDetails/{id}
        public Task<BuildBetaDetailResponse> PatchBuildBetaDetails(string id, BuildBetaDetailUpdateRequest request)
        {
            string path = "/v1/buildBetaDetails/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BuildBetaDetailResponse>(message);
        }

        public class BuildBetaNotificationCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class Build
                    {
                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Build build { get; set; } = new Build();
                }

                public string type { get; set; } = "buildBetaNotifications";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class BuildBetaNotificationResponse
        {
            public class Data
            {
                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "buildBetaNotifications";
                public string id { get; set; } = "";
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/buildBetaNotifications
        public Task<BuildBetaNotificationResponse> PostBuildBetaNotifications(BuildBetaNotificationCreateRequest request)
        {
            string path = "/v1/buildBetaNotifications";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BuildBetaNotificationResponse>(message);
        }

        public class BuildsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class IconAssetToken
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? version { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? expired { get; set; }
                    public string? minOsVersion { get; set; }
                    public string? lsMinimumSystemVersion { get; set; }
                    public string? computedMinMacOsVersion { get; set; }
                    public IconAssetToken? iconAssetToken { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProcessingState
                    {
                        PROCESSING,
                        FAILED,
                        INVALID,
                        VALID,
                    }
                    public ProcessingState? processingState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BuildAudienceType
                    {
                        INTERNAL_ONLY,
                        APP_STORE_ELIGIBLE,
                    }
                    public BuildAudienceType? buildAudienceType { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class PreReleaseVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IndividualTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaBuildLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaBuildLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEncryptionDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BuildBetaDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBetaDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Icons
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildIcons";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BuildBundles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PreReleaseVersion? preReleaseVersion { get; set; }
                    public IndividualTesters? individualTesters { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public BetaBuildLocalizations? betaBuildLocalizations { get; set; }
                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                    public BetaAppReviewSubmission? betaAppReviewSubmission { get; set; }
                    public App? app { get; set; }
                    public BuildBetaDetail? buildBetaDetail { get; set; }
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public Icons? icons { get; set; }
                    public BuildBundles? buildBundles { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFilterBetaAppReviewSubmissionBetaReviewState
        {
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            REJECTED,
            APPROVED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFilterBuildAudienceType
        {
            INTERNAL_ONLY,
            APP_STORE_ELIGIBLE,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFilterPreReleaseVersionPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFilterProcessingState
        {
            PROCESSING,
            FAILED,
            INVALID,
            VALID,
        }









        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsSort
        {
            preReleaseVersion,
            [EnumMember(Value = "-preReleaseVersion")]
            preReleaseVersionDescending,
            uploadedDate,
            [EnumMember(Value = "-uploadedDate")]
            uploadedDateDescending,
            version,
            [EnumMember(Value = "-version")]
            versionDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsInclude
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildBetaDetail,
            buildBundles,
            icons,
            individualTesters,
            preReleaseVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsDiagnosticSignatures
        {
            diagnosticType,
            logs,
            signature,
            weight,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsBuildIcons
        {
            iconAsset,
            iconType,
            name,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsBuildBetaDetails
        {
            autoNotifyEnabled,
            build,
            externalBuildState,
            internalBuildState,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsBetaAppReviewSubmissions
        {
            betaReviewState,
            build,
            submittedDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsBetaTesters
        {
            apps,
            betaGroups,
            builds,
            email,
            firstName,
            inviteType,
            lastName,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsBetaBuildLocalizations
        {
            build,
            locale,
            whatsNew,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsPreReleaseVersions
        {
            app,
            builds,
            platform,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsAppEncryptionDeclarations
        {
            app,
            appEncryptionDeclarationState,
            availableOnFrenchStore,
            builds,
            codeValue,
            containsProprietaryCryptography,
            containsThirdPartyCryptography,
            documentName,
            documentType,
            documentUrl,
            exempt,
            platform,
            uploadedDate,
            usesEncryption,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsFieldsPerfPowerMetrics
        {
            deviceType,
            metricType,
            platform,
        }







        // /v1/builds
        public Task<BuildsResponse> GetBuilds(GetBuildsFilterBetaAppReviewSubmissionBetaReviewState[]? filterBetaAppReviewSubmissionBetaReviewState = default, GetBuildsFilterBuildAudienceType[]? filterBuildAudienceType = default, string[]? filterExpired = default, GetBuildsFilterPreReleaseVersionPlatform[]? filterPreReleaseVersionPlatform = default, string[]? filterPreReleaseVersionVersion = default, GetBuildsFilterProcessingState[]? filterProcessingState = default, string[]? filterUsesNonExemptEncryption = default, string[]? filterVersion = default, string[]? filterApp = default, string[]? filterAppStoreVersion = default, string[]? filterBetaGroups = default, string[]? filterPreReleaseVersion = default, string[]? filterId = default, GetBuildsSort[]? sort = default, GetBuildsFieldsBuilds[]? fieldsBuilds = default, int? limit = default, GetBuildsInclude[]? include = default, GetBuildsFieldsDiagnosticSignatures[]? fieldsDiagnosticSignatures = default, GetBuildsFieldsBuildIcons[]? fieldsBuildIcons = default, GetBuildsFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, GetBuildsFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, GetBuildsFieldsBetaTesters[]? fieldsBetaTesters = default, GetBuildsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetBuildsFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, GetBuildsFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, GetBuildsFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, GetBuildsFieldsApps[]? fieldsApps = default, GetBuildsFieldsPerfPowerMetrics[]? fieldsPerfPowerMetrics = default, int? limitBetaBuildLocalizations = default, int? limitBetaGroups = default, int? limitBuildBundles = default, int? limitIcons = default, int? limitIndividualTesters = default)
        {
            string path = "/v1/builds";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterBetaAppReviewSubmissionBetaReviewState != null)
                uriBuilder.AddParameter("filter[betaAppReviewSubmission.betaReviewState]", string.Join(",", filterBetaAppReviewSubmissionBetaReviewState));
            if (filterBuildAudienceType != null)
                uriBuilder.AddParameter("filter[buildAudienceType]", string.Join(",", filterBuildAudienceType));
            if (filterExpired != null)
                uriBuilder.AddParameter("filter[expired]", string.Join(",", filterExpired));
            if (filterPreReleaseVersionPlatform != null)
                uriBuilder.AddParameter("filter[preReleaseVersion.platform]", string.Join(",", filterPreReleaseVersionPlatform));
            if (filterPreReleaseVersionVersion != null)
                uriBuilder.AddParameter("filter[preReleaseVersion.version]", string.Join(",", filterPreReleaseVersionVersion));
            if (filterProcessingState != null)
                uriBuilder.AddParameter("filter[processingState]", string.Join(",", filterProcessingState));
            if (filterUsesNonExemptEncryption != null)
                uriBuilder.AddParameter("filter[usesNonExemptEncryption]", string.Join(",", filterUsesNonExemptEncryption));
            if (filterVersion != null)
                uriBuilder.AddParameter("filter[version]", string.Join(",", filterVersion));
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (filterAppStoreVersion != null)
                uriBuilder.AddParameter("filter[appStoreVersion]", string.Join(",", filterAppStoreVersion));
            if (filterBetaGroups != null)
                uriBuilder.AddParameter("filter[betaGroups]", string.Join(",", filterBetaGroups));
            if (filterPreReleaseVersion != null)
                uriBuilder.AddParameter("filter[preReleaseVersion]", string.Join(",", filterPreReleaseVersion));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsDiagnosticSignatures != null)
                uriBuilder.AddParameter("fields[diagnosticSignatures]", string.Join(",", fieldsDiagnosticSignatures));
            if (fieldsBuildIcons != null)
                uriBuilder.AddParameter("fields[buildIcons]", string.Join(",", fieldsBuildIcons));
            if (fieldsBuildBetaDetails != null)
                uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
            if (fieldsBetaAppReviewSubmissions != null)
                uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsBetaBuildLocalizations != null)
                uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (fieldsAppEncryptionDeclarations != null)
                uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsPerfPowerMetrics != null)
                uriBuilder.AddParameter("fields[perfPowerMetrics]", string.Join(",", fieldsPerfPowerMetrics));
            if (limitBetaBuildLocalizations.HasValue)
                uriBuilder.AddParameter("limit[betaBuildLocalizations]", limitBetaBuildLocalizations.Value.ToString());
            if (limitBetaGroups.HasValue)
                uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
            if (limitBuildBundles.HasValue)
                uriBuilder.AddParameter("limit[buildBundles]", limitBuildBundles.Value.ToString());
            if (limitIcons.HasValue)
                uriBuilder.AddParameter("limit[icons]", limitIcons.Value.ToString());
            if (limitIndividualTesters.HasValue)
                uriBuilder.AddParameter("limit[individualTesters]", limitIndividualTesters.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildsResponse>(message);
        }

        public class BuildResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class IconAssetToken
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? version { get; set; }
                    public string? uploadedDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? expired { get; set; }
                    public string? minOsVersion { get; set; }
                    public string? lsMinimumSystemVersion { get; set; }
                    public string? computedMinMacOsVersion { get; set; }
                    public IconAssetToken? iconAssetToken { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProcessingState
                    {
                        PROCESSING,
                        FAILED,
                        INVALID,
                        VALID,
                    }
                    public ProcessingState? processingState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BuildAudienceType
                    {
                        INTERNAL_ONLY,
                        APP_STORE_ELIGIBLE,
                    }
                    public BuildAudienceType? buildAudienceType { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class PreReleaseVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IndividualTesters
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaTesters";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaBuildLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaBuildLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEncryptionDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BuildBetaDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBetaDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Icons
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildIcons";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BuildBundles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "buildBundles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public PreReleaseVersion? preReleaseVersion { get; set; }
                    public IndividualTesters? individualTesters { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public BetaBuildLocalizations? betaBuildLocalizations { get; set; }
                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                    public BetaAppReviewSubmission? betaAppReviewSubmission { get; set; }
                    public App? app { get; set; }
                    public BuildBetaDetail? buildBetaDetail { get; set; }
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public Icons? icons { get; set; }
                    public BuildBundles? buildBundles { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }



















        // /v1/builds/{id}
        public Task<BuildResponse> GetBuilds(string id, GetBuildsFieldsBuilds[]? fieldsBuilds = default, GetBuildsInclude[]? include = default, GetBuildsFieldsDiagnosticSignatures[]? fieldsDiagnosticSignatures = default, GetBuildsFieldsBuildIcons[]? fieldsBuildIcons = default, GetBuildsFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, GetBuildsFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, GetBuildsFieldsBetaTesters[]? fieldsBetaTesters = default, GetBuildsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetBuildsFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, GetBuildsFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, GetBuildsFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, GetBuildsFieldsApps[]? fieldsApps = default, GetBuildsFieldsPerfPowerMetrics[]? fieldsPerfPowerMetrics = default, int? limitBetaBuildLocalizations = default, int? limitBetaGroups = default, int? limitBuildBundles = default, int? limitIcons = default, int? limitIndividualTesters = default)
        {
            string path = "/v1/builds/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsDiagnosticSignatures != null)
                uriBuilder.AddParameter("fields[diagnosticSignatures]", string.Join(",", fieldsDiagnosticSignatures));
            if (fieldsBuildIcons != null)
                uriBuilder.AddParameter("fields[buildIcons]", string.Join(",", fieldsBuildIcons));
            if (fieldsBuildBetaDetails != null)
                uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
            if (fieldsBetaAppReviewSubmissions != null)
                uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsBetaBuildLocalizations != null)
                uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (fieldsAppEncryptionDeclarations != null)
                uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsPerfPowerMetrics != null)
                uriBuilder.AddParameter("fields[perfPowerMetrics]", string.Join(",", fieldsPerfPowerMetrics));
            if (limitBetaBuildLocalizations.HasValue)
                uriBuilder.AddParameter("limit[betaBuildLocalizations]", limitBetaBuildLocalizations.Value.ToString());
            if (limitBetaGroups.HasValue)
                uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
            if (limitBuildBundles.HasValue)
                uriBuilder.AddParameter("limit[buildBundles]", limitBuildBundles.Value.ToString());
            if (limitIcons.HasValue)
                uriBuilder.AddParameter("limit[icons]", limitIcons.Value.ToString());
            if (limitIndividualTesters.HasValue)
                uriBuilder.AddParameter("limit[individualTesters]", limitIndividualTesters.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildResponse>(message);
        }

        public class BuildUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? expired { get; set; }
                    public bool? usesNonExemptEncryption { get; set; }
                }

                public class Relationships
                {
                    public class AppEncryptionDeclaration
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appEncryptionDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public AppEncryptionDeclaration? appEncryptionDeclaration { get; set; }
                }

                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/builds/{id}
        public Task<BuildResponse> PatchBuilds(string id, BuildUpdateRequest request)
        {
            string path = "/v1/builds/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BuildResponse>(message);
        }

        public class BundleIdCapabilityCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public class Settings
                    {
                        public class Options
                        {
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Key
                            {
                                XCODE_5,
                                XCODE_6,
                                COMPLETE_PROTECTION,
                                PROTECTED_UNLESS_OPEN,
                                PROTECTED_UNTIL_FIRST_USER_AUTH,
                                PRIMARY_APP_CONSENT,
                            }
                            public Key? key { get; set; }
                            public string? name { get; set; }
                            public string? description { get; set; }
                            public bool? enabledByDefault { get; set; }
                            public bool? enabled { get; set; }
                            public bool? supportsWildcard { get; set; }
                        }

                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Key
                        {
                            ICLOUD_VERSION,
                            DATA_PROTECTION_PERMISSION_LEVEL,
                            APPLE_ID_AUTH_APP_CONSENT,
                        }
                        public Key? key { get; set; }
                        public string? name { get; set; }
                        public string? description { get; set; }
                        public bool? enabledByDefault { get; set; }
                        public bool? visible { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum AllowedInstances
                        {
                            ENTRY,
                            SINGLE,
                            MULTIPLE,
                        }
                        public AllowedInstances? allowedInstances { get; set; }
                        public int? minInstances { get; set; }
                        public Options[]? options { get; set; }
                    }

                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CapabilityType
                    {
                        ICLOUD,
                        IN_APP_PURCHASE,
                        GAME_CENTER,
                        PUSH_NOTIFICATIONS,
                        WALLET,
                        INTER_APP_AUDIO,
                        MAPS,
                        ASSOCIATED_DOMAINS,
                        PERSONAL_VPN,
                        APP_GROUPS,
                        HEALTHKIT,
                        HOMEKIT,
                        WIRELESS_ACCESSORY_CONFIGURATION,
                        APPLE_PAY,
                        DATA_PROTECTION,
                        SIRIKIT,
                        NETWORK_EXTENSIONS,
                        MULTIPATH,
                        HOT_SPOT,
                        NFC_TAG_READING,
                        CLASSKIT,
                        AUTOFILL_CREDENTIAL_PROVIDER,
                        ACCESS_WIFI_INFORMATION,
                        NETWORK_CUSTOM_PROTOCOL,
                        COREMEDIA_HLS_LOW_LATENCY,
                        SYSTEM_EXTENSION_INSTALL,
                        USER_MANAGEMENT,
                        APPLE_ID_AUTH,
                    }
                    public CapabilityType capabilityType { get; set; } = default;
                    public Settings[]? settings { get; set; }
                }

                public class Relationships
                {
                    public class BundleId
                    {
                        public class Data
                        {
                            public string type { get; set; } = "bundleIds";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public BundleId bundleId { get; set; } = new BundleId();
                }

                public string type { get; set; } = "bundleIdCapabilities";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class BundleIdCapabilityResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class Settings
                    {
                        public class Options
                        {
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Key
                            {
                                XCODE_5,
                                XCODE_6,
                                COMPLETE_PROTECTION,
                                PROTECTED_UNLESS_OPEN,
                                PROTECTED_UNTIL_FIRST_USER_AUTH,
                                PRIMARY_APP_CONSENT,
                            }
                            public Key? key { get; set; }
                            public string? name { get; set; }
                            public string? description { get; set; }
                            public bool? enabledByDefault { get; set; }
                            public bool? enabled { get; set; }
                            public bool? supportsWildcard { get; set; }
                        }

                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Key
                        {
                            ICLOUD_VERSION,
                            DATA_PROTECTION_PERMISSION_LEVEL,
                            APPLE_ID_AUTH_APP_CONSENT,
                        }
                        public Key? key { get; set; }
                        public string? name { get; set; }
                        public string? description { get; set; }
                        public bool? enabledByDefault { get; set; }
                        public bool? visible { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum AllowedInstances
                        {
                            ENTRY,
                            SINGLE,
                            MULTIPLE,
                        }
                        public AllowedInstances? allowedInstances { get; set; }
                        public int? minInstances { get; set; }
                        public Options[]? options { get; set; }
                    }

                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CapabilityType
                    {
                        ICLOUD,
                        IN_APP_PURCHASE,
                        GAME_CENTER,
                        PUSH_NOTIFICATIONS,
                        WALLET,
                        INTER_APP_AUDIO,
                        MAPS,
                        ASSOCIATED_DOMAINS,
                        PERSONAL_VPN,
                        APP_GROUPS,
                        HEALTHKIT,
                        HOMEKIT,
                        WIRELESS_ACCESSORY_CONFIGURATION,
                        APPLE_PAY,
                        DATA_PROTECTION,
                        SIRIKIT,
                        NETWORK_EXTENSIONS,
                        MULTIPATH,
                        HOT_SPOT,
                        NFC_TAG_READING,
                        CLASSKIT,
                        AUTOFILL_CREDENTIAL_PROVIDER,
                        ACCESS_WIFI_INFORMATION,
                        NETWORK_CUSTOM_PROTOCOL,
                        COREMEDIA_HLS_LOW_LATENCY,
                        SYSTEM_EXTENSION_INSTALL,
                        USER_MANAGEMENT,
                        APPLE_ID_AUTH,
                    }
                    public CapabilityType? capabilityType { get; set; }
                    public Settings[]? settings { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "bundleIdCapabilities";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/bundleIdCapabilities
        public Task<BundleIdCapabilityResponse> PostBundleIdCapabilities(BundleIdCapabilityCreateRequest request)
        {
            string path = "/v1/bundleIdCapabilities";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BundleIdCapabilityResponse>(message);
        }

        public class BundleIdCapabilityUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public class Settings
                    {
                        public class Options
                        {
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Key
                            {
                                XCODE_5,
                                XCODE_6,
                                COMPLETE_PROTECTION,
                                PROTECTED_UNLESS_OPEN,
                                PROTECTED_UNTIL_FIRST_USER_AUTH,
                                PRIMARY_APP_CONSENT,
                            }
                            public Key? key { get; set; }
                            public string? name { get; set; }
                            public string? description { get; set; }
                            public bool? enabledByDefault { get; set; }
                            public bool? enabled { get; set; }
                            public bool? supportsWildcard { get; set; }
                        }

                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Key
                        {
                            ICLOUD_VERSION,
                            DATA_PROTECTION_PERMISSION_LEVEL,
                            APPLE_ID_AUTH_APP_CONSENT,
                        }
                        public Key? key { get; set; }
                        public string? name { get; set; }
                        public string? description { get; set; }
                        public bool? enabledByDefault { get; set; }
                        public bool? visible { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum AllowedInstances
                        {
                            ENTRY,
                            SINGLE,
                            MULTIPLE,
                        }
                        public AllowedInstances? allowedInstances { get; set; }
                        public int? minInstances { get; set; }
                        public Options[]? options { get; set; }
                    }

                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CapabilityType
                    {
                        ICLOUD,
                        IN_APP_PURCHASE,
                        GAME_CENTER,
                        PUSH_NOTIFICATIONS,
                        WALLET,
                        INTER_APP_AUDIO,
                        MAPS,
                        ASSOCIATED_DOMAINS,
                        PERSONAL_VPN,
                        APP_GROUPS,
                        HEALTHKIT,
                        HOMEKIT,
                        WIRELESS_ACCESSORY_CONFIGURATION,
                        APPLE_PAY,
                        DATA_PROTECTION,
                        SIRIKIT,
                        NETWORK_EXTENSIONS,
                        MULTIPATH,
                        HOT_SPOT,
                        NFC_TAG_READING,
                        CLASSKIT,
                        AUTOFILL_CREDENTIAL_PROVIDER,
                        ACCESS_WIFI_INFORMATION,
                        NETWORK_CUSTOM_PROTOCOL,
                        COREMEDIA_HLS_LOW_LATENCY,
                        SYSTEM_EXTENSION_INSTALL,
                        USER_MANAGEMENT,
                        APPLE_ID_AUTH,
                    }
                    public CapabilityType? capabilityType { get; set; }
                    public Settings[]? settings { get; set; }
                }

                public string type { get; set; } = "bundleIdCapabilities";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/bundleIdCapabilities/{id}
        public Task<BundleIdCapabilityResponse> PatchBundleIdCapabilities(string id, BundleIdCapabilityUpdateRequest request)
        {
            string path = "/v1/bundleIdCapabilities/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BundleIdCapabilityResponse>(message);
        }

        // /v1/bundleIdCapabilities/{id}
        public Task DeleteBundleIdCapabilities(string id)
        {
            string path = "/v1/bundleIdCapabilities/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class BundleIdsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? identifier { get; set; }
                    public string? seedId { get; set; }
                }

                public class Relationships
                {
                    public class Profiles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "profiles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BundleIdCapabilities
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "bundleIdCapabilities";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Profiles? profiles { get; set; }
                    public BundleIdCapabilities? bundleIdCapabilities { get; set; }
                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "bundleIds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsFilterPlatform
        {
            IOS,
            MAC_OS,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsSort
        {
            id,
            [EnumMember(Value = "-id")]
            idDescending,
            identifier,
            [EnumMember(Value = "-identifier")]
            identifierDescending,
            name,
            [EnumMember(Value = "-name")]
            nameDescending,
            platform,
            [EnumMember(Value = "-platform")]
            platformDescending,
            seedId,
            [EnumMember(Value = "-seedId")]
            seedIdDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsFieldsBundleIds
        {
            app,
            bundleIdCapabilities,
            identifier,
            name,
            platform,
            profiles,
            seedId,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsInclude
        {
            app,
            bundleIdCapabilities,
            profiles,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsFieldsBundleIdCapabilities
        {
            bundleId,
            capabilityType,
            settings,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsFieldsProfiles
        {
            bundleId,
            certificates,
            createdDate,
            devices,
            expirationDate,
            name,
            platform,
            profileContent,
            profileState,
            profileType,
            uuid,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }




        // /v1/bundleIds
        public Task<BundleIdsResponse> GetBundleIds(string[]? filterIdentifier = default, string[]? filterName = default, GetBundleIdsFilterPlatform[]? filterPlatform = default, string[]? filterSeedId = default, string[]? filterId = default, GetBundleIdsSort[]? sort = default, GetBundleIdsFieldsBundleIds[]? fieldsBundleIds = default, int? limit = default, GetBundleIdsInclude[]? include = default, GetBundleIdsFieldsBundleIdCapabilities[]? fieldsBundleIdCapabilities = default, GetBundleIdsFieldsProfiles[]? fieldsProfiles = default, GetBundleIdsFieldsApps[]? fieldsApps = default, int? limitBundleIdCapabilities = default, int? limitProfiles = default)
        {
            string path = "/v1/bundleIds";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterIdentifier != null)
                uriBuilder.AddParameter("filter[identifier]", string.Join(",", filterIdentifier));
            if (filterName != null)
                uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterSeedId != null)
                uriBuilder.AddParameter("filter[seedId]", string.Join(",", filterSeedId));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsBundleIds != null)
                uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBundleIdCapabilities != null)
                uriBuilder.AddParameter("fields[bundleIdCapabilities]", string.Join(",", fieldsBundleIdCapabilities));
            if (fieldsProfiles != null)
                uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limitBundleIdCapabilities.HasValue)
                uriBuilder.AddParameter("limit[bundleIdCapabilities]", limitBundleIdCapabilities.Value.ToString());
            if (limitProfiles.HasValue)
                uriBuilder.AddParameter("limit[profiles]", limitProfiles.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BundleIdsResponse>(message);
        }

        public class BundleIdCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform platform { get; set; } = default;
                    public string identifier { get; set; } = "";
                    public string? seedId { get; set; }
                }

                public string type { get; set; } = "bundleIds";
                public Attributes attributes { get; set; } = new Attributes();
            }

            public Data data { get; set; } = new Data();
        }

        public class BundleIdResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? identifier { get; set; }
                    public string? seedId { get; set; }
                }

                public class Relationships
                {
                    public class Profiles
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "profiles";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BundleIdCapabilities
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "bundleIdCapabilities";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Profiles? profiles { get; set; }
                    public BundleIdCapabilities? bundleIdCapabilities { get; set; }
                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "bundleIds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/bundleIds
        public Task<BundleIdResponse> PostBundleIds(BundleIdCreateRequest request)
        {
            string path = "/v1/bundleIds";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BundleIdResponse>(message);
        }








        // /v1/bundleIds/{id}
        public Task<BundleIdResponse> GetBundleIds(string id, GetBundleIdsFieldsBundleIds[]? fieldsBundleIds = default, GetBundleIdsInclude[]? include = default, GetBundleIdsFieldsBundleIdCapabilities[]? fieldsBundleIdCapabilities = default, GetBundleIdsFieldsProfiles[]? fieldsProfiles = default, GetBundleIdsFieldsApps[]? fieldsApps = default, int? limitBundleIdCapabilities = default, int? limitProfiles = default)
        {
            string path = "/v1/bundleIds/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBundleIds != null)
                uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsBundleIdCapabilities != null)
                uriBuilder.AddParameter("fields[bundleIdCapabilities]", string.Join(",", fieldsBundleIdCapabilities));
            if (fieldsProfiles != null)
                uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limitBundleIdCapabilities.HasValue)
                uriBuilder.AddParameter("limit[bundleIdCapabilities]", limitBundleIdCapabilities.Value.ToString());
            if (limitProfiles.HasValue)
                uriBuilder.AddParameter("limit[profiles]", limitProfiles.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BundleIdResponse>(message);
        }

        public class BundleIdUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                }

                public string type { get; set; } = "bundleIds";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/bundleIds/{id}
        public Task<BundleIdResponse> PatchBundleIds(string id, BundleIdUpdateRequest request)
        {
            string path = "/v1/bundleIds/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<BundleIdResponse>(message);
        }

        // /v1/bundleIds/{id}
        public Task DeleteBundleIds(string id)
        {
            string path = "/v1/bundleIds/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class CertificatesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CertificateType
                    {
                        IOS_DEVELOPMENT,
                        IOS_DISTRIBUTION,
                        MAC_APP_DISTRIBUTION,
                        MAC_INSTALLER_DISTRIBUTION,
                        MAC_APP_DEVELOPMENT,
                        DEVELOPER_ID_KEXT,
                        DEVELOPER_ID_APPLICATION,
                        DEVELOPMENT,
                        DISTRIBUTION,
                        PASS_TYPE_ID,
                        PASS_TYPE_ID_WITH_NFC,
                    }
                    public CertificateType? certificateType { get; set; }
                    public string? displayName { get; set; }
                    public string? serialNumber { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? expirationDate { get; set; }
                    public string? certificateContent { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "certificates";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCertificatesFilterCertificateType
        {
            IOS_DEVELOPMENT,
            IOS_DISTRIBUTION,
            MAC_APP_DISTRIBUTION,
            MAC_INSTALLER_DISTRIBUTION,
            MAC_APP_DEVELOPMENT,
            DEVELOPER_ID_KEXT,
            DEVELOPER_ID_APPLICATION,
            DEVELOPMENT,
            DISTRIBUTION,
            PASS_TYPE_ID,
            PASS_TYPE_ID_WITH_NFC,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCertificatesSort
        {
            certificateType,
            [EnumMember(Value = "-certificateType")]
            certificateTypeDescending,
            displayName,
            [EnumMember(Value = "-displayName")]
            displayNameDescending,
            id,
            [EnumMember(Value = "-id")]
            idDescending,
            serialNumber,
            [EnumMember(Value = "-serialNumber")]
            serialNumberDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCertificatesFieldsCertificates
        {
            certificateContent,
            certificateType,
            csrContent,
            displayName,
            expirationDate,
            name,
            platform,
            serialNumber,
        }



        // /v1/certificates
        public Task<CertificatesResponse> GetCertificates(GetCertificatesFilterCertificateType[]? filterCertificateType = default, string[]? filterDisplayName = default, string[]? filterSerialNumber = default, string[]? filterId = default, GetCertificatesSort[]? sort = default, GetCertificatesFieldsCertificates[]? fieldsCertificates = default, int? limit = default)
        {
            string path = "/v1/certificates";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterCertificateType != null)
                uriBuilder.AddParameter("filter[certificateType]", string.Join(",", filterCertificateType));
            if (filterDisplayName != null)
                uriBuilder.AddParameter("filter[displayName]", string.Join(",", filterDisplayName));
            if (filterSerialNumber != null)
                uriBuilder.AddParameter("filter[serialNumber]", string.Join(",", filterSerialNumber));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsCertificates != null)
                uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CertificatesResponse>(message);
        }

        public class CertificateCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string csrContent { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CertificateType
                    {
                        IOS_DEVELOPMENT,
                        IOS_DISTRIBUTION,
                        MAC_APP_DISTRIBUTION,
                        MAC_INSTALLER_DISTRIBUTION,
                        MAC_APP_DEVELOPMENT,
                        DEVELOPER_ID_KEXT,
                        DEVELOPER_ID_APPLICATION,
                        DEVELOPMENT,
                        DISTRIBUTION,
                        PASS_TYPE_ID,
                        PASS_TYPE_ID_WITH_NFC,
                    }
                    public CertificateType certificateType { get; set; } = default;
                }

                public string type { get; set; } = "certificates";
                public Attributes attributes { get; set; } = new Attributes();
            }

            public Data data { get; set; } = new Data();
        }

        public class CertificateResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CertificateType
                    {
                        IOS_DEVELOPMENT,
                        IOS_DISTRIBUTION,
                        MAC_APP_DISTRIBUTION,
                        MAC_INSTALLER_DISTRIBUTION,
                        MAC_APP_DEVELOPMENT,
                        DEVELOPER_ID_KEXT,
                        DEVELOPER_ID_APPLICATION,
                        DEVELOPMENT,
                        DISTRIBUTION,
                        PASS_TYPE_ID,
                        PASS_TYPE_ID_WITH_NFC,
                    }
                    public CertificateType? certificateType { get; set; }
                    public string? displayName { get; set; }
                    public string? serialNumber { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? expirationDate { get; set; }
                    public string? certificateContent { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "certificates";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/certificates
        public Task<CertificateResponse> PostCertificates(CertificateCreateRequest request)
        {
            string path = "/v1/certificates";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<CertificateResponse>(message);
        }


        // /v1/certificates/{id}
        public Task<CertificateResponse> GetCertificates(string id, GetCertificatesFieldsCertificates[]? fieldsCertificates = default)
        {
            string path = "/v1/certificates/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCertificates != null)
                uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CertificateResponse>(message);
        }

        // /v1/certificates/{id}
        public Task DeleteCertificates(string id)
        {
            string path = "/v1/certificates/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class CiArtifactResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum FileType
                    {
                        ARCHIVE,
                        ARCHIVE_EXPORT,
                        LOG_BUNDLE,
                        RESULT_BUNDLE,
                        TEST_PRODUCTS,
                        XCODEBUILD_PRODUCTS,
                    }
                    public FileType? fileType { get; set; }
                    public string? fileName { get; set; }
                    public int? fileSize { get; set; }
                    public string? downloadUrl { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciArtifacts";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiArtifactsFieldsCiArtifacts
        {
            downloadUrl,
            fileName,
            fileSize,
            fileType,
        }


        // /v1/ciArtifacts/{id}
        public Task<CiArtifactResponse> GetCiArtifacts(string id, GetCiArtifactsFieldsCiArtifacts[]? fieldsCiArtifacts = default)
        {
            string path = "/v1/ciArtifacts/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiArtifacts != null)
                uriBuilder.AddParameter("fields[ciArtifacts]", string.Join(",", fieldsCiArtifacts));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiArtifactResponse>(message);
        }

        public class CiBuildActionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class IssueCounts
                    {
                        public int? analyzerWarnings { get; set; }
                        public int? errors { get; set; }
                        public int? testFailures { get; set; }
                        public int? warnings { get; set; }
                    }

                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ActionType
                    {
                        BUILD,
                        ANALYZE,
                        TEST,
                        ARCHIVE,
                    }
                    public ActionType? actionType { get; set; }
                    public string? startedDate { get; set; }
                    public string? finishedDate { get; set; }
                    public IssueCounts? issueCounts { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ExecutionProgress
                    {
                        PENDING,
                        RUNNING,
                        COMPLETE,
                    }
                    public ExecutionProgress? executionProgress { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CompletionStatus
                    {
                        SUCCEEDED,
                        FAILED,
                        ERRORED,
                        CANCELED,
                        SKIPPED,
                    }
                    public CompletionStatus? completionStatus { get; set; }
                    public bool? isRequiredToPass { get; set; }
                }

                public class Relationships
                {
                    public class BuildRun
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciBuildRuns";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public BuildRun? buildRun { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciBuildActions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class SourceCommit
                    {
                        public class Author
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public class Committer
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public string? commitSha { get; set; }
                        public string? message { get; set; }
                        public Author? author { get; set; }
                        public Committer? committer { get; set; }
                        public string? webUrl { get; set; }
                    }

                    public class DestinationCommit
                    {
                        public class Author
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public class Committer
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public string? commitSha { get; set; }
                        public string? message { get; set; }
                        public Author? author { get; set; }
                        public Committer? committer { get; set; }
                        public string? webUrl { get; set; }
                    }

                    public class IssueCounts
                    {
                        public int? analyzerWarnings { get; set; }
                        public int? errors { get; set; }
                        public int? testFailures { get; set; }
                        public int? warnings { get; set; }
                    }

                    public int? number { get; set; }
                    public string? createdDate { get; set; }
                    public string? startedDate { get; set; }
                    public string? finishedDate { get; set; }
                    public SourceCommit? sourceCommit { get; set; }
                    public DestinationCommit? destinationCommit { get; set; }
                    public bool? isPullRequestBuild { get; set; }
                    public IssueCounts? issueCounts { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ExecutionProgress
                    {
                        PENDING,
                        RUNNING,
                        COMPLETE,
                    }
                    public ExecutionProgress? executionProgress { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CompletionStatus
                    {
                        SUCCEEDED,
                        FAILED,
                        ERRORED,
                        CANCELED,
                        SKIPPED,
                    }
                    public CompletionStatus? completionStatus { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum StartReason
                    {
                        GIT_REF_CHANGE,
                        MANUAL,
                        MANUAL_REBUILD,
                        PULL_REQUEST_OPEN,
                        PULL_REQUEST_UPDATE,
                        SCHEDULE,
                    }
                    public StartReason? startReason { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CancelReason
                    {
                        AUTOMATICALLY_BY_NEWER_BUILD,
                        MANUALLY_BY_USER,
                    }
                    public CancelReason? cancelReason { get; set; }
                }

                public class Relationships
                {
                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Workflow
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciWorkflows";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Product
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SourceBranchOrTag
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DestinationBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PullRequest
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmPullRequests";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Builds? builds { get; set; }
                    public Workflow? workflow { get; set; }
                    public Product? product { get; set; }
                    public SourceBranchOrTag? sourceBranchOrTag { get; set; }
                    public DestinationBranch? destinationBranch { get; set; }
                    public PullRequest? pullRequest { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciBuildRuns";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsFieldsCiBuildActions
        {
            actionType,
            artifacts,
            buildRun,
            completionStatus,
            executionProgress,
            finishedDate,
            isRequiredToPass,
            issueCounts,
            issues,
            name,
            startedDate,
            testResults,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsFieldsCiIssues
        {
            category,
            fileSource,
            issueType,
            message,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsFieldsCiBuildRuns
        {
            actions,
            buildRun,
            builds,
            cancelReason,
            clean,
            completionStatus,
            createdDate,
            destinationBranch,
            destinationCommit,
            executionProgress,
            finishedDate,
            isPullRequestBuild,
            issueCounts,
            number,
            product,
            pullRequest,
            sourceBranchOrTag,
            sourceCommit,
            startReason,
            startedDate,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsFieldsCiTestResults
        {
            className,
            destinationTestResults,
            fileSource,
            message,
            name,
            status,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsFieldsCiArtifacts
        {
            downloadUrl,
            fileName,
            fileSize,
            fileType,
        }


        // /v1/ciBuildActions/{id}
        public Task<CiBuildActionResponse> GetCiBuildActions(string id, GetCiBuildActionsFieldsCiBuildActions[]? fieldsCiBuildActions = default, string[]? include = default, GetCiBuildActionsFieldsCiIssues[]? fieldsCiIssues = default, GetCiBuildActionsFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiBuildActionsFieldsCiTestResults[]? fieldsCiTestResults = default, GetCiBuildActionsFieldsCiArtifacts[]? fieldsCiArtifacts = default)
        {
            string path = "/v1/ciBuildActions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiBuildActions != null)
                uriBuilder.AddParameter("fields[ciBuildActions]", string.Join(",", fieldsCiBuildActions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiIssues != null)
                uriBuilder.AddParameter("fields[ciIssues]", string.Join(",", fieldsCiIssues));
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (fieldsCiTestResults != null)
                uriBuilder.AddParameter("fields[ciTestResults]", string.Join(",", fieldsCiTestResults));
            if (fieldsCiArtifacts != null)
                uriBuilder.AddParameter("fields[ciArtifacts]", string.Join(",", fieldsCiArtifacts));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiBuildActionResponse>(message);
        }

        public class CiBuildRunCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? clean { get; set; }
                }

                public class Relationships
                {
                    public class BuildRun
                    {
                        public class Data
                        {
                            public string type { get; set; } = "ciBuildRuns";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class Workflow
                    {
                        public class Data
                        {
                            public string type { get; set; } = "ciWorkflows";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SourceBranchOrTag
                    {
                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class PullRequest
                    {
                        public class Data
                        {
                            public string type { get; set; } = "scmPullRequests";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public BuildRun? buildRun { get; set; }
                    public Workflow? workflow { get; set; }
                    public SourceBranchOrTag? sourceBranchOrTag { get; set; }
                    public PullRequest? pullRequest { get; set; }
                }

                public string type { get; set; } = "ciBuildRuns";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        public class CiBuildRunResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class SourceCommit
                    {
                        public class Author
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public class Committer
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public string? commitSha { get; set; }
                        public string? message { get; set; }
                        public Author? author { get; set; }
                        public Committer? committer { get; set; }
                        public string? webUrl { get; set; }
                    }

                    public class DestinationCommit
                    {
                        public class Author
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public class Committer
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public string? commitSha { get; set; }
                        public string? message { get; set; }
                        public Author? author { get; set; }
                        public Committer? committer { get; set; }
                        public string? webUrl { get; set; }
                    }

                    public class IssueCounts
                    {
                        public int? analyzerWarnings { get; set; }
                        public int? errors { get; set; }
                        public int? testFailures { get; set; }
                        public int? warnings { get; set; }
                    }

                    public int? number { get; set; }
                    public string? createdDate { get; set; }
                    public string? startedDate { get; set; }
                    public string? finishedDate { get; set; }
                    public SourceCommit? sourceCommit { get; set; }
                    public DestinationCommit? destinationCommit { get; set; }
                    public bool? isPullRequestBuild { get; set; }
                    public IssueCounts? issueCounts { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ExecutionProgress
                    {
                        PENDING,
                        RUNNING,
                        COMPLETE,
                    }
                    public ExecutionProgress? executionProgress { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CompletionStatus
                    {
                        SUCCEEDED,
                        FAILED,
                        ERRORED,
                        CANCELED,
                        SKIPPED,
                    }
                    public CompletionStatus? completionStatus { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum StartReason
                    {
                        GIT_REF_CHANGE,
                        MANUAL,
                        MANUAL_REBUILD,
                        PULL_REQUEST_OPEN,
                        PULL_REQUEST_UPDATE,
                        SCHEDULE,
                    }
                    public StartReason? startReason { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CancelReason
                    {
                        AUTOMATICALLY_BY_NEWER_BUILD,
                        MANUALLY_BY_USER,
                    }
                    public CancelReason? cancelReason { get; set; }
                }

                public class Relationships
                {
                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Workflow
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciWorkflows";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Product
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SourceBranchOrTag
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DestinationBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PullRequest
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmPullRequests";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Builds? builds { get; set; }
                    public Workflow? workflow { get; set; }
                    public Product? product { get; set; }
                    public SourceBranchOrTag? sourceBranchOrTag { get; set; }
                    public DestinationBranch? destinationBranch { get; set; }
                    public PullRequest? pullRequest { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciBuildRuns";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/ciBuildRuns
        public Task<CiBuildRunResponse> PostCiBuildRuns(CiBuildRunCreateRequest request)
        {
            string path = "/v1/ciBuildRuns";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<CiBuildRunResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsFieldsCiBuildRuns
        {
            actions,
            buildRun,
            builds,
            cancelReason,
            clean,
            completionStatus,
            createdDate,
            destinationBranch,
            destinationCommit,
            executionProgress,
            finishedDate,
            isPullRequestBuild,
            issueCounts,
            number,
            product,
            pullRequest,
            sourceBranchOrTag,
            sourceCommit,
            startReason,
            startedDate,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsInclude
        {
            builds,
            destinationBranch,
            product,
            pullRequest,
            sourceBranchOrTag,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsFieldsCiBuildActions
        {
            actionType,
            artifacts,
            buildRun,
            completionStatus,
            executionProgress,
            finishedDate,
            isRequiredToPass,
            issueCounts,
            issues,
            name,
            startedDate,
            testResults,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



        // /v1/ciBuildRuns/{id}
        public Task<CiBuildRunResponse> GetCiBuildRuns(string id, GetCiBuildRunsFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiBuildRunsInclude[]? include = default, GetCiBuildRunsFieldsCiBuildActions[]? fieldsCiBuildActions = default, GetCiBuildRunsFieldsBuilds[]? fieldsBuilds = default, int? limitBuilds = default)
        {
            string path = "/v1/ciBuildRuns/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiBuildActions != null)
                uriBuilder.AddParameter("fields[ciBuildActions]", string.Join(",", fieldsCiBuildActions));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiBuildRunResponse>(message);
        }

        public class CiIssueResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class FileSource
                    {
                        public string? path { get; set; }
                        public int? lineNumber { get; set; }
                    }

                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum IssueType
                    {
                        ANALYZER_WARNING,
                        ERROR,
                        TEST_FAILURE,
                        WARNING,
                    }
                    public IssueType? issueType { get; set; }
                    public string? message { get; set; }
                    public FileSource? fileSource { get; set; }
                    public string? category { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciIssues";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiIssuesFieldsCiIssues
        {
            category,
            fileSource,
            issueType,
            message,
        }


        // /v1/ciIssues/{id}
        public Task<CiIssueResponse> GetCiIssues(string id, GetCiIssuesFieldsCiIssues[]? fieldsCiIssues = default)
        {
            string path = "/v1/ciIssues/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiIssues != null)
                uriBuilder.AddParameter("fields[ciIssues]", string.Join(",", fieldsCiIssues));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiIssueResponse>(message);
        }

        public class CiMacOsVersionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? version { get; set; }
                    public string? name { get; set; }
                }

                public class Relationships
                {
                    public class XcodeVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciXcodeVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public XcodeVersions? xcodeVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciMacOsVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class TestDestinations
                    {
                        public class AvailableRuntimes
                        {
                            public string? runtimeName { get; set; }
                            public string? runtimeIdentifier { get; set; }
                        }

                        public string? deviceTypeName { get; set; }
                        public string? deviceTypeIdentifier { get; set; }
                        public AvailableRuntimes[]? availableRuntimes { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Kind
                        {
                            SIMULATOR,
                            MAC,
                        }
                        public Kind? kind { get; set; }
                    }

                    public string? version { get; set; }
                    public string? name { get; set; }
                    public TestDestinations[]? testDestinations { get; set; }
                }

                public class Relationships
                {
                    public class MacOsVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciMacOsVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public MacOsVersions? macOsVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciXcodeVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiMacOsVersionsFieldsCiMacOsVersions
        {
            name,
            version,
            xcodeVersions,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiMacOsVersionsFieldsCiXcodeVersions
        {
            macOsVersions,
            name,
            testDestinations,
            version,
        }



        // /v1/ciMacOsVersions
        public Task<CiMacOsVersionsResponse> GetCiMacOsVersions(GetCiMacOsVersionsFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, int? limit = default, string[]? include = default, GetCiMacOsVersionsFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, int? limitXcodeVersions = default)
        {
            string path = "/v1/ciMacOsVersions";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiMacOsVersions != null)
                uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiXcodeVersions != null)
                uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
            if (limitXcodeVersions.HasValue)
                uriBuilder.AddParameter("limit[xcodeVersions]", limitXcodeVersions.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiMacOsVersionsResponse>(message);
        }

        public class CiMacOsVersionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? version { get; set; }
                    public string? name { get; set; }
                }

                public class Relationships
                {
                    public class XcodeVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciXcodeVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public XcodeVersions? xcodeVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciMacOsVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class TestDestinations
                    {
                        public class AvailableRuntimes
                        {
                            public string? runtimeName { get; set; }
                            public string? runtimeIdentifier { get; set; }
                        }

                        public string? deviceTypeName { get; set; }
                        public string? deviceTypeIdentifier { get; set; }
                        public AvailableRuntimes[]? availableRuntimes { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Kind
                        {
                            SIMULATOR,
                            MAC,
                        }
                        public Kind? kind { get; set; }
                    }

                    public string? version { get; set; }
                    public string? name { get; set; }
                    public TestDestinations[]? testDestinations { get; set; }
                }

                public class Relationships
                {
                    public class MacOsVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciMacOsVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public MacOsVersions? macOsVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciXcodeVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }





        // /v1/ciMacOsVersions/{id}
        public Task<CiMacOsVersionResponse> GetCiMacOsVersions(string id, GetCiMacOsVersionsFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, string[]? include = default, GetCiMacOsVersionsFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, int? limitXcodeVersions = default)
        {
            string path = "/v1/ciMacOsVersions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiMacOsVersions != null)
                uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiXcodeVersions != null)
                uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
            if (limitXcodeVersions.HasValue)
                uriBuilder.AddParameter("limit[xcodeVersions]", limitXcodeVersions.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiMacOsVersionResponse>(message);
        }

        public class CiProductsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? createdDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProductType
                    {
                        APP,
                        FRAMEWORK,
                    }
                    public ProductType? productType { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BundleId
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "bundleIds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimaryRepositories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public BundleId? bundleId { get; set; }
                    public PrimaryRepositories? primaryRepositories { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciProducts";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsFilterProductType
        {
            APP,
            FRAMEWORK,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsFieldsCiProducts
        {
            additionalRepositories,
            app,
            buildRuns,
            bundleId,
            createdDate,
            name,
            primaryRepositories,
            productType,
            workflows,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsInclude
        {
            app,
            bundleId,
            primaryRepositories,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsFieldsCiBuildRuns
        {
            actions,
            buildRun,
            builds,
            cancelReason,
            clean,
            completionStatus,
            createdDate,
            destinationBranch,
            destinationCommit,
            executionProgress,
            finishedDate,
            isPullRequestBuild,
            issueCounts,
            number,
            product,
            pullRequest,
            sourceBranchOrTag,
            sourceCommit,
            startReason,
            startedDate,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsFieldsCiWorkflows
        {
            actions,
            branchStartCondition,
            buildRuns,
            clean,
            containerFilePath,
            description,
            isEnabled,
            isLockedForEditing,
            lastModifiedDate,
            macOsVersion,
            name,
            product,
            pullRequestStartCondition,
            repository,
            scheduledStartCondition,
            tagStartCondition,
            xcodeVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }



        // /v1/ciProducts
        public Task<CiProductsResponse> GetCiProducts(GetCiProductsFilterProductType[]? filterProductType = default, string[]? filterApp = default, GetCiProductsFieldsCiProducts[]? fieldsCiProducts = default, int? limit = default, GetCiProductsInclude[]? include = default, GetCiProductsFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiProductsFieldsCiWorkflows[]? fieldsCiWorkflows = default, GetCiProductsFieldsApps[]? fieldsApps = default, GetCiProductsFieldsScmRepositories[]? fieldsScmRepositories = default, int? limitPrimaryRepositories = default)
        {
            string path = "/v1/ciProducts";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterProductType != null)
                uriBuilder.AddParameter("filter[productType]", string.Join(",", filterProductType));
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (fieldsCiWorkflows != null)
                uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limitPrimaryRepositories.HasValue)
                uriBuilder.AddParameter("limit[primaryRepositories]", limitPrimaryRepositories.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiProductsResponse>(message);
        }

        public class CiProductResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? createdDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProductType
                    {
                        APP,
                        FRAMEWORK,
                    }
                    public ProductType? productType { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BundleId
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "bundleIds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimaryRepositories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public BundleId? bundleId { get; set; }
                    public PrimaryRepositories? primaryRepositories { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciProducts";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }








        // /v1/ciProducts/{id}
        public Task<CiProductResponse> GetCiProducts(string id, GetCiProductsFieldsCiProducts[]? fieldsCiProducts = default, GetCiProductsInclude[]? include = default, GetCiProductsFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiProductsFieldsCiWorkflows[]? fieldsCiWorkflows = default, GetCiProductsFieldsApps[]? fieldsApps = default, GetCiProductsFieldsScmRepositories[]? fieldsScmRepositories = default, int? limitPrimaryRepositories = default)
        {
            string path = "/v1/ciProducts/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (fieldsCiWorkflows != null)
                uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limitPrimaryRepositories.HasValue)
                uriBuilder.AddParameter("limit[primaryRepositories]", limitPrimaryRepositories.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiProductResponse>(message);
        }

        // /v1/ciProducts/{id}
        public Task DeleteCiProducts(string id)
        {
            string path = "/v1/ciProducts/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class CiTestResultResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class FileSource
                    {
                        public string? path { get; set; }
                        public int? lineNumber { get; set; }
                    }

                    public class DestinationTestResults
                    {
                        public string? uuid { get; set; }
                        public string? deviceName { get; set; }
                        public string? osVersion { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Status
                        {
                            SUCCESS,
                            FAILURE,
                            MIXED,
                            SKIPPED,
                            EXPECTED_FAILURE,
                        }
                        public Status? status { get; set; }
                        public double? duration { get; set; }
                    }

                    public string? className { get; set; }
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Status
                    {
                        SUCCESS,
                        FAILURE,
                        MIXED,
                        SKIPPED,
                        EXPECTED_FAILURE,
                    }
                    public Status? status { get; set; }
                    public FileSource? fileSource { get; set; }
                    public string? message { get; set; }
                    public DestinationTestResults[]? destinationTestResults { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciTestResults";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiTestResultsFieldsCiTestResults
        {
            className,
            destinationTestResults,
            fileSource,
            message,
            name,
            status,
        }


        // /v1/ciTestResults/{id}
        public Task<CiTestResultResponse> GetCiTestResults(string id, GetCiTestResultsFieldsCiTestResults[]? fieldsCiTestResults = default)
        {
            string path = "/v1/ciTestResults/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiTestResults != null)
                uriBuilder.AddParameter("fields[ciTestResults]", string.Join(",", fieldsCiTestResults));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiTestResultResponse>(message);
        }

        public class CiWorkflowCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public class BranchStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class TagStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class PullRequestStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class Destination
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public Destination? destination { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class ScheduledStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class Schedule
                        {
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Frequency
                            {
                                WEEKLY,
                                DAILY,
                                HOURLY,
                            }
                            public Frequency? frequency { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Days
                            {
                                SUNDAY,
                                MONDAY,
                                TUESDAY,
                                WEDNESDAY,
                                THURSDAY,
                                FRIDAY,
                                SATURDAY,
                            }

                            public Days[]? days { get; set; }
                            public int? hour { get; set; }
                            public int? minute { get; set; }
                            public string? timezone { get; set; }
                        }

                        public Source? source { get; set; }
                        public Schedule? schedule { get; set; }
                    }

                    public class Actions
                    {
                        public class TestConfiguration
                        {
                            public class TestDestinations
                            {
                                public string? deviceTypeName { get; set; }
                                public string? deviceTypeIdentifier { get; set; }
                                public string? runtimeName { get; set; }
                                public string? runtimeIdentifier { get; set; }
                                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                                public enum Kind
                                {
                                    SIMULATOR,
                                    MAC,
                                }
                                public Kind? kind { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Kind
                            {
                                USE_SCHEME_SETTINGS,
                                SPECIFIC_TEST_PLANS,
                            }
                            public Kind? kind { get; set; }
                            public string? testPlanName { get; set; }
                            public TestDestinations[]? testDestinations { get; set; }
                        }

                        public string? name { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum ActionType
                        {
                            BUILD,
                            ANALYZE,
                            TEST,
                            ARCHIVE,
                        }
                        public ActionType? actionType { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Destination
                        {
                            ANY_IOS_DEVICE,
                            ANY_IOS_SIMULATOR,
                            ANY_TVOS_DEVICE,
                            ANY_TVOS_SIMULATOR,
                            ANY_WATCHOS_DEVICE,
                            ANY_WATCHOS_SIMULATOR,
                            ANY_MAC,
                            ANY_MAC_CATALYST,
                        }
                        public Destination? destination { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum BuildDistributionAudience
                        {
                            INTERNAL_ONLY,
                            APP_STORE_ELIGIBLE,
                        }
                        public BuildDistributionAudience? buildDistributionAudience { get; set; }
                        public TestConfiguration? testConfiguration { get; set; }
                        public string? scheme { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Platform
                        {
                            MACOS,
                            IOS,
                            TVOS,
                            WATCHOS,
                        }
                        public Platform? platform { get; set; }
                        public bool? isRequiredToPass { get; set; }
                    }

                    public string name { get; set; } = "";
                    public string description { get; set; } = "";
                    public BranchStartCondition? branchStartCondition { get; set; }
                    public TagStartCondition? tagStartCondition { get; set; }
                    public PullRequestStartCondition? pullRequestStartCondition { get; set; }
                    public ScheduledStartCondition? scheduledStartCondition { get; set; }
                    public Actions[] actions { get; set; } = { };
                    public bool isEnabled { get; set; } = false;
                    public bool? isLockedForEditing { get; set; }
                    public bool clean { get; set; } = false;
                    public string containerFilePath { get; set; } = "";
                }

                public class Relationships
                {
                    public class Product
                    {
                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Repository
                    {
                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class XcodeVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "ciXcodeVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class MacOsVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "ciMacOsVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Product product { get; set; } = new Product();
                    public Repository repository { get; set; } = new Repository();
                    public XcodeVersion xcodeVersion { get; set; } = new XcodeVersion();
                    public MacOsVersion macOsVersion { get; set; } = new MacOsVersion();
                }

                public string type { get; set; } = "ciWorkflows";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class CiWorkflowResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class BranchStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class TagStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class PullRequestStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class Destination
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public Destination? destination { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class ScheduledStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class Schedule
                        {
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Frequency
                            {
                                WEEKLY,
                                DAILY,
                                HOURLY,
                            }
                            public Frequency? frequency { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Days
                            {
                                SUNDAY,
                                MONDAY,
                                TUESDAY,
                                WEDNESDAY,
                                THURSDAY,
                                FRIDAY,
                                SATURDAY,
                            }

                            public Days[]? days { get; set; }
                            public int? hour { get; set; }
                            public int? minute { get; set; }
                            public string? timezone { get; set; }
                        }

                        public Source? source { get; set; }
                        public Schedule? schedule { get; set; }
                    }

                    public class Actions
                    {
                        public class TestConfiguration
                        {
                            public class TestDestinations
                            {
                                public string? deviceTypeName { get; set; }
                                public string? deviceTypeIdentifier { get; set; }
                                public string? runtimeName { get; set; }
                                public string? runtimeIdentifier { get; set; }
                                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                                public enum Kind
                                {
                                    SIMULATOR,
                                    MAC,
                                }
                                public Kind? kind { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Kind
                            {
                                USE_SCHEME_SETTINGS,
                                SPECIFIC_TEST_PLANS,
                            }
                            public Kind? kind { get; set; }
                            public string? testPlanName { get; set; }
                            public TestDestinations[]? testDestinations { get; set; }
                        }

                        public string? name { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum ActionType
                        {
                            BUILD,
                            ANALYZE,
                            TEST,
                            ARCHIVE,
                        }
                        public ActionType? actionType { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Destination
                        {
                            ANY_IOS_DEVICE,
                            ANY_IOS_SIMULATOR,
                            ANY_TVOS_DEVICE,
                            ANY_TVOS_SIMULATOR,
                            ANY_WATCHOS_DEVICE,
                            ANY_WATCHOS_SIMULATOR,
                            ANY_MAC,
                            ANY_MAC_CATALYST,
                        }
                        public Destination? destination { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum BuildDistributionAudience
                        {
                            INTERNAL_ONLY,
                            APP_STORE_ELIGIBLE,
                        }
                        public BuildDistributionAudience? buildDistributionAudience { get; set; }
                        public TestConfiguration? testConfiguration { get; set; }
                        public string? scheme { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Platform
                        {
                            MACOS,
                            IOS,
                            TVOS,
                            WATCHOS,
                        }
                        public Platform? platform { get; set; }
                        public bool? isRequiredToPass { get; set; }
                    }

                    public string? name { get; set; }
                    public string? description { get; set; }
                    public BranchStartCondition? branchStartCondition { get; set; }
                    public TagStartCondition? tagStartCondition { get; set; }
                    public PullRequestStartCondition? pullRequestStartCondition { get; set; }
                    public ScheduledStartCondition? scheduledStartCondition { get; set; }
                    public Actions[]? actions { get; set; }
                    public bool? isEnabled { get; set; }
                    public bool? isLockedForEditing { get; set; }
                    public bool? clean { get; set; }
                    public string? containerFilePath { get; set; }
                    public string? lastModifiedDate { get; set; }
                }

                public class Relationships
                {
                    public class Product
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Repository
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class XcodeVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciXcodeVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class MacOsVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciMacOsVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Product? product { get; set; }
                    public Repository? repository { get; set; }
                    public XcodeVersion? xcodeVersion { get; set; }
                    public MacOsVersion? macOsVersion { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciWorkflows";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/ciWorkflows
        public Task<CiWorkflowResponse> PostCiWorkflows(CiWorkflowCreateRequest request)
        {
            string path = "/v1/ciWorkflows";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<CiWorkflowResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsFieldsCiWorkflows
        {
            actions,
            branchStartCondition,
            buildRuns,
            clean,
            containerFilePath,
            description,
            isEnabled,
            isLockedForEditing,
            lastModifiedDate,
            macOsVersion,
            name,
            product,
            pullRequestStartCondition,
            repository,
            scheduledStartCondition,
            tagStartCondition,
            xcodeVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsInclude
        {
            macOsVersion,
            product,
            repository,
            xcodeVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsFieldsCiBuildRuns
        {
            actions,
            buildRun,
            builds,
            cancelReason,
            clean,
            completionStatus,
            createdDate,
            destinationBranch,
            destinationCommit,
            executionProgress,
            finishedDate,
            isPullRequestBuild,
            issueCounts,
            number,
            product,
            pullRequest,
            sourceBranchOrTag,
            sourceCommit,
            startReason,
            startedDate,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }


        // /v1/ciWorkflows/{id}
        public Task<CiWorkflowResponse> GetCiWorkflows(string id, GetCiWorkflowsFieldsCiWorkflows[]? fieldsCiWorkflows = default, GetCiWorkflowsInclude[]? include = default, GetCiWorkflowsFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiWorkflowsFieldsScmRepositories[]? fieldsScmRepositories = default)
        {
            string path = "/v1/ciWorkflows/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiWorkflows != null)
                uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiWorkflowResponse>(message);
        }

        public class CiWorkflowUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public class BranchStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class TagStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class PullRequestStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class Destination
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public Destination? destination { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class ScheduledStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class Schedule
                        {
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Frequency
                            {
                                WEEKLY,
                                DAILY,
                                HOURLY,
                            }
                            public Frequency? frequency { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Days
                            {
                                SUNDAY,
                                MONDAY,
                                TUESDAY,
                                WEDNESDAY,
                                THURSDAY,
                                FRIDAY,
                                SATURDAY,
                            }

                            public Days[]? days { get; set; }
                            public int? hour { get; set; }
                            public int? minute { get; set; }
                            public string? timezone { get; set; }
                        }

                        public Source? source { get; set; }
                        public Schedule? schedule { get; set; }
                    }

                    public class Actions
                    {
                        public class TestConfiguration
                        {
                            public class TestDestinations
                            {
                                public string? deviceTypeName { get; set; }
                                public string? deviceTypeIdentifier { get; set; }
                                public string? runtimeName { get; set; }
                                public string? runtimeIdentifier { get; set; }
                                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                                public enum Kind
                                {
                                    SIMULATOR,
                                    MAC,
                                }
                                public Kind? kind { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Kind
                            {
                                USE_SCHEME_SETTINGS,
                                SPECIFIC_TEST_PLANS,
                            }
                            public Kind? kind { get; set; }
                            public string? testPlanName { get; set; }
                            public TestDestinations[]? testDestinations { get; set; }
                        }

                        public string? name { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum ActionType
                        {
                            BUILD,
                            ANALYZE,
                            TEST,
                            ARCHIVE,
                        }
                        public ActionType? actionType { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Destination
                        {
                            ANY_IOS_DEVICE,
                            ANY_IOS_SIMULATOR,
                            ANY_TVOS_DEVICE,
                            ANY_TVOS_SIMULATOR,
                            ANY_WATCHOS_DEVICE,
                            ANY_WATCHOS_SIMULATOR,
                            ANY_MAC,
                            ANY_MAC_CATALYST,
                        }
                        public Destination? destination { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum BuildDistributionAudience
                        {
                            INTERNAL_ONLY,
                            APP_STORE_ELIGIBLE,
                        }
                        public BuildDistributionAudience? buildDistributionAudience { get; set; }
                        public TestConfiguration? testConfiguration { get; set; }
                        public string? scheme { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Platform
                        {
                            MACOS,
                            IOS,
                            TVOS,
                            WATCHOS,
                        }
                        public Platform? platform { get; set; }
                        public bool? isRequiredToPass { get; set; }
                    }

                    public string? name { get; set; }
                    public string? description { get; set; }
                    public BranchStartCondition? branchStartCondition { get; set; }
                    public TagStartCondition? tagStartCondition { get; set; }
                    public PullRequestStartCondition? pullRequestStartCondition { get; set; }
                    public ScheduledStartCondition? scheduledStartCondition { get; set; }
                    public Actions[]? actions { get; set; }
                    public bool? isEnabled { get; set; }
                    public bool? isLockedForEditing { get; set; }
                    public bool? clean { get; set; }
                    public string? containerFilePath { get; set; }
                }

                public class Relationships
                {
                    public class XcodeVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "ciXcodeVersions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class MacOsVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "ciMacOsVersions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public XcodeVersion? xcodeVersion { get; set; }
                    public MacOsVersion? macOsVersion { get; set; }
                }

                public string type { get; set; } = "ciWorkflows";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/ciWorkflows/{id}
        public Task<CiWorkflowResponse> PatchCiWorkflows(string id, CiWorkflowUpdateRequest request)
        {
            string path = "/v1/ciWorkflows/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<CiWorkflowResponse>(message);
        }

        // /v1/ciWorkflows/{id}
        public Task DeleteCiWorkflows(string id)
        {
            string path = "/v1/ciWorkflows/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class CiXcodeVersionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class TestDestinations
                    {
                        public class AvailableRuntimes
                        {
                            public string? runtimeName { get; set; }
                            public string? runtimeIdentifier { get; set; }
                        }

                        public string? deviceTypeName { get; set; }
                        public string? deviceTypeIdentifier { get; set; }
                        public AvailableRuntimes[]? availableRuntimes { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Kind
                        {
                            SIMULATOR,
                            MAC,
                        }
                        public Kind? kind { get; set; }
                    }

                    public string? version { get; set; }
                    public string? name { get; set; }
                    public TestDestinations[]? testDestinations { get; set; }
                }

                public class Relationships
                {
                    public class MacOsVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciMacOsVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public MacOsVersions? macOsVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciXcodeVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? version { get; set; }
                    public string? name { get; set; }
                }

                public class Relationships
                {
                    public class XcodeVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciXcodeVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public XcodeVersions? xcodeVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciMacOsVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiXcodeVersionsFieldsCiXcodeVersions
        {
            macOsVersions,
            name,
            testDestinations,
            version,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiXcodeVersionsFieldsCiMacOsVersions
        {
            name,
            version,
            xcodeVersions,
        }



        // /v1/ciXcodeVersions
        public Task<CiXcodeVersionsResponse> GetCiXcodeVersions(GetCiXcodeVersionsFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, int? limit = default, string[]? include = default, GetCiXcodeVersionsFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, int? limitMacOsVersions = default)
        {
            string path = "/v1/ciXcodeVersions";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiXcodeVersions != null)
                uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiMacOsVersions != null)
                uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
            if (limitMacOsVersions.HasValue)
                uriBuilder.AddParameter("limit[macOsVersions]", limitMacOsVersions.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiXcodeVersionsResponse>(message);
        }

        public class CiXcodeVersionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class TestDestinations
                    {
                        public class AvailableRuntimes
                        {
                            public string? runtimeName { get; set; }
                            public string? runtimeIdentifier { get; set; }
                        }

                        public string? deviceTypeName { get; set; }
                        public string? deviceTypeIdentifier { get; set; }
                        public AvailableRuntimes[]? availableRuntimes { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Kind
                        {
                            SIMULATOR,
                            MAC,
                        }
                        public Kind? kind { get; set; }
                    }

                    public string? version { get; set; }
                    public string? name { get; set; }
                    public TestDestinations[]? testDestinations { get; set; }
                }

                public class Relationships
                {
                    public class MacOsVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciMacOsVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public MacOsVersions? macOsVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciXcodeVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? version { get; set; }
                    public string? name { get; set; }
                }

                public class Relationships
                {
                    public class XcodeVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciXcodeVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public XcodeVersions? xcodeVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciMacOsVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }





        // /v1/ciXcodeVersions/{id}
        public Task<CiXcodeVersionResponse> GetCiXcodeVersions(string id, GetCiXcodeVersionsFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, string[]? include = default, GetCiXcodeVersionsFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, int? limitMacOsVersions = default)
        {
            string path = "/v1/ciXcodeVersions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiXcodeVersions != null)
                uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCiMacOsVersions != null)
                uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
            if (limitMacOsVersions.HasValue)
                uriBuilder.AddParameter("limit[macOsVersions]", limitMacOsVersions.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiXcodeVersionResponse>(message);
        }

        public class CustomerReviewResponseV1CreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string responseBody { get; set; } = "";
                }

                public class Relationships
                {
                    public class Review
                    {
                        public class Data
                        {
                            public string type { get; set; } = "customerReviews";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Review review { get; set; } = new Review();
                }

                public string type { get; set; } = "customerReviewResponses";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class CustomerReviewResponseV1Response
        {
            public class Data
            {
                public class Attributes
                {
                    public string? responseBody { get; set; }
                    public string? lastModifiedDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PUBLISHED,
                        PENDING_PUBLISH,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class Review
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "customerReviews";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Review? review { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "customerReviewResponses";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public int? rating { get; set; }
                    public string? title { get; set; }
                    public string? body { get; set; }
                    public string? reviewerNickname { get; set; }
                    public string? createdDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Territory
                    {
                        ABW,
                        AFG,
                        AGO,
                        AIA,
                        ALB,
                        AND,
                        ANT,
                        ARE,
                        ARG,
                        ARM,
                        ASM,
                        ATG,
                        AUS,
                        AUT,
                        AZE,
                        BDI,
                        BEL,
                        BEN,
                        BES,
                        BFA,
                        BGD,
                        BGR,
                        BHR,
                        BHS,
                        BIH,
                        BLR,
                        BLZ,
                        BMU,
                        BOL,
                        BRA,
                        BRB,
                        BRN,
                        BTN,
                        BWA,
                        CAF,
                        CAN,
                        CHE,
                        CHL,
                        CHN,
                        CIV,
                        CMR,
                        COD,
                        COG,
                        COK,
                        COL,
                        COM,
                        CPV,
                        CRI,
                        CUB,
                        CUW,
                        CXR,
                        CYM,
                        CYP,
                        CZE,
                        DEU,
                        DJI,
                        DMA,
                        DNK,
                        DOM,
                        DZA,
                        ECU,
                        EGY,
                        ERI,
                        ESP,
                        EST,
                        ETH,
                        FIN,
                        FJI,
                        FLK,
                        FRA,
                        FRO,
                        FSM,
                        GAB,
                        GBR,
                        GEO,
                        GGY,
                        GHA,
                        GIB,
                        GIN,
                        GLP,
                        GMB,
                        GNB,
                        GNQ,
                        GRC,
                        GRD,
                        GRL,
                        GTM,
                        GUF,
                        GUM,
                        GUY,
                        HKG,
                        HND,
                        HRV,
                        HTI,
                        HUN,
                        IDN,
                        IMN,
                        IND,
                        IRL,
                        IRQ,
                        ISL,
                        ISR,
                        ITA,
                        JAM,
                        JEY,
                        JOR,
                        JPN,
                        KAZ,
                        KEN,
                        KGZ,
                        KHM,
                        KIR,
                        KNA,
                        KOR,
                        KWT,
                        LAO,
                        LBN,
                        LBR,
                        LBY,
                        LCA,
                        LIE,
                        LKA,
                        LSO,
                        LTU,
                        LUX,
                        LVA,
                        MAC,
                        MAR,
                        MCO,
                        MDA,
                        MDG,
                        MDV,
                        MEX,
                        MHL,
                        MKD,
                        MLI,
                        MLT,
                        MMR,
                        MNE,
                        MNG,
                        MNP,
                        MOZ,
                        MRT,
                        MSR,
                        MTQ,
                        MUS,
                        MWI,
                        MYS,
                        MYT,
                        NAM,
                        NCL,
                        NER,
                        NFK,
                        NGA,
                        NIC,
                        NIU,
                        NLD,
                        NOR,
                        NPL,
                        NRU,
                        NZL,
                        OMN,
                        PAK,
                        PAN,
                        PER,
                        PHL,
                        PLW,
                        PNG,
                        POL,
                        PRI,
                        PRT,
                        PRY,
                        PSE,
                        PYF,
                        QAT,
                        REU,
                        ROU,
                        RUS,
                        RWA,
                        SAU,
                        SEN,
                        SGP,
                        SHN,
                        SLB,
                        SLE,
                        SLV,
                        SMR,
                        SOM,
                        SPM,
                        SRB,
                        SSD,
                        STP,
                        SUR,
                        SVK,
                        SVN,
                        SWE,
                        SWZ,
                        SXM,
                        SYC,
                        TCA,
                        TCD,
                        TGO,
                        THA,
                        TJK,
                        TKM,
                        TLS,
                        TON,
                        TTO,
                        TUN,
                        TUR,
                        TUV,
                        TWN,
                        TZA,
                        UGA,
                        UKR,
                        UMI,
                        URY,
                        USA,
                        UZB,
                        VAT,
                        VCT,
                        VEN,
                        VGB,
                        VIR,
                        VNM,
                        VUT,
                        WLF,
                        WSM,
                        YEM,
                        ZAF,
                        ZMB,
                        ZWE,
                    }
                    public Territory? territory { get; set; }
                }

                public class Relationships
                {
                    public class Response
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "customerReviewResponses";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Response? response { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "customerReviews";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/customerReviewResponses
        public Task<CustomerReviewResponseV1Response> PostCustomerReviewResponses(CustomerReviewResponseV1CreateRequest request)
        {
            string path = "/v1/customerReviewResponses";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<CustomerReviewResponseV1Response>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCustomerReviewResponsesFieldsCustomerReviewResponses
        {
            lastModifiedDate,
            responseBody,
            review,
            state,
        }



        // /v1/customerReviewResponses/{id}
        public Task<CustomerReviewResponseV1Response> GetCustomerReviewResponses(string id, GetCustomerReviewResponsesFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, string[]? include = default)
        {
            string path = "/v1/customerReviewResponses/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCustomerReviewResponses != null)
                uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CustomerReviewResponseV1Response>(message);
        }

        // /v1/customerReviewResponses/{id}
        public Task DeleteCustomerReviewResponses(string id)
        {
            string path = "/v1/customerReviewResponses/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class CustomerReviewResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public int? rating { get; set; }
                    public string? title { get; set; }
                    public string? body { get; set; }
                    public string? reviewerNickname { get; set; }
                    public string? createdDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Territory
                    {
                        ABW,
                        AFG,
                        AGO,
                        AIA,
                        ALB,
                        AND,
                        ANT,
                        ARE,
                        ARG,
                        ARM,
                        ASM,
                        ATG,
                        AUS,
                        AUT,
                        AZE,
                        BDI,
                        BEL,
                        BEN,
                        BES,
                        BFA,
                        BGD,
                        BGR,
                        BHR,
                        BHS,
                        BIH,
                        BLR,
                        BLZ,
                        BMU,
                        BOL,
                        BRA,
                        BRB,
                        BRN,
                        BTN,
                        BWA,
                        CAF,
                        CAN,
                        CHE,
                        CHL,
                        CHN,
                        CIV,
                        CMR,
                        COD,
                        COG,
                        COK,
                        COL,
                        COM,
                        CPV,
                        CRI,
                        CUB,
                        CUW,
                        CXR,
                        CYM,
                        CYP,
                        CZE,
                        DEU,
                        DJI,
                        DMA,
                        DNK,
                        DOM,
                        DZA,
                        ECU,
                        EGY,
                        ERI,
                        ESP,
                        EST,
                        ETH,
                        FIN,
                        FJI,
                        FLK,
                        FRA,
                        FRO,
                        FSM,
                        GAB,
                        GBR,
                        GEO,
                        GGY,
                        GHA,
                        GIB,
                        GIN,
                        GLP,
                        GMB,
                        GNB,
                        GNQ,
                        GRC,
                        GRD,
                        GRL,
                        GTM,
                        GUF,
                        GUM,
                        GUY,
                        HKG,
                        HND,
                        HRV,
                        HTI,
                        HUN,
                        IDN,
                        IMN,
                        IND,
                        IRL,
                        IRQ,
                        ISL,
                        ISR,
                        ITA,
                        JAM,
                        JEY,
                        JOR,
                        JPN,
                        KAZ,
                        KEN,
                        KGZ,
                        KHM,
                        KIR,
                        KNA,
                        KOR,
                        KWT,
                        LAO,
                        LBN,
                        LBR,
                        LBY,
                        LCA,
                        LIE,
                        LKA,
                        LSO,
                        LTU,
                        LUX,
                        LVA,
                        MAC,
                        MAR,
                        MCO,
                        MDA,
                        MDG,
                        MDV,
                        MEX,
                        MHL,
                        MKD,
                        MLI,
                        MLT,
                        MMR,
                        MNE,
                        MNG,
                        MNP,
                        MOZ,
                        MRT,
                        MSR,
                        MTQ,
                        MUS,
                        MWI,
                        MYS,
                        MYT,
                        NAM,
                        NCL,
                        NER,
                        NFK,
                        NGA,
                        NIC,
                        NIU,
                        NLD,
                        NOR,
                        NPL,
                        NRU,
                        NZL,
                        OMN,
                        PAK,
                        PAN,
                        PER,
                        PHL,
                        PLW,
                        PNG,
                        POL,
                        PRI,
                        PRT,
                        PRY,
                        PSE,
                        PYF,
                        QAT,
                        REU,
                        ROU,
                        RUS,
                        RWA,
                        SAU,
                        SEN,
                        SGP,
                        SHN,
                        SLB,
                        SLE,
                        SLV,
                        SMR,
                        SOM,
                        SPM,
                        SRB,
                        SSD,
                        STP,
                        SUR,
                        SVK,
                        SVN,
                        SWE,
                        SWZ,
                        SXM,
                        SYC,
                        TCA,
                        TCD,
                        TGO,
                        THA,
                        TJK,
                        TKM,
                        TLS,
                        TON,
                        TTO,
                        TUN,
                        TUR,
                        TUV,
                        TWN,
                        TZA,
                        UGA,
                        UKR,
                        UMI,
                        URY,
                        USA,
                        UZB,
                        VAT,
                        VCT,
                        VEN,
                        VGB,
                        VIR,
                        VNM,
                        VUT,
                        WLF,
                        WSM,
                        YEM,
                        ZAF,
                        ZMB,
                        ZWE,
                    }
                    public Territory? territory { get; set; }
                }

                public class Relationships
                {
                    public class Response
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "customerReviewResponses";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Response? response { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "customerReviews";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? responseBody { get; set; }
                    public string? lastModifiedDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PUBLISHED,
                        PENDING_PUBLISH,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class Review
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "customerReviews";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Review? review { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "customerReviewResponses";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCustomerReviewsFieldsCustomerReviews
        {
            body,
            createdDate,
            rating,
            response,
            reviewerNickname,
            territory,
            title,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCustomerReviewsFieldsCustomerReviewResponses
        {
            lastModifiedDate,
            responseBody,
            review,
            state,
        }


        // /v1/customerReviews/{id}
        public Task<CustomerReviewResponse> GetCustomerReviews(string id, GetCustomerReviewsFieldsCustomerReviews[]? fieldsCustomerReviews = default, string[]? include = default, GetCustomerReviewsFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default)
        {
            string path = "/v1/customerReviews/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCustomerReviews != null)
                uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCustomerReviewResponses != null)
                uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CustomerReviewResponse>(message);
        }

        public class DevicesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? udid { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum DeviceClass
                    {
                        APPLE_WATCH,
                        IPAD,
                        IPHONE,
                        IPOD,
                        APPLE_TV,
                        MAC,
                    }
                    public DeviceClass? deviceClass { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Status
                    {
                        ENABLED,
                        DISABLED,
                    }
                    public Status? status { get; set; }
                    public string? model { get; set; }
                    public string? addedDate { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "devices";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetDevicesFilterPlatform
        {
            IOS,
            MAC_OS,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetDevicesFilterStatus
        {
            ENABLED,
            DISABLED,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetDevicesSort
        {
            id,
            [EnumMember(Value = "-id")]
            idDescending,
            name,
            [EnumMember(Value = "-name")]
            nameDescending,
            platform,
            [EnumMember(Value = "-platform")]
            platformDescending,
            status,
            [EnumMember(Value = "-status")]
            statusDescending,
            udid,
            [EnumMember(Value = "-udid")]
            udidDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetDevicesFieldsDevices
        {
            addedDate,
            deviceClass,
            model,
            name,
            platform,
            status,
            udid,
        }



        // /v1/devices
        public Task<DevicesResponse> GetDevices(string[]? filterName = default, GetDevicesFilterPlatform[]? filterPlatform = default, GetDevicesFilterStatus[]? filterStatus = default, string[]? filterUdid = default, string[]? filterId = default, GetDevicesSort[]? sort = default, GetDevicesFieldsDevices[]? fieldsDevices = default, int? limit = default)
        {
            string path = "/v1/devices";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterName != null)
                uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterStatus != null)
                uriBuilder.AddParameter("filter[status]", string.Join(",", filterStatus));
            if (filterUdid != null)
                uriBuilder.AddParameter("filter[udid]", string.Join(",", filterUdid));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsDevices != null)
                uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<DevicesResponse>(message);
        }

        public class DeviceCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform platform { get; set; } = default;
                    public string udid { get; set; } = "";
                }

                public string type { get; set; } = "devices";
                public Attributes attributes { get; set; } = new Attributes();
            }

            public Data data { get; set; } = new Data();
        }

        public class DeviceResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? udid { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum DeviceClass
                    {
                        APPLE_WATCH,
                        IPAD,
                        IPHONE,
                        IPOD,
                        APPLE_TV,
                        MAC,
                    }
                    public DeviceClass? deviceClass { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Status
                    {
                        ENABLED,
                        DISABLED,
                    }
                    public Status? status { get; set; }
                    public string? model { get; set; }
                    public string? addedDate { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "devices";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/devices
        public Task<DeviceResponse> PostDevices(DeviceCreateRequest request)
        {
            string path = "/v1/devices";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<DeviceResponse>(message);
        }


        // /v1/devices/{id}
        public Task<DeviceResponse> GetDevices(string id, GetDevicesFieldsDevices[]? fieldsDevices = default)
        {
            string path = "/v1/devices/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsDevices != null)
                uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<DeviceResponse>(message);
        }

        public class DeviceUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Status
                    {
                        ENABLED,
                        DISABLED,
                    }
                    public Status? status { get; set; }
                }

                public string type { get; set; } = "devices";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/devices/{id}
        public Task<DeviceResponse> PatchDevices(string id, DeviceUpdateRequest request)
        {
            string path = "/v1/devices/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<DeviceResponse>(message);
        }

        public class EndUserLicenseAgreementCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string agreementText { get; set; } = "";
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Territories
                    {
                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Data[] data { get; set; } = { };
                    }

                    public App app { get; set; } = new App();
                    public Territories territories { get; set; } = new Territories();
                }

                public string type { get; set; } = "endUserLicenseAgreements";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class EndUserLicenseAgreementResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? agreementText { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public Territories? territories { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "endUserLicenseAgreements";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/endUserLicenseAgreements
        public Task<EndUserLicenseAgreementResponse> PostEndUserLicenseAgreements(EndUserLicenseAgreementCreateRequest request)
        {
            string path = "/v1/endUserLicenseAgreements";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<EndUserLicenseAgreementResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetEndUserLicenseAgreementsFieldsEndUserLicenseAgreements
        {
            agreementText,
            app,
            territories,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetEndUserLicenseAgreementsInclude
        {
            app,
            territories,
        }




        // /v1/endUserLicenseAgreements/{id}
        public Task<EndUserLicenseAgreementResponse> GetEndUserLicenseAgreements(string id, GetEndUserLicenseAgreementsFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, GetEndUserLicenseAgreementsInclude[]? include = default, string[]? fieldsTerritories = default, int? limitTerritories = default)
        {
            string path = "/v1/endUserLicenseAgreements/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsEndUserLicenseAgreements != null)
                uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limitTerritories.HasValue)
                uriBuilder.AddParameter("limit[territories]", limitTerritories.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<EndUserLicenseAgreementResponse>(message);
        }

        public class EndUserLicenseAgreementUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? agreementText { get; set; }
                }

                public class Relationships
                {
                    public class Territories
                    {
                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public Territories? territories { get; set; }
                }

                public string type { get; set; } = "endUserLicenseAgreements";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/endUserLicenseAgreements/{id}
        public Task<EndUserLicenseAgreementResponse> PatchEndUserLicenseAgreements(string id, EndUserLicenseAgreementUpdateRequest request)
        {
            string path = "/v1/endUserLicenseAgreements/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<EndUserLicenseAgreementResponse>(message);
        }

        // /v1/endUserLicenseAgreements/{id}
        public Task DeleteEndUserLicenseAgreements(string id)
        {
            string path = "/v1/endUserLicenseAgreements/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetFinanceReportsFilterReportType
        {
            FINANCIAL,
            FINANCE_DETAIL,
        }



        // /v1/financeReports
        public Task GetFinanceReports(string[] filterRegionCode, string[] filterReportDate, GetFinanceReportsFilterReportType[] filterReportType, string[] filterVendorNumber)
        {
            string path = "/v1/financeReports";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterRegionCode != null)
                uriBuilder.AddParameter("filter[regionCode]", string.Join(",", filterRegionCode));
            if (filterReportDate != null)
                uriBuilder.AddParameter("filter[reportDate]", string.Join(",", filterReportDate));
            if (filterReportType != null)
                uriBuilder.AddParameter("filter[reportType]", string.Join(",", filterReportType));
            if (filterVendorNumber != null)
                uriBuilder.AddParameter("filter[vendorNumber]", string.Join(",", filterVendorNumber));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class InAppPurchaseAppStoreReviewScreenshotCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public InAppPurchaseV2 inAppPurchaseV2 { get; set; } = new InAppPurchaseV2();
                }

                public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class InAppPurchaseAppStoreReviewScreenshotResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public string? assetToken { get; set; }
                    public string? assetType { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        CONSUMABLE,
                        NON_CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? contentHosting { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Content
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseContents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IapPriceSchedule
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePriceSchedules";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseLocalizations? inAppPurchaseLocalizations { get; set; }
                    public PricePoints? pricePoints { get; set; }
                    public Content? content { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                    public IapPriceSchedule? iapPriceSchedule { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/inAppPurchaseAppStoreReviewScreenshots
        public Task<InAppPurchaseAppStoreReviewScreenshotResponse> PostInAppPurchaseAppStoreReviewScreenshots(InAppPurchaseAppStoreReviewScreenshotCreateRequest request)
        {
            string path = "/v1/inAppPurchaseAppStoreReviewScreenshots";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<InAppPurchaseAppStoreReviewScreenshotResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchaseAppStoreReviewScreenshotsFieldsInAppPurchaseAppStoreReviewScreenshots
        {
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            inAppPurchaseV2,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        // /v1/inAppPurchaseAppStoreReviewScreenshots/{id}
        public Task<InAppPurchaseAppStoreReviewScreenshotResponse> GetInAppPurchaseAppStoreReviewScreenshots(string id, GetInAppPurchaseAppStoreReviewScreenshotsFieldsInAppPurchaseAppStoreReviewScreenshots[]? fieldsInAppPurchaseAppStoreReviewScreenshots = default, string[]? include = default)
        {
            string path = "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
                uriBuilder.AddParameter("fields[inAppPurchaseAppStoreReviewScreenshots]", string.Join(",", fieldsInAppPurchaseAppStoreReviewScreenshots));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchaseAppStoreReviewScreenshotResponse>(message);
        }

        public class InAppPurchaseAppStoreReviewScreenshotUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/inAppPurchaseAppStoreReviewScreenshots/{id}
        public Task<InAppPurchaseAppStoreReviewScreenshotResponse> PatchInAppPurchaseAppStoreReviewScreenshots(string id, InAppPurchaseAppStoreReviewScreenshotUpdateRequest request)
        {
            string path = "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<InAppPurchaseAppStoreReviewScreenshotResponse>(message);
        }

        // /v1/inAppPurchaseAppStoreReviewScreenshots/{id}
        public Task DeleteInAppPurchaseAppStoreReviewScreenshots(string id)
        {
            string path = "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class InAppPurchaseContentResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? fileName { get; set; }
                    public int? fileSize { get; set; }
                    public string? url { get; set; }
                    public string? lastModifiedDate { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchaseContents";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        CONSUMABLE,
                        NON_CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? contentHosting { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Content
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseContents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IapPriceSchedule
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePriceSchedules";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseLocalizations? inAppPurchaseLocalizations { get; set; }
                    public PricePoints? pricePoints { get; set; }
                    public Content? content { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                    public IapPriceSchedule? iapPriceSchedule { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchaseContentsFieldsInAppPurchaseContents
        {
            fileName,
            fileSize,
            inAppPurchaseV2,
            lastModifiedDate,
            url,
        }



        // /v1/inAppPurchaseContents/{id}
        public Task<InAppPurchaseContentResponse> GetInAppPurchaseContents(string id, GetInAppPurchaseContentsFieldsInAppPurchaseContents[]? fieldsInAppPurchaseContents = default, string[]? include = default)
        {
            string path = "/v1/inAppPurchaseContents/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchaseContents != null)
                uriBuilder.AddParameter("fields[inAppPurchaseContents]", string.Join(",", fieldsInAppPurchaseContents));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchaseContentResponse>(message);
        }

        public class InAppPurchaseLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public string locale { get; set; } = "";
                    public string? description { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public InAppPurchaseV2 inAppPurchaseV2 { get; set; } = new InAppPurchaseV2();
                }

                public string type { get; set; } = "inAppPurchaseLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class InAppPurchaseLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? locale { get; set; }
                    public string? description { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        WAITING_FOR_REVIEW,
                        APPROVED,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchaseLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        CONSUMABLE,
                        NON_CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? contentHosting { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Content
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseContents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IapPriceSchedule
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePriceSchedules";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseLocalizations? inAppPurchaseLocalizations { get; set; }
                    public PricePoints? pricePoints { get; set; }
                    public Content? content { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                    public IapPriceSchedule? iapPriceSchedule { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/inAppPurchaseLocalizations
        public Task<InAppPurchaseLocalizationResponse> PostInAppPurchaseLocalizations(InAppPurchaseLocalizationCreateRequest request)
        {
            string path = "/v1/inAppPurchaseLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<InAppPurchaseLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchaseLocalizationsFieldsInAppPurchaseLocalizations
        {
            description,
            inAppPurchaseV2,
            locale,
            name,
            state,
        }



        // /v1/inAppPurchaseLocalizations/{id}
        public Task<InAppPurchaseLocalizationResponse> GetInAppPurchaseLocalizations(string id, GetInAppPurchaseLocalizationsFieldsInAppPurchaseLocalizations[]? fieldsInAppPurchaseLocalizations = default, string[]? include = default)
        {
            string path = "/v1/inAppPurchaseLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchaseLocalizations != null)
                uriBuilder.AddParameter("fields[inAppPurchaseLocalizations]", string.Join(",", fieldsInAppPurchaseLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchaseLocalizationResponse>(message);
        }

        public class InAppPurchaseLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? description { get; set; }
                }

                public string type { get; set; } = "inAppPurchaseLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/inAppPurchaseLocalizations/{id}
        public Task<InAppPurchaseLocalizationResponse> PatchInAppPurchaseLocalizations(string id, InAppPurchaseLocalizationUpdateRequest request)
        {
            string path = "/v1/inAppPurchaseLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<InAppPurchaseLocalizationResponse>(message);
        }

        // /v1/inAppPurchaseLocalizations/{id}
        public Task DeleteInAppPurchaseLocalizations(string id)
        {
            string path = "/v1/inAppPurchaseLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class InAppPurchasePriceScheduleCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class InAppPurchase
                    {
                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class ManualPrices
                    {
                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePrices";
                            public string id { get; set; } = "";
                        }

                        public Data[] data { get; set; } = { };
                    }

                    public InAppPurchase inAppPurchase { get; set; } = new InAppPurchase();
                    public ManualPrices manualPrices { get; set; } = new ManualPrices();
                }

                public string type { get; set; } = "inAppPurchasePriceSchedules";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? startDate { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class InAppPurchasePricePoint
                    {
                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                    public InAppPurchasePricePoint? inAppPurchasePricePoint { get; set; }
                }

                public string type { get; set; } = "inAppPurchasePrices";
                public string? id { get; set; }
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        public class InAppPurchasePriceScheduleResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class InAppPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class ManualPrices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public InAppPurchase? inAppPurchase { get; set; }
                    public ManualPrices? manualPrices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchasePriceSchedules";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/inAppPurchasePriceSchedules
        public Task<InAppPurchasePriceScheduleResponse> PostInAppPurchasePriceSchedules(InAppPurchasePriceScheduleCreateRequest request)
        {
            string path = "/v1/inAppPurchasePriceSchedules";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<InAppPurchasePriceScheduleResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasePriceSchedulesFieldsInAppPurchasePriceSchedules
        {
            inAppPurchase,
            manualPrices,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasePriceSchedulesInclude
        {
            inAppPurchase,
            manualPrices,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasePriceSchedulesFieldsInAppPurchasePrices
        {
            inAppPurchasePricePoint,
            inAppPurchaseV2,
            startDate,
            territory,
        }



        // /v1/inAppPurchasePriceSchedules/{id}
        public Task<InAppPurchasePriceScheduleResponse> GetInAppPurchasePriceSchedules(string id, GetInAppPurchasePriceSchedulesFieldsInAppPurchasePriceSchedules[]? fieldsInAppPurchasePriceSchedules = default, GetInAppPurchasePriceSchedulesInclude[]? include = default, GetInAppPurchasePriceSchedulesFieldsInAppPurchasePrices[]? fieldsInAppPurchasePrices = default, int? limitManualPrices = default)
        {
            string path = "/v1/inAppPurchasePriceSchedules/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchasePriceSchedules != null)
                uriBuilder.AddParameter("fields[inAppPurchasePriceSchedules]", string.Join(",", fieldsInAppPurchasePriceSchedules));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsInAppPurchasePrices != null)
                uriBuilder.AddParameter("fields[inAppPurchasePrices]", string.Join(",", fieldsInAppPurchasePrices));
            if (limitManualPrices.HasValue)
                uriBuilder.AddParameter("limit[manualPrices]", limitManualPrices.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchasePriceScheduleResponse>(message);
        }

        public class InAppPurchaseSubmissionCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public InAppPurchaseV2 inAppPurchaseV2 { get; set; } = new InAppPurchaseV2();
                }

                public string type { get; set; } = "inAppPurchaseSubmissions";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class InAppPurchaseSubmissionResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchaseSubmissions";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        CONSUMABLE,
                        NON_CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? contentHosting { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Content
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseContents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IapPriceSchedule
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePriceSchedules";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseLocalizations? inAppPurchaseLocalizations { get; set; }
                    public PricePoints? pricePoints { get; set; }
                    public Content? content { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                    public IapPriceSchedule? iapPriceSchedule { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/inAppPurchaseSubmissions
        public Task<InAppPurchaseSubmissionResponse> PostInAppPurchaseSubmissions(InAppPurchaseSubmissionCreateRequest request)
        {
            string path = "/v1/inAppPurchaseSubmissions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<InAppPurchaseSubmissionResponse>(message);
        }

        public class InAppPurchaseResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? referenceName { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        AUTOMATICALLY_RENEWABLE_SUBSCRIPTION,
                        NON_CONSUMABLE,
                        CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                        FREE_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        CREATED,
                        DEVELOPER_SIGNED_OFF,
                        DEVELOPER_ACTION_NEEDED,
                        DELETION_IN_PROGRESS,
                        APPROVED,
                        DELETED,
                        REMOVED_FROM_SALE,
                        DEVELOPER_REMOVED_FROM_SALE,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        REPLACED,
                        REJECTED,
                        WAITING_FOR_SCREENSHOT,
                        PREPARE_FOR_SUBMISSION,
                        MISSING_METADATA,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        PENDING_DEVELOPER_RELEASE,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class Apps
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Apps? apps { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesFieldsInAppPurchases
        {
            apps,
            inAppPurchaseType,
            productId,
            referenceName,
            state,
        }




        // /v1/inAppPurchases/{id}
        public Task<InAppPurchaseResponse> GetInAppPurchases(string id, GetInAppPurchasesFieldsInAppPurchases[]? fieldsInAppPurchases = default, string[]? include = default, int? limitApps = default)
        {
            string path = "/v1/inAppPurchases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (limitApps.HasValue)
                uriBuilder.AddParameter("limit[apps]", limitApps.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchaseResponse>(message);
        }

        public class InAppPurchaseV2CreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public string productId { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        CONSUMABLE,
                        NON_CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                    }
                    public InAppPurchaseType inAppPurchaseType { get; set; } = default;
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public App app { get; set; } = new App();
                }

                public string type { get; set; } = "inAppPurchases";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class InAppPurchaseV2Response
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        CONSUMABLE,
                        NON_CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? contentHosting { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Content
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseContents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IapPriceSchedule
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePriceSchedules";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseLocalizations? inAppPurchaseLocalizations { get; set; }
                    public PricePoints? pricePoints { get; set; }
                    public Content? content { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                    public IapPriceSchedule? iapPriceSchedule { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v2/inAppPurchases
        public Task<InAppPurchaseV2Response> PostInAppPurchases(InAppPurchaseV2CreateRequest request)
        {
            string path = "/v2/inAppPurchases";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<InAppPurchaseV2Response>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesInclude
        {
            appStoreReviewScreenshot,
            content,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            pricePoints,
            promotedPurchase,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesFieldsInAppPurchaseAppStoreReviewScreenshots
        {
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            inAppPurchaseV2,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesFieldsInAppPurchasePricePoints
        {
            customerPrice,
            inAppPurchaseV2,
            priceTier,
            proceeds,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesFieldsInAppPurchaseLocalizations
        {
            description,
            inAppPurchaseV2,
            locale,
            name,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesFieldsInAppPurchasePriceSchedules
        {
            inAppPurchase,
            manualPrices,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesFieldsInAppPurchaseContents
        {
            fileName,
            fileSize,
            inAppPurchaseV2,
            lastModifiedDate,
            url,
        }




        // /v2/inAppPurchases/{id}
        public Task<InAppPurchaseV2Response> GetInAppPurchases(string id, GetInAppPurchasesFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetInAppPurchasesInclude[]? include = default, GetInAppPurchasesFieldsInAppPurchaseAppStoreReviewScreenshots[]? fieldsInAppPurchaseAppStoreReviewScreenshots = default, GetInAppPurchasesFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetInAppPurchasesFieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, GetInAppPurchasesFieldsInAppPurchaseLocalizations[]? fieldsInAppPurchaseLocalizations = default, GetInAppPurchasesFieldsInAppPurchasePriceSchedules[]? fieldsInAppPurchasePriceSchedules = default, GetInAppPurchasesFieldsInAppPurchaseContents[]? fieldsInAppPurchaseContents = default, int? limitInAppPurchaseLocalizations = default, int? limitPricePoints = default)
        {
            string path = "/v2/inAppPurchases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
                uriBuilder.AddParameter("fields[inAppPurchaseAppStoreReviewScreenshots]", string.Join(",", fieldsInAppPurchaseAppStoreReviewScreenshots));
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsInAppPurchasePricePoints != null)
                uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
            if (fieldsInAppPurchaseLocalizations != null)
                uriBuilder.AddParameter("fields[inAppPurchaseLocalizations]", string.Join(",", fieldsInAppPurchaseLocalizations));
            if (fieldsInAppPurchasePriceSchedules != null)
                uriBuilder.AddParameter("fields[inAppPurchasePriceSchedules]", string.Join(",", fieldsInAppPurchasePriceSchedules));
            if (fieldsInAppPurchaseContents != null)
                uriBuilder.AddParameter("fields[inAppPurchaseContents]", string.Join(",", fieldsInAppPurchaseContents));
            if (limitInAppPurchaseLocalizations.HasValue)
                uriBuilder.AddParameter("limit[inAppPurchaseLocalizations]", limitInAppPurchaseLocalizations.Value.ToString());
            if (limitPricePoints.HasValue)
                uriBuilder.AddParameter("limit[pricePoints]", limitPricePoints.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchaseV2Response>(message);
        }

        public class InAppPurchaseV2UpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v2/inAppPurchases/{id}
        public Task<InAppPurchaseV2Response> PatchInAppPurchases(string id, InAppPurchaseV2UpdateRequest request)
        {
            string path = "/v2/inAppPurchases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<InAppPurchaseV2Response>(message);
        }

        // /v2/inAppPurchases/{id}
        public Task DeleteInAppPurchases(string id)
        {
            string path = "/v2/inAppPurchases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class PreReleaseVersionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? version { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                }

                public class Relationships
                {
                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Builds? builds { get; set; }
                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "preReleaseVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsFilterBuildsProcessingState
        {
            PROCESSING,
            FAILED,
            INVALID,
            VALID,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsFilterPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsSort
        {
            version,
            [EnumMember(Value = "-version")]
            versionDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsFieldsPreReleaseVersions
        {
            app,
            builds,
            platform,
            version,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsInclude
        {
            app,
            builds,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



        // /v1/preReleaseVersions
        public Task<PreReleaseVersionsResponse> GetPreReleaseVersions(string[]? filterBuildsExpired = default, GetPreReleaseVersionsFilterBuildsProcessingState[]? filterBuildsProcessingState = default, string[]? filterBuildsVersion = default, GetPreReleaseVersionsFilterPlatform[]? filterPlatform = default, string[]? filterVersion = default, string[]? filterApp = default, string[]? filterBuilds = default, GetPreReleaseVersionsSort[]? sort = default, GetPreReleaseVersionsFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, int? limit = default, GetPreReleaseVersionsInclude[]? include = default, GetPreReleaseVersionsFieldsApps[]? fieldsApps = default, GetPreReleaseVersionsFieldsBuilds[]? fieldsBuilds = default, int? limitBuilds = default)
        {
            string path = "/v1/preReleaseVersions";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterBuildsExpired != null)
                uriBuilder.AddParameter("filter[builds.expired]", string.Join(",", filterBuildsExpired));
            if (filterBuildsProcessingState != null)
                uriBuilder.AddParameter("filter[builds.processingState]", string.Join(",", filterBuildsProcessingState));
            if (filterBuildsVersion != null)
                uriBuilder.AddParameter("filter[builds.version]", string.Join(",", filterBuildsVersion));
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterVersion != null)
                uriBuilder.AddParameter("filter[version]", string.Join(",", filterVersion));
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (filterBuilds != null)
                uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PreReleaseVersionsResponse>(message);
        }

        public class PrereleaseVersionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? version { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                }

                public class Relationships
                {
                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Builds? builds { get; set; }
                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "preReleaseVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }






        // /v1/preReleaseVersions/{id}
        public Task<PrereleaseVersionResponse> GetPreReleaseVersions(string id, GetPreReleaseVersionsFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, GetPreReleaseVersionsInclude[]? include = default, GetPreReleaseVersionsFieldsApps[]? fieldsApps = default, GetPreReleaseVersionsFieldsBuilds[]? fieldsBuilds = default, int? limitBuilds = default)
        {
            string path = "/v1/preReleaseVersions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PrereleaseVersionResponse>(message);
        }

        public class ProfilesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform? platform { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProfileType
                    {
                        IOS_APP_DEVELOPMENT,
                        IOS_APP_STORE,
                        IOS_APP_ADHOC,
                        IOS_APP_INHOUSE,
                        MAC_APP_DEVELOPMENT,
                        MAC_APP_STORE,
                        MAC_APP_DIRECT,
                        TVOS_APP_DEVELOPMENT,
                        TVOS_APP_STORE,
                        TVOS_APP_ADHOC,
                        TVOS_APP_INHOUSE,
                        MAC_CATALYST_APP_DEVELOPMENT,
                        MAC_CATALYST_APP_STORE,
                        MAC_CATALYST_APP_DIRECT,
                    }
                    public ProfileType? profileType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProfileState
                    {
                        ACTIVE,
                        INVALID,
                    }
                    public ProfileState? profileState { get; set; }
                    public string? profileContent { get; set; }
                    public string? uuid { get; set; }
                    public string? createdDate { get; set; }
                    public string? expirationDate { get; set; }
                }

                public class Relationships
                {
                    public class BundleId
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "bundleIds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Devices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "devices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Certificates
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "certificates";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public BundleId? bundleId { get; set; }
                    public Devices? devices { get; set; }
                    public Certificates? certificates { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "profiles";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesFilterProfileState
        {
            ACTIVE,
            INVALID,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesFilterProfileType
        {
            IOS_APP_DEVELOPMENT,
            IOS_APP_STORE,
            IOS_APP_ADHOC,
            IOS_APP_INHOUSE,
            MAC_APP_DEVELOPMENT,
            MAC_APP_STORE,
            MAC_APP_DIRECT,
            TVOS_APP_DEVELOPMENT,
            TVOS_APP_STORE,
            TVOS_APP_ADHOC,
            TVOS_APP_INHOUSE,
            MAC_CATALYST_APP_DEVELOPMENT,
            MAC_CATALYST_APP_STORE,
            MAC_CATALYST_APP_DIRECT,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesSort
        {
            id,
            [EnumMember(Value = "-id")]
            idDescending,
            name,
            [EnumMember(Value = "-name")]
            nameDescending,
            profileState,
            [EnumMember(Value = "-profileState")]
            profileStateDescending,
            profileType,
            [EnumMember(Value = "-profileType")]
            profileTypeDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesFieldsProfiles
        {
            bundleId,
            certificates,
            createdDate,
            devices,
            expirationDate,
            name,
            platform,
            profileContent,
            profileState,
            profileType,
            uuid,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesInclude
        {
            bundleId,
            certificates,
            devices,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesFieldsCertificates
        {
            certificateContent,
            certificateType,
            csrContent,
            displayName,
            expirationDate,
            name,
            platform,
            serialNumber,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesFieldsDevices
        {
            addedDate,
            deviceClass,
            model,
            name,
            platform,
            status,
            udid,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesFieldsBundleIds
        {
            app,
            bundleIdCapabilities,
            identifier,
            name,
            platform,
            profiles,
            seedId,
        }




        // /v1/profiles
        public Task<ProfilesResponse> GetProfiles(string[]? filterName = default, GetProfilesFilterProfileState[]? filterProfileState = default, GetProfilesFilterProfileType[]? filterProfileType = default, string[]? filterId = default, GetProfilesSort[]? sort = default, GetProfilesFieldsProfiles[]? fieldsProfiles = default, int? limit = default, GetProfilesInclude[]? include = default, GetProfilesFieldsCertificates[]? fieldsCertificates = default, GetProfilesFieldsDevices[]? fieldsDevices = default, GetProfilesFieldsBundleIds[]? fieldsBundleIds = default, int? limitCertificates = default, int? limitDevices = default)
        {
            string path = "/v1/profiles";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterName != null)
                uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
            if (filterProfileState != null)
                uriBuilder.AddParameter("filter[profileState]", string.Join(",", filterProfileState));
            if (filterProfileType != null)
                uriBuilder.AddParameter("filter[profileType]", string.Join(",", filterProfileType));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsProfiles != null)
                uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCertificates != null)
                uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));
            if (fieldsDevices != null)
                uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));
            if (fieldsBundleIds != null)
                uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
            if (limitCertificates.HasValue)
                uriBuilder.AddParameter("limit[certificates]", limitCertificates.Value.ToString());
            if (limitDevices.HasValue)
                uriBuilder.AddParameter("limit[devices]", limitDevices.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ProfilesResponse>(message);
        }

        public class ProfileCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProfileType
                    {
                        IOS_APP_DEVELOPMENT,
                        IOS_APP_STORE,
                        IOS_APP_ADHOC,
                        IOS_APP_INHOUSE,
                        MAC_APP_DEVELOPMENT,
                        MAC_APP_STORE,
                        MAC_APP_DIRECT,
                        TVOS_APP_DEVELOPMENT,
                        TVOS_APP_STORE,
                        TVOS_APP_ADHOC,
                        TVOS_APP_INHOUSE,
                        MAC_CATALYST_APP_DEVELOPMENT,
                        MAC_CATALYST_APP_STORE,
                        MAC_CATALYST_APP_DIRECT,
                    }
                    public ProfileType profileType { get; set; } = default;
                }

                public class Relationships
                {
                    public class BundleId
                    {
                        public class Data
                        {
                            public string type { get; set; } = "bundleIds";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Devices
                    {
                        public class Data
                        {
                            public string type { get; set; } = "devices";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class Certificates
                    {
                        public class Data
                        {
                            public string type { get; set; } = "certificates";
                            public string id { get; set; } = "";
                        }

                        public Data[] data { get; set; } = { };
                    }

                    public BundleId bundleId { get; set; } = new BundleId();
                    public Devices? devices { get; set; }
                    public Certificates certificates { get; set; } = new Certificates();
                }

                public string type { get; set; } = "profiles";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class ProfileResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                    }
                    public Platform? platform { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProfileType
                    {
                        IOS_APP_DEVELOPMENT,
                        IOS_APP_STORE,
                        IOS_APP_ADHOC,
                        IOS_APP_INHOUSE,
                        MAC_APP_DEVELOPMENT,
                        MAC_APP_STORE,
                        MAC_APP_DIRECT,
                        TVOS_APP_DEVELOPMENT,
                        TVOS_APP_STORE,
                        TVOS_APP_ADHOC,
                        TVOS_APP_INHOUSE,
                        MAC_CATALYST_APP_DEVELOPMENT,
                        MAC_CATALYST_APP_STORE,
                        MAC_CATALYST_APP_DIRECT,
                    }
                    public ProfileType? profileType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ProfileState
                    {
                        ACTIVE,
                        INVALID,
                    }
                    public ProfileState? profileState { get; set; }
                    public string? profileContent { get; set; }
                    public string? uuid { get; set; }
                    public string? createdDate { get; set; }
                    public string? expirationDate { get; set; }
                }

                public class Relationships
                {
                    public class BundleId
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "bundleIds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Devices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "devices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Certificates
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "certificates";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public BundleId? bundleId { get; set; }
                    public Devices? devices { get; set; }
                    public Certificates? certificates { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "profiles";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/profiles
        public Task<ProfileResponse> PostProfiles(ProfileCreateRequest request)
        {
            string path = "/v1/profiles";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<ProfileResponse>(message);
        }








        // /v1/profiles/{id}
        public Task<ProfileResponse> GetProfiles(string id, GetProfilesFieldsProfiles[]? fieldsProfiles = default, GetProfilesInclude[]? include = default, GetProfilesFieldsCertificates[]? fieldsCertificates = default, GetProfilesFieldsDevices[]? fieldsDevices = default, GetProfilesFieldsBundleIds[]? fieldsBundleIds = default, int? limitCertificates = default, int? limitDevices = default)
        {
            string path = "/v1/profiles/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsProfiles != null)
                uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsCertificates != null)
                uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));
            if (fieldsDevices != null)
                uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));
            if (fieldsBundleIds != null)
                uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
            if (limitCertificates.HasValue)
                uriBuilder.AddParameter("limit[certificates]", limitCertificates.Value.ToString());
            if (limitDevices.HasValue)
                uriBuilder.AddParameter("limit[devices]", limitDevices.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ProfileResponse>(message);
        }

        // /v1/profiles/{id}
        public Task DeleteProfiles(string id)
        {
            string path = "/v1/profiles/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class PromotedPurchaseImageCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                }

                public class Relationships
                {
                    public class PromotedPurchase
                    {
                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public PromotedPurchase promotedPurchase { get; set; } = new PromotedPurchase();
                }

                public string type { get; set; } = "promotedPurchaseImages";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class PromotedPurchaseImageResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public string? assetToken { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public string? assetType { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        AWAITING_UPLOAD,
                        UPLOAD_COMPLETE,
                        FAILED,
                        PREPARE_FOR_SUBMISSION,
                        WAITING_FOR_REVIEW,
                        APPROVED,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public PromotedPurchase? promotedPurchase { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "promotedPurchaseImages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public bool? visibleForAllUsers { get; set; }
                    public bool? enabled { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        APPROVED,
                        IN_REVIEW,
                        PREPARE_FOR_SUBMISSION,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotionImages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchaseImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                    public Subscription? subscription { get; set; }
                    public PromotionImages? promotionImages { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "promotedPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/promotedPurchaseImages
        public Task<PromotedPurchaseImageResponse> PostPromotedPurchaseImages(PromotedPurchaseImageCreateRequest request)
        {
            string path = "/v1/promotedPurchaseImages";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<PromotedPurchaseImageResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPromotedPurchaseImagesFieldsPromotedPurchaseImages
        {
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            promotedPurchase,
            sourceFileChecksum,
            state,
            uploadOperations,
            uploaded,
        }



        // /v1/promotedPurchaseImages/{id}
        public Task<PromotedPurchaseImageResponse> GetPromotedPurchaseImages(string id, GetPromotedPurchaseImagesFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, string[]? include = default)
        {
            string path = "/v1/promotedPurchaseImages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPromotedPurchaseImages != null)
                uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PromotedPurchaseImageResponse>(message);
        }

        public class PromotedPurchaseImageUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "promotedPurchaseImages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/promotedPurchaseImages/{id}
        public Task<PromotedPurchaseImageResponse> PatchPromotedPurchaseImages(string id, PromotedPurchaseImageUpdateRequest request)
        {
            string path = "/v1/promotedPurchaseImages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<PromotedPurchaseImageResponse>(message);
        }

        // /v1/promotedPurchaseImages/{id}
        public Task DeletePromotedPurchaseImages(string id)
        {
            string path = "/v1/promotedPurchaseImages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class PromotedPurchaseCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool visibleForAllUsers { get; set; } = false;
                    public bool? enabled { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class InAppPurchaseV2
                    {
                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public App app { get; set; } = new App();
                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                    public Subscription? subscription { get; set; }
                }

                public string type { get; set; } = "promotedPurchases";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class PromotedPurchaseResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? visibleForAllUsers { get; set; }
                    public bool? enabled { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        APPROVED,
                        IN_REVIEW,
                        PREPARE_FOR_SUBMISSION,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotionImages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchaseImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                    public Subscription? subscription { get; set; }
                    public PromotionImages? promotionImages { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "promotedPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/promotedPurchases
        public Task<PromotedPurchaseResponse> PostPromotedPurchases(PromotedPurchaseCreateRequest request)
        {
            string path = "/v1/promotedPurchases";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<PromotedPurchaseResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPromotedPurchasesFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPromotedPurchasesInclude
        {
            inAppPurchaseV2,
            promotionImages,
            subscription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPromotedPurchasesFieldsPromotedPurchaseImages
        {
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            promotedPurchase,
            sourceFileChecksum,
            state,
            uploadOperations,
            uploaded,
        }



        // /v1/promotedPurchases/{id}
        public Task<PromotedPurchaseResponse> GetPromotedPurchases(string id, GetPromotedPurchasesFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetPromotedPurchasesInclude[]? include = default, GetPromotedPurchasesFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, int? limitPromotionImages = default)
        {
            string path = "/v1/promotedPurchases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsPromotedPurchaseImages != null)
                uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
            if (limitPromotionImages.HasValue)
                uriBuilder.AddParameter("limit[promotionImages]", limitPromotionImages.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PromotedPurchaseResponse>(message);
        }

        public class PromotedPurchaseUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? visibleForAllUsers { get; set; }
                    public bool? enabled { get; set; }
                }

                public string type { get; set; } = "promotedPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/promotedPurchases/{id}
        public Task<PromotedPurchaseResponse> PatchPromotedPurchases(string id, PromotedPurchaseUpdateRequest request)
        {
            string path = "/v1/promotedPurchases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<PromotedPurchaseResponse>(message);
        }

        // /v1/promotedPurchases/{id}
        public Task DeletePromotedPurchases(string id)
        {
            string path = "/v1/promotedPurchases/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class ReviewSubmissionItemCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class ReviewSubmission
                    {
                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperiment
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class AppEvent
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public ReviewSubmission reviewSubmission { get; set; } = new ReviewSubmission();
                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppCustomProductPageVersion? appCustomProductPageVersion { get; set; }
                    public AppStoreVersionExperiment? appStoreVersionExperiment { get; set; }
                    public AppEvent? appEvent { get; set; }
                }

                public string type { get; set; } = "reviewSubmissionItems";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class ReviewSubmissionItemResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        READY_FOR_REVIEW,
                        ACCEPTED,
                        APPROVED,
                        REJECTED,
                        REMOVED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperiment
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppCustomProductPageVersion? appCustomProductPageVersion { get; set; }
                    public AppStoreVersionExperiment? appStoreVersionExperiment { get; set; }
                    public AppEvent? appEvent { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "reviewSubmissionItems";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/reviewSubmissionItems
        public Task<ReviewSubmissionItemResponse> PostReviewSubmissionItems(ReviewSubmissionItemCreateRequest request)
        {
            string path = "/v1/reviewSubmissionItems";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<ReviewSubmissionItemResponse>(message);
        }

        public class ReviewSubmissionItemUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? resolved { get; set; }
                    public bool? removed { get; set; }
                }

                public string type { get; set; } = "reviewSubmissionItems";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/reviewSubmissionItems/{id}
        public Task<ReviewSubmissionItemResponse> PatchReviewSubmissionItems(string id, ReviewSubmissionItemUpdateRequest request)
        {
            string path = "/v1/reviewSubmissionItems/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<ReviewSubmissionItemResponse>(message);
        }

        // /v1/reviewSubmissionItems/{id}
        public Task DeleteReviewSubmissionItems(string id)
        {
            string path = "/v1/reviewSubmissionItems/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class ReviewSubmissionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? submittedDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        READY_FOR_REVIEW,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        UNRESOLVED_ISSUES,
                        CANCELING,
                        COMPLETING,
                        COMPLETE,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Items
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissionItems";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersionForReview
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public Items? items { get; set; }
                    public AppStoreVersionForReview? appStoreVersionForReview { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "reviewSubmissions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsFilterPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsFilterState
        {
            READY_FOR_REVIEW,
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            UNRESOLVED_ISSUES,
            CANCELING,
            COMPLETING,
            COMPLETE,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsFieldsReviewSubmissions
        {
            app,
            appStoreVersionForReview,
            canceled,
            items,
            platform,
            state,
            submitted,
            submittedDate,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsInclude
        {
            app,
            appStoreVersionForReview,
            items,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsFieldsReviewSubmissionItems
        {
            appCustomProductPageVersion,
            appEvent,
            appStoreVersion,
            appStoreVersionExperiment,
            removed,
            resolved,
            reviewSubmission,
            state,
        }



        // /v1/reviewSubmissions
        public Task<ReviewSubmissionsResponse> GetReviewSubmissions(string[] filterApp, GetReviewSubmissionsFilterPlatform[]? filterPlatform = default, GetReviewSubmissionsFilterState[]? filterState = default, GetReviewSubmissionsFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, int? limit = default, GetReviewSubmissionsInclude[]? include = default, GetReviewSubmissionsFieldsReviewSubmissionItems[]? fieldsReviewSubmissionItems = default, int? limitItems = default)
        {
            string path = "/v1/reviewSubmissions";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterState != null)
                uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
            if (fieldsReviewSubmissions != null)
                uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsReviewSubmissionItems != null)
                uriBuilder.AddParameter("fields[reviewSubmissionItems]", string.Join(",", fieldsReviewSubmissionItems));
            if (limitItems.HasValue)
                uriBuilder.AddParameter("limit[items]", limitItems.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ReviewSubmissionsResponse>(message);
        }

        public class ReviewSubmissionCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform platform { get; set; } = default;
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public App app { get; set; } = new App();
                }

                public string type { get; set; } = "reviewSubmissions";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class ReviewSubmissionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? submittedDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        READY_FOR_REVIEW,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        UNRESOLVED_ISSUES,
                        CANCELING,
                        COMPLETING,
                        COMPLETE,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Items
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissionItems";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersionForReview
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public Items? items { get; set; }
                    public AppStoreVersionForReview? appStoreVersionForReview { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "reviewSubmissions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/reviewSubmissions
        public Task<ReviewSubmissionResponse> PostReviewSubmissions(ReviewSubmissionCreateRequest request)
        {
            string path = "/v1/reviewSubmissions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<ReviewSubmissionResponse>(message);
        }





        // /v1/reviewSubmissions/{id}
        public Task<ReviewSubmissionResponse> GetReviewSubmissions(string id, GetReviewSubmissionsFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, GetReviewSubmissionsInclude[]? include = default, GetReviewSubmissionsFieldsReviewSubmissionItems[]? fieldsReviewSubmissionItems = default, int? limitItems = default)
        {
            string path = "/v1/reviewSubmissions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsReviewSubmissions != null)
                uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsReviewSubmissionItems != null)
                uriBuilder.AddParameter("fields[reviewSubmissionItems]", string.Join(",", fieldsReviewSubmissionItems));
            if (limitItems.HasValue)
                uriBuilder.AddParameter("limit[items]", limitItems.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ReviewSubmissionResponse>(message);
        }

        public class ReviewSubmissionUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? submitted { get; set; }
                    public bool? canceled { get; set; }
                }

                public string type { get; set; } = "reviewSubmissions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/reviewSubmissions/{id}
        public Task<ReviewSubmissionResponse> PatchReviewSubmissions(string id, ReviewSubmissionUpdateRequest request)
        {
            string path = "/v1/reviewSubmissions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<ReviewSubmissionResponse>(message);
        }

        public class RoutingAppCoverageCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public AppStoreVersion appStoreVersion { get; set; } = new AppStoreVersion();
                }

                public string type { get; set; } = "routingAppCoverages";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class RoutingAppCoverageResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "routingAppCoverages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? versionString { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreState
                    {
                        ACCEPTED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        DEVELOPER_REJECTED,
                        IN_REVIEW,
                        INVALID_BINARY,
                        METADATA_REJECTED,
                        PENDING_APPLE_RELEASE,
                        PENDING_CONTRACT,
                        PENDING_DEVELOPER_RELEASE,
                        PREPARE_FOR_SUBMISSION,
                        PREORDER_READY_FOR_SALE,
                        PROCESSING_FOR_APP_STORE,
                        READY_FOR_REVIEW,
                        READY_FOR_SALE,
                        REJECTED,
                        REMOVED_FROM_SALE,
                        WAITING_FOR_EXPORT_COMPLIANCE,
                        WAITING_FOR_REVIEW,
                        REPLACED_WITH_NEW_VERSION,
                    }
                    public AppStoreState? appStoreState { get; set; }
                    public string? copyright { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ReleaseType
                    {
                        MANUAL,
                        AFTER_APPROVAL,
                        SCHEDULED,
                    }
                    public ReleaseType? releaseType { get; set; }
                    public string? earliestReleaseDate { get; set; }
                    public bool? downloadable { get; set; }
                    public string? createdDate { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AgeRatingDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ageRatingDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionPhasedRelease
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionPhasedReleases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class RoutingAppCoverage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "routingAppCoverages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperience
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperiments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AgeRatingDeclaration? ageRatingDeclaration { get; set; }
                    public AppStoreVersionLocalizations? appStoreVersionLocalizations { get; set; }
                    public Build? build { get; set; }
                    public AppStoreVersionPhasedRelease? appStoreVersionPhasedRelease { get; set; }
                    public RoutingAppCoverage? routingAppCoverage { get; set; }
                    public AppStoreReviewDetail? appStoreReviewDetail { get; set; }
                    public AppStoreVersionSubmission? appStoreVersionSubmission { get; set; }
                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                    public AppStoreVersionExperiments? appStoreVersionExperiments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/routingAppCoverages
        public Task<RoutingAppCoverageResponse> PostRoutingAppCoverages(RoutingAppCoverageCreateRequest request)
        {
            string path = "/v1/routingAppCoverages";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<RoutingAppCoverageResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetRoutingAppCoveragesFieldsRoutingAppCoverages
        {
            appStoreVersion,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        // /v1/routingAppCoverages/{id}
        public Task<RoutingAppCoverageResponse> GetRoutingAppCoverages(string id, GetRoutingAppCoveragesFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, string[]? include = default)
        {
            string path = "/v1/routingAppCoverages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsRoutingAppCoverages != null)
                uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<RoutingAppCoverageResponse>(message);
        }

        public class RoutingAppCoverageUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "routingAppCoverages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/routingAppCoverages/{id}
        public Task<RoutingAppCoverageResponse> PatchRoutingAppCoverages(string id, RoutingAppCoverageUpdateRequest request)
        {
            string path = "/v1/routingAppCoverages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<RoutingAppCoverageResponse>(message);
        }

        // /v1/routingAppCoverages/{id}
        public Task DeleteRoutingAppCoverages(string id)
        {
            string path = "/v1/routingAppCoverages/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSalesReportsFilterFrequency
        {
            DAILY,
            WEEKLY,
            MONTHLY,
            YEARLY,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSalesReportsFilterReportSubType
        {
            SUMMARY,
            DETAILED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSalesReportsFilterReportType
        {
            SALES,
            PRE_ORDER,
            NEWSSTAND,
            SUBSCRIPTION,
            SUBSCRIPTION_EVENT,
            SUBSCRIBER,
            SUBSCRIPTION_OFFER_CODE_REDEMPTION,
        }





        // /v1/salesReports
        public Task GetSalesReports(GetSalesReportsFilterFrequency[] filterFrequency, GetSalesReportsFilterReportSubType[] filterReportSubType, GetSalesReportsFilterReportType[] filterReportType, string[] filterVendorNumber, string[]? filterReportDate = default, string[]? filterVersion = default)
        {
            string path = "/v1/salesReports";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterFrequency != null)
                uriBuilder.AddParameter("filter[frequency]", string.Join(",", filterFrequency));
            if (filterReportSubType != null)
                uriBuilder.AddParameter("filter[reportSubType]", string.Join(",", filterReportSubType));
            if (filterReportType != null)
                uriBuilder.AddParameter("filter[reportType]", string.Join(",", filterReportType));
            if (filterVendorNumber != null)
                uriBuilder.AddParameter("filter[vendorNumber]", string.Join(",", filterVendorNumber));
            if (filterReportDate != null)
                uriBuilder.AddParameter("filter[reportDate]", string.Join(",", filterReportDate));
            if (filterVersion != null)
                uriBuilder.AddParameter("filter[version]", string.Join(",", filterVersion));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class ScmGitReferenceResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? canonicalName { get; set; }
                    public bool? isDeleted { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Kind
                    {
                        BRANCH,
                        TAG,
                    }
                    public Kind? kind { get; set; }
                }

                public class Relationships
                {
                    public class Repository
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Repository? repository { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmGitReferences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? lastAccessedDate { get; set; }
                    public string? httpCloneUrl { get; set; }
                    public string? sshCloneUrl { get; set; }
                    public string? ownerName { get; set; }
                    public string? repositoryName { get; set; }
                }

                public class Relationships
                {
                    public class ScmProvider
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmProviders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DefaultBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public ScmProvider? scmProvider { get; set; }
                    public DefaultBranch? defaultBranch { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmRepositories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmGitReferencesFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }



        // /v1/scmGitReferences/{id}
        public Task<ScmGitReferenceResponse> GetScmGitReferences(string id, GetScmGitReferencesFieldsScmGitReferences[]? fieldsScmGitReferences = default, string[]? include = default)
        {
            string path = "/v1/scmGitReferences/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmGitReferenceResponse>(message);
        }

        public class ScmProvidersResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ScmProviderType
                    {
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Kind
                        {
                            BITBUCKET_CLOUD,
                            BITBUCKET_SERVER,
                            GITHUB_CLOUD,
                            GITHUB_ENTERPRISE,
                            GITLAB_CLOUD,
                            GITLAB_SELF_MANAGED,
                        }
                        public Kind? kind { get; set; }
                        public string? displayName { get; set; }
                        public bool? isOnPremise { get; set; }
                    }

                    public ScmProviderType? scmProviderType { get; set; }
                    public string? url { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmProviders";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmProvidersFieldsScmProviders
        {
            repositories,
            scmProviderType,
            url,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmProvidersFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }


        // /v1/scmProviders
        public Task<ScmProvidersResponse> GetScmProviders(GetScmProvidersFieldsScmProviders[]? fieldsScmProviders = default, int? limit = default, GetScmProvidersFieldsScmRepositories[]? fieldsScmRepositories = default)
        {
            string path = "/v1/scmProviders";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmProviders != null)
                uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmProvidersResponse>(message);
        }

        public class ScmProviderResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ScmProviderType
                    {
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Kind
                        {
                            BITBUCKET_CLOUD,
                            BITBUCKET_SERVER,
                            GITHUB_CLOUD,
                            GITHUB_ENTERPRISE,
                            GITLAB_CLOUD,
                            GITLAB_SELF_MANAGED,
                        }
                        public Kind? kind { get; set; }
                        public string? displayName { get; set; }
                        public bool? isOnPremise { get; set; }
                    }

                    public ScmProviderType? scmProviderType { get; set; }
                    public string? url { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmProviders";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }



        // /v1/scmProviders/{id}
        public Task<ScmProviderResponse> GetScmProviders(string id, GetScmProvidersFieldsScmProviders[]? fieldsScmProviders = default, GetScmProvidersFieldsScmRepositories[]? fieldsScmRepositories = default)
        {
            string path = "/v1/scmProviders/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmProviders != null)
                uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmProviderResponse>(message);
        }

        public class ScmPullRequestResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? title { get; set; }
                    public int? number { get; set; }
                    public string? webUrl { get; set; }
                    public string? sourceRepositoryOwner { get; set; }
                    public string? sourceRepositoryName { get; set; }
                    public string? sourceBranchName { get; set; }
                    public string? destinationRepositoryOwner { get; set; }
                    public string? destinationRepositoryName { get; set; }
                    public string? destinationBranchName { get; set; }
                    public bool? isClosed { get; set; }
                    public bool? isCrossRepository { get; set; }
                }

                public class Relationships
                {
                    public class Repository
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Repository? repository { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmPullRequests";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? lastAccessedDate { get; set; }
                    public string? httpCloneUrl { get; set; }
                    public string? sshCloneUrl { get; set; }
                    public string? ownerName { get; set; }
                    public string? repositoryName { get; set; }
                }

                public class Relationships
                {
                    public class ScmProvider
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmProviders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DefaultBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public ScmProvider? scmProvider { get; set; }
                    public DefaultBranch? defaultBranch { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmRepositories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmPullRequestsFieldsScmPullRequests
        {
            destinationBranchName,
            destinationRepositoryName,
            destinationRepositoryOwner,
            isClosed,
            isCrossRepository,
            number,
            repository,
            sourceBranchName,
            sourceRepositoryName,
            sourceRepositoryOwner,
            title,
            webUrl,
        }



        // /v1/scmPullRequests/{id}
        public Task<ScmPullRequestResponse> GetScmPullRequests(string id, GetScmPullRequestsFieldsScmPullRequests[]? fieldsScmPullRequests = default, string[]? include = default)
        {
            string path = "/v1/scmPullRequests/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmPullRequests != null)
                uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmPullRequestResponse>(message);
        }

        public class ScmRepositoriesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? lastAccessedDate { get; set; }
                    public string? httpCloneUrl { get; set; }
                    public string? sshCloneUrl { get; set; }
                    public string? ownerName { get; set; }
                    public string? repositoryName { get; set; }
                }

                public class Relationships
                {
                    public class ScmProvider
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmProviders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DefaultBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public ScmProvider? scmProvider { get; set; }
                    public DefaultBranch? defaultBranch { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmRepositories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmRepositoriesFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmRepositoriesInclude
        {
            defaultBranch,
            scmProvider,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmRepositoriesFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmRepositoriesFieldsScmPullRequests
        {
            destinationBranchName,
            destinationRepositoryName,
            destinationRepositoryOwner,
            isClosed,
            isCrossRepository,
            number,
            repository,
            sourceBranchName,
            sourceRepositoryName,
            sourceRepositoryOwner,
            title,
            webUrl,
        }


        // /v1/scmRepositories
        public Task<ScmRepositoriesResponse> GetScmRepositories(string[]? filterId = default, GetScmRepositoriesFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, GetScmRepositoriesInclude[]? include = default, GetScmRepositoriesFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetScmRepositoriesFieldsScmPullRequests[]? fieldsScmPullRequests = default)
        {
            string path = "/v1/scmRepositories";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsScmPullRequests != null)
                uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmRepositoriesResponse>(message);
        }

        public class ScmRepositoryResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? lastAccessedDate { get; set; }
                    public string? httpCloneUrl { get; set; }
                    public string? sshCloneUrl { get; set; }
                    public string? ownerName { get; set; }
                    public string? repositoryName { get; set; }
                }

                public class Relationships
                {
                    public class ScmProvider
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmProviders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DefaultBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public ScmProvider? scmProvider { get; set; }
                    public DefaultBranch? defaultBranch { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmRepositories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }





        // /v1/scmRepositories/{id}
        public Task<ScmRepositoryResponse> GetScmRepositories(string id, GetScmRepositoriesFieldsScmRepositories[]? fieldsScmRepositories = default, GetScmRepositoriesInclude[]? include = default, GetScmRepositoriesFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetScmRepositoriesFieldsScmPullRequests[]? fieldsScmPullRequests = default)
        {
            string path = "/v1/scmRepositories/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsScmPullRequests != null)
                uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmRepositoryResponse>(message);
        }

        public class SubscriptionAppStoreReviewScreenshotCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int fileSize { get; set; } = 0;
                    public string fileName { get; set; } = "";
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Subscription subscription { get; set; } = new Subscription();
                }

                public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionAppStoreReviewScreenshotResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public string? assetToken { get; set; }
                    public string? assetType { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    public bool? familySharable { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionPeriod
                    {
                        ONE_WEEK,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public SubscriptionPeriod? subscriptionPeriod { get; set; }
                    public string? reviewNote { get; set; }
                    public int? groupLevel { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class SubscriptionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Group
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IntroductoryOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionIntroductoryOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotionalOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class OfferCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public SubscriptionLocalizations? subscriptionLocalizations { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public Group? group { get; set; }
                    public IntroductoryOffers? introductoryOffers { get; set; }
                    public PromotionalOffers? promotionalOffers { get; set; }
                    public OfferCodes? offerCodes { get; set; }
                    public Prices? prices { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionAppStoreReviewScreenshots
        public Task<SubscriptionAppStoreReviewScreenshotResponse> PostSubscriptionAppStoreReviewScreenshots(SubscriptionAppStoreReviewScreenshotCreateRequest request)
        {
            string path = "/v1/subscriptionAppStoreReviewScreenshots";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionAppStoreReviewScreenshotResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionAppStoreReviewScreenshotsFieldsSubscriptionAppStoreReviewScreenshots
        {
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            subscription,
            uploadOperations,
            uploaded,
        }



        // /v1/subscriptionAppStoreReviewScreenshots/{id}
        public Task<SubscriptionAppStoreReviewScreenshotResponse> GetSubscriptionAppStoreReviewScreenshots(string id, GetSubscriptionAppStoreReviewScreenshotsFieldsSubscriptionAppStoreReviewScreenshots[]? fieldsSubscriptionAppStoreReviewScreenshots = default, string[]? include = default)
        {
            string path = "/v1/subscriptionAppStoreReviewScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
                uriBuilder.AddParameter("fields[subscriptionAppStoreReviewScreenshots]", string.Join(",", fieldsSubscriptionAppStoreReviewScreenshots));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionAppStoreReviewScreenshotResponse>(message);
        }

        public class SubscriptionAppStoreReviewScreenshotUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? sourceFileChecksum { get; set; }
                    public bool? uploaded { get; set; }
                }

                public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/subscriptionAppStoreReviewScreenshots/{id}
        public Task<SubscriptionAppStoreReviewScreenshotResponse> PatchSubscriptionAppStoreReviewScreenshots(string id, SubscriptionAppStoreReviewScreenshotUpdateRequest request)
        {
            string path = "/v1/subscriptionAppStoreReviewScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionAppStoreReviewScreenshotResponse>(message);
        }

        // /v1/subscriptionAppStoreReviewScreenshots/{id}
        public Task DeleteSubscriptionAppStoreReviewScreenshots(string id)
        {
            string path = "/v1/subscriptionAppStoreReviewScreenshots/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class SubscriptionGracePeriodResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? optIn { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionGracePeriods";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGracePeriodsFieldsSubscriptionGracePeriods
        {
            app,
            optIn,
        }


        // /v1/subscriptionGracePeriods/{id}
        public Task<SubscriptionGracePeriodResponse> GetSubscriptionGracePeriods(string id, GetSubscriptionGracePeriodsFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default)
        {
            string path = "/v1/subscriptionGracePeriods/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionGracePeriods != null)
                uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionGracePeriodResponse>(message);
        }

        public class SubscriptionGracePeriodUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? optIn { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                }

                public string type { get; set; } = "subscriptionGracePeriods";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public class Included
            {
                public class Attributes
                {
                    public string bundleId { get; set; } = "";
                    public string sku { get; set; } = "";
                    public string primaryLocale { get; set; } = "";
                }

                public class Relationships
                {
                    public class AppStoreVersions
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersions? appStoreVersions { get; set; }
                    public AppInfos? appInfos { get; set; }
                }

                public string type { get; set; } = "apps";
                public string? id { get; set; }
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        // /v1/subscriptionGracePeriods/{id}
        public Task<SubscriptionGracePeriodResponse> PatchSubscriptionGracePeriods(string id, SubscriptionGracePeriodUpdateRequest request)
        {
            string path = "/v1/subscriptionGracePeriods/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionGracePeriodResponse>(message);
        }

        public class SubscriptionGroupLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public string? customAppName { get; set; }
                    public string locale { get; set; } = "";
                }

                public class Relationships
                {
                    public class SubscriptionGroup
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public SubscriptionGroup subscriptionGroup { get; set; } = new SubscriptionGroup();
                }

                public string type { get; set; } = "subscriptionGroupLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionGroupLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? customAppName { get; set; }
                    public string? locale { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        WAITING_FOR_REVIEW,
                        APPROVED,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class SubscriptionGroup
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public SubscriptionGroup? subscriptionGroup { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionGroupLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? referenceName { get; set; }
                }

                public class Relationships
                {
                    public class Subscriptions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroupLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroupLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscriptions? subscriptions { get; set; }
                    public SubscriptionGroupLocalizations? subscriptionGroupLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionGroups";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionGroupLocalizations
        public Task<SubscriptionGroupLocalizationResponse> PostSubscriptionGroupLocalizations(SubscriptionGroupLocalizationCreateRequest request)
        {
            string path = "/v1/subscriptionGroupLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionGroupLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupLocalizationsFieldsSubscriptionGroupLocalizations
        {
            customAppName,
            locale,
            name,
            state,
            subscriptionGroup,
        }



        // /v1/subscriptionGroupLocalizations/{id}
        public Task<SubscriptionGroupLocalizationResponse> GetSubscriptionGroupLocalizations(string id, GetSubscriptionGroupLocalizationsFieldsSubscriptionGroupLocalizations[]? fieldsSubscriptionGroupLocalizations = default, string[]? include = default)
        {
            string path = "/v1/subscriptionGroupLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionGroupLocalizations != null)
                uriBuilder.AddParameter("fields[subscriptionGroupLocalizations]", string.Join(",", fieldsSubscriptionGroupLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionGroupLocalizationResponse>(message);
        }

        public class SubscriptionGroupLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? customAppName { get; set; }
                }

                public string type { get; set; } = "subscriptionGroupLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/subscriptionGroupLocalizations/{id}
        public Task<SubscriptionGroupLocalizationResponse> PatchSubscriptionGroupLocalizations(string id, SubscriptionGroupLocalizationUpdateRequest request)
        {
            string path = "/v1/subscriptionGroupLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionGroupLocalizationResponse>(message);
        }

        // /v1/subscriptionGroupLocalizations/{id}
        public Task DeleteSubscriptionGroupLocalizations(string id)
        {
            string path = "/v1/subscriptionGroupLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class SubscriptionGroupSubmissionCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class SubscriptionGroup
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public SubscriptionGroup subscriptionGroup { get; set; } = new SubscriptionGroup();
                }

                public string type { get; set; } = "subscriptionGroupSubmissions";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionGroupSubmissionResponse
        {
            public class Data
            {
                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionGroupSubmissions";
                public string id { get; set; } = "";
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionGroupSubmissions
        public Task<SubscriptionGroupSubmissionResponse> PostSubscriptionGroupSubmissions(SubscriptionGroupSubmissionCreateRequest request)
        {
            string path = "/v1/subscriptionGroupSubmissions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionGroupSubmissionResponse>(message);
        }

        public class SubscriptionGroupCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string referenceName { get; set; } = "";
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public App app { get; set; } = new App();
                }

                public string type { get; set; } = "subscriptionGroups";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionGroupResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? referenceName { get; set; }
                }

                public class Relationships
                {
                    public class Subscriptions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroupLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroupLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscriptions? subscriptions { get; set; }
                    public SubscriptionGroupLocalizations? subscriptionGroupLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionGroups";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionGroups
        public Task<SubscriptionGroupResponse> PostSubscriptionGroups(SubscriptionGroupCreateRequest request)
        {
            string path = "/v1/subscriptionGroups";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionGroupResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsFieldsSubscriptionGroups
        {
            app,
            referenceName,
            subscriptionGroupLocalizations,
            subscriptions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsInclude
        {
            subscriptionGroupLocalizations,
            subscriptions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsFieldsSubscriptionGroupLocalizations
        {
            customAppName,
            locale,
            name,
            state,
            subscriptionGroup,
        }




        // /v1/subscriptionGroups/{id}
        public Task<SubscriptionGroupResponse> GetSubscriptionGroups(string id, GetSubscriptionGroupsFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, GetSubscriptionGroupsInclude[]? include = default, GetSubscriptionGroupsFieldsSubscriptions[]? fieldsSubscriptions = default, GetSubscriptionGroupsFieldsSubscriptionGroupLocalizations[]? fieldsSubscriptionGroupLocalizations = default, int? limitSubscriptionGroupLocalizations = default, int? limitSubscriptions = default)
        {
            string path = "/v1/subscriptionGroups/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionGroups != null)
                uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsSubscriptionGroupLocalizations != null)
                uriBuilder.AddParameter("fields[subscriptionGroupLocalizations]", string.Join(",", fieldsSubscriptionGroupLocalizations));
            if (limitSubscriptionGroupLocalizations.HasValue)
                uriBuilder.AddParameter("limit[subscriptionGroupLocalizations]", limitSubscriptionGroupLocalizations.Value.ToString());
            if (limitSubscriptions.HasValue)
                uriBuilder.AddParameter("limit[subscriptions]", limitSubscriptions.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionGroupResponse>(message);
        }

        public class SubscriptionGroupUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? referenceName { get; set; }
                }

                public string type { get; set; } = "subscriptionGroups";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/subscriptionGroups/{id}
        public Task<SubscriptionGroupResponse> PatchSubscriptionGroups(string id, SubscriptionGroupUpdateRequest request)
        {
            string path = "/v1/subscriptionGroups/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionGroupResponse>(message);
        }

        // /v1/subscriptionGroups/{id}
        public Task DeleteSubscriptionGroups(string id)
        {
            string path = "/v1/subscriptionGroups/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class SubscriptionIntroductoryOfferCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? startDate { get; set; }
                    public string? endDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration duration { get; set; } = default;
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode offerMode { get; set; } = default;
                    public int numberOfPeriods { get; set; } = 0;
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Territory
                    {
                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public Subscription subscription { get; set; } = new Subscription();
                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public string type { get; set; } = "subscriptionIntroductoryOffers";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public class Included
            {
                public string type { get; set; } = "subscriptionPricePoints";
                public string? id { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        public class SubscriptionIntroductoryOfferResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? startDate { get; set; }
                    public string? endDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionIntroductoryOffers";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionIntroductoryOffers
        public Task<SubscriptionIntroductoryOfferResponse> PostSubscriptionIntroductoryOffers(SubscriptionIntroductoryOfferCreateRequest request)
        {
            string path = "/v1/subscriptionIntroductoryOffers";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionIntroductoryOfferResponse>(message);
        }

        public class SubscriptionIntroductoryOfferUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? endDate { get; set; }
                }

                public string type { get; set; } = "subscriptionIntroductoryOffers";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/subscriptionIntroductoryOffers/{id}
        public Task<SubscriptionIntroductoryOfferResponse> PatchSubscriptionIntroductoryOffers(string id, SubscriptionIntroductoryOfferUpdateRequest request)
        {
            string path = "/v1/subscriptionIntroductoryOffers/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionIntroductoryOfferResponse>(message);
        }

        // /v1/subscriptionIntroductoryOffers/{id}
        public Task DeleteSubscriptionIntroductoryOffers(string id)
        {
            string path = "/v1/subscriptionIntroductoryOffers/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class SubscriptionLocalizationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public string locale { get; set; } = "";
                    public string? description { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Subscription subscription { get; set; } = new Subscription();
                }

                public string type { get; set; } = "subscriptionLocalizations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionLocalizationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? locale { get; set; }
                    public string? description { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        WAITING_FOR_REVIEW,
                        APPROVED,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    public bool? familySharable { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionPeriod
                    {
                        ONE_WEEK,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public SubscriptionPeriod? subscriptionPeriod { get; set; }
                    public string? reviewNote { get; set; }
                    public int? groupLevel { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class SubscriptionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Group
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IntroductoryOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionIntroductoryOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotionalOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class OfferCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public SubscriptionLocalizations? subscriptionLocalizations { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public Group? group { get; set; }
                    public IntroductoryOffers? introductoryOffers { get; set; }
                    public PromotionalOffers? promotionalOffers { get; set; }
                    public OfferCodes? offerCodes { get; set; }
                    public Prices? prices { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionLocalizations
        public Task<SubscriptionLocalizationResponse> PostSubscriptionLocalizations(SubscriptionLocalizationCreateRequest request)
        {
            string path = "/v1/subscriptionLocalizations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionLocalizationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionLocalizationsFieldsSubscriptionLocalizations
        {
            description,
            locale,
            name,
            state,
            subscription,
        }



        // /v1/subscriptionLocalizations/{id}
        public Task<SubscriptionLocalizationResponse> GetSubscriptionLocalizations(string id, GetSubscriptionLocalizationsFieldsSubscriptionLocalizations[]? fieldsSubscriptionLocalizations = default, string[]? include = default)
        {
            string path = "/v1/subscriptionLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionLocalizations != null)
                uriBuilder.AddParameter("fields[subscriptionLocalizations]", string.Join(",", fieldsSubscriptionLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionLocalizationResponse>(message);
        }

        public class SubscriptionLocalizationUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? description { get; set; }
                }

                public string type { get; set; } = "subscriptionLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/subscriptionLocalizations/{id}
        public Task<SubscriptionLocalizationResponse> PatchSubscriptionLocalizations(string id, SubscriptionLocalizationUpdateRequest request)
        {
            string path = "/v1/subscriptionLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionLocalizationResponse>(message);
        }

        // /v1/subscriptionLocalizations/{id}
        public Task DeleteSubscriptionLocalizations(string id)
        {
            string path = "/v1/subscriptionLocalizations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class SubscriptionOfferCodeCustomCodeCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string customCode { get; set; } = "";
                    public int numberOfCodes { get; set; } = 0;
                    public string? expirationDate { get; set; }
                }

                public class Relationships
                {
                    public class OfferCode
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public OfferCode offerCode { get; set; } = new OfferCode();
                }

                public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionOfferCodeCustomCodeResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? customCode { get; set; }
                    public int? numberOfCodes { get; set; }
                    public string? createdDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class OfferCode
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public OfferCode? offerCode { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CustomerEligibilities
                    {
                        NEW,
                        EXISTING,
                        EXPIRED,
                    }

                    public CustomerEligibilities[]? customerEligibilities { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferEligibility
                    {
                        STACK_WITH_INTRO_OFFERS,
                        REPLACE_INTRO_OFFERS,
                    }
                    public OfferEligibility? offerEligibility { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                    public int? totalNumberOfCodes { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class OneTimeUseCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class CustomCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodePrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public OneTimeUseCodes? oneTimeUseCodes { get; set; }
                    public CustomCodes? customCodes { get; set; }
                    public Prices? prices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionOfferCodeCustomCodes
        public Task<SubscriptionOfferCodeCustomCodeResponse> PostSubscriptionOfferCodeCustomCodes(SubscriptionOfferCodeCustomCodeCreateRequest request)
        {
            string path = "/v1/subscriptionOfferCodeCustomCodes";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionOfferCodeCustomCodeResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodeCustomCodesFieldsSubscriptionOfferCodeCustomCodes
        {
            active,
            createdDate,
            customCode,
            expirationDate,
            numberOfCodes,
            offerCode,
        }



        // /v1/subscriptionOfferCodeCustomCodes/{id}
        public Task<SubscriptionOfferCodeCustomCodeResponse> GetSubscriptionOfferCodeCustomCodes(string id, GetSubscriptionOfferCodeCustomCodesFieldsSubscriptionOfferCodeCustomCodes[]? fieldsSubscriptionOfferCodeCustomCodes = default, string[]? include = default)
        {
            string path = "/v1/subscriptionOfferCodeCustomCodes/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeCustomCodes]", string.Join(",", fieldsSubscriptionOfferCodeCustomCodes));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionOfferCodeCustomCodeResponse>(message);
        }

        public class SubscriptionOfferCodeCustomCodeUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? active { get; set; }
                }

                public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/subscriptionOfferCodeCustomCodes/{id}
        public Task<SubscriptionOfferCodeCustomCodeResponse> PatchSubscriptionOfferCodeCustomCodes(string id, SubscriptionOfferCodeCustomCodeUpdateRequest request)
        {
            string path = "/v1/subscriptionOfferCodeCustomCodes/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionOfferCodeCustomCodeResponse>(message);
        }

        public class SubscriptionOfferCodeOneTimeUseCodeCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public int numberOfCodes { get; set; } = 0;
                    public string expirationDate { get; set; } = "";
                }

                public class Relationships
                {
                    public class OfferCode
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public OfferCode offerCode { get; set; } = new OfferCode();
                }

                public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionOfferCodeOneTimeUseCodeResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public int? numberOfCodes { get; set; }
                    public string? createdDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class OfferCode
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public OfferCode? offerCode { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CustomerEligibilities
                    {
                        NEW,
                        EXISTING,
                        EXPIRED,
                    }

                    public CustomerEligibilities[]? customerEligibilities { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferEligibility
                    {
                        STACK_WITH_INTRO_OFFERS,
                        REPLACE_INTRO_OFFERS,
                    }
                    public OfferEligibility? offerEligibility { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                    public int? totalNumberOfCodes { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class OneTimeUseCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class CustomCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodePrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public OneTimeUseCodes? oneTimeUseCodes { get; set; }
                    public CustomCodes? customCodes { get; set; }
                    public Prices? prices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionOfferCodeOneTimeUseCodes
        public Task<SubscriptionOfferCodeOneTimeUseCodeResponse> PostSubscriptionOfferCodeOneTimeUseCodes(SubscriptionOfferCodeOneTimeUseCodeCreateRequest request)
        {
            string path = "/v1/subscriptionOfferCodeOneTimeUseCodes";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionOfferCodeOneTimeUseCodeResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodeOneTimeUseCodesFieldsSubscriptionOfferCodeOneTimeUseCodes
        {
            active,
            createdDate,
            expirationDate,
            numberOfCodes,
            offerCode,
            values,
        }




        // /v1/subscriptionOfferCodeOneTimeUseCodes/{id}
        public Task<SubscriptionOfferCodeOneTimeUseCodeResponse> GetSubscriptionOfferCodeOneTimeUseCodes(string id, GetSubscriptionOfferCodeOneTimeUseCodesFieldsSubscriptionOfferCodeOneTimeUseCodes[]? fieldsSubscriptionOfferCodeOneTimeUseCodes = default, string[]? include = default, string[]? fieldsSubscriptionOfferCodeOneTimeUseCodeValues = default)
        {
            string path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodes]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsSubscriptionOfferCodeOneTimeUseCodeValues != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodeValues]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodeValues));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionOfferCodeOneTimeUseCodeResponse>(message);
        }

        public class SubscriptionOfferCodeOneTimeUseCodeUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? active { get; set; }
                }

                public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/subscriptionOfferCodeOneTimeUseCodes/{id}
        public Task<SubscriptionOfferCodeOneTimeUseCodeResponse> PatchSubscriptionOfferCodeOneTimeUseCodes(string id, SubscriptionOfferCodeOneTimeUseCodeUpdateRequest request)
        {
            string path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionOfferCodeOneTimeUseCodeResponse>(message);
        }

        public class SubscriptionOfferCodeCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CustomerEligibilities
                    {
                        NEW,
                        EXISTING,
                        EXPIRED,
                    }

                    public CustomerEligibilities[] customerEligibilities { get; set; } = { };
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferEligibility
                    {
                        STACK_WITH_INTRO_OFFERS,
                        REPLACE_INTRO_OFFERS,
                    }
                    public OfferEligibility offerEligibility { get; set; } = default;
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration duration { get; set; } = default;
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode offerMode { get; set; } = default;
                    public int numberOfPeriods { get; set; } = 0;
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Prices
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodePrices";
                            public string id { get; set; } = "";
                        }

                        public Data[] data { get; set; } = { };
                    }

                    public Subscription subscription { get; set; } = new Subscription();
                    public Prices prices { get; set; } = new Prices();
                }

                public string type { get; set; } = "subscriptionOfferCodes";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public class Included
            {
                public class Relationships
                {
                    public class Territory
                    {
                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public string type { get; set; } = "subscriptionOfferCodePrices";
                public string? id { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        public class SubscriptionOfferCodeResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CustomerEligibilities
                    {
                        NEW,
                        EXISTING,
                        EXPIRED,
                    }

                    public CustomerEligibilities[]? customerEligibilities { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferEligibility
                    {
                        STACK_WITH_INTRO_OFFERS,
                        REPLACE_INTRO_OFFERS,
                    }
                    public OfferEligibility? offerEligibility { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                    public int? totalNumberOfCodes { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class OneTimeUseCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class CustomCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodePrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public OneTimeUseCodes? oneTimeUseCodes { get; set; }
                    public CustomCodes? customCodes { get; set; }
                    public Prices? prices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionOfferCodes
        public Task<SubscriptionOfferCodeResponse> PostSubscriptionOfferCodes(SubscriptionOfferCodeCreateRequest request)
        {
            string path = "/v1/subscriptionOfferCodes";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionOfferCodeResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesFieldsSubscriptionOfferCodes
        {
            active,
            customCodes,
            customerEligibilities,
            duration,
            name,
            numberOfPeriods,
            offerEligibility,
            offerMode,
            oneTimeUseCodes,
            prices,
            subscription,
            totalNumberOfCodes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesInclude
        {
            customCodes,
            oneTimeUseCodes,
            prices,
            subscription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesFieldsSubscriptionOfferCodeCustomCodes
        {
            active,
            createdDate,
            customCode,
            expirationDate,
            numberOfCodes,
            offerCode,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesFieldsSubscriptionOfferCodeOneTimeUseCodes
        {
            active,
            createdDate,
            expirationDate,
            numberOfCodes,
            offerCode,
            values,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesFieldsSubscriptionOfferCodePrices
        {
            subscriptionPricePoint,
            territory,
        }





        // /v1/subscriptionOfferCodes/{id}
        public Task<SubscriptionOfferCodeResponse> GetSubscriptionOfferCodes(string id, GetSubscriptionOfferCodesFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, GetSubscriptionOfferCodesInclude[]? include = default, GetSubscriptionOfferCodesFieldsSubscriptionOfferCodeCustomCodes[]? fieldsSubscriptionOfferCodeCustomCodes = default, GetSubscriptionOfferCodesFieldsSubscriptionOfferCodeOneTimeUseCodes[]? fieldsSubscriptionOfferCodeOneTimeUseCodes = default, GetSubscriptionOfferCodesFieldsSubscriptionOfferCodePrices[]? fieldsSubscriptionOfferCodePrices = default, int? limitCustomCodes = default, int? limitOneTimeUseCodes = default, int? limitPrices = default)
        {
            string path = "/v1/subscriptionOfferCodes/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionOfferCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeCustomCodes]", string.Join(",", fieldsSubscriptionOfferCodeCustomCodes));
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodes]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            if (fieldsSubscriptionOfferCodePrices != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodePrices]", string.Join(",", fieldsSubscriptionOfferCodePrices));
            if (limitCustomCodes.HasValue)
                uriBuilder.AddParameter("limit[customCodes]", limitCustomCodes.Value.ToString());
            if (limitOneTimeUseCodes.HasValue)
                uriBuilder.AddParameter("limit[oneTimeUseCodes]", limitOneTimeUseCodes.Value.ToString());
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionOfferCodeResponse>(message);
        }

        public class SubscriptionOfferCodeUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? active { get; set; }
                }

                public string type { get; set; } = "subscriptionOfferCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/subscriptionOfferCodes/{id}
        public Task<SubscriptionOfferCodeResponse> PatchSubscriptionOfferCodes(string id, SubscriptionOfferCodeUpdateRequest request)
        {
            string path = "/v1/subscriptionOfferCodes/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionOfferCodeResponse>(message);
        }

        public class SubscriptionPricePointResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? customerPrice { get; set; }
                    public string? proceeds { get; set; }
                    public string? proceedsYear2 { get; set; }
                }

                public class Relationships
                {
                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionPricePoints";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? currency { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "territories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionPricePointsFieldsSubscriptionPricePoints
        {
            customerPrice,
            equalizations,
            proceeds,
            proceedsYear2,
            subscription,
            territory,
        }



        // /v1/subscriptionPricePoints/{id}
        public Task<SubscriptionPricePointResponse> GetSubscriptionPricePoints(string id, GetSubscriptionPricePointsFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, string[]? include = default)
        {
            string path = "/v1/subscriptionPricePoints/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionPricePoints != null)
                uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionPricePointResponse>(message);
        }

        public class SubscriptionPriceCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? startDate { get; set; }
                    public bool? preserveCurrentPrice { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Territory
                    {
                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Subscription subscription { get; set; } = new Subscription();
                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint subscriptionPricePoint { get; set; } = new SubscriptionPricePoint();
                }

                public string type { get; set; } = "subscriptionPrices";
                public Attributes? attributes { get; set; }
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionPriceResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? startDate { get; set; }
                    public bool? preserved { get; set; }
                }

                public class Relationships
                {
                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionPrices";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionPrices
        public Task<SubscriptionPriceResponse> PostSubscriptionPrices(SubscriptionPriceCreateRequest request)
        {
            string path = "/v1/subscriptionPrices";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionPriceResponse>(message);
        }

        // /v1/subscriptionPrices/{id}
        public Task DeleteSubscriptionPrices(string id)
        {
            string path = "/v1/subscriptionPrices/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class SubscriptionPromotionalOfferCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public string offerCode { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration duration { get; set; } = default;
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode offerMode { get; set; } = default;
                    public int numberOfPeriods { get; set; } = 0;
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public class Prices
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOfferPrices";
                            public string id { get; set; } = "";
                        }

                        public Data[] data { get; set; } = { };
                    }

                    public Subscription subscription { get; set; } = new Subscription();
                    public Prices prices { get; set; } = new Prices();
                }

                public string type { get; set; } = "subscriptionPromotionalOffers";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public class Included
            {
                public class Relationships
                {
                    public class Territory
                    {
                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public string type { get; set; } = "subscriptionPromotionalOfferPrices";
                public string? id { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        public class SubscriptionPromotionalOfferResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? offerCode { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOfferPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public Prices? prices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionPromotionalOffers";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionPromotionalOffers
        public Task<SubscriptionPromotionalOfferResponse> PostSubscriptionPromotionalOffers(SubscriptionPromotionalOfferCreateRequest request)
        {
            string path = "/v1/subscriptionPromotionalOffers";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionPromotionalOfferResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionPromotionalOffersFieldsSubscriptionPromotionalOffers
        {
            duration,
            name,
            numberOfPeriods,
            offerCode,
            offerMode,
            prices,
            subscription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionPromotionalOffersInclude
        {
            prices,
            subscription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionPromotionalOffersFieldsSubscriptionPromotionalOfferPrices
        {
            subscriptionPricePoint,
            territory,
        }



        // /v1/subscriptionPromotionalOffers/{id}
        public Task<SubscriptionPromotionalOfferResponse> GetSubscriptionPromotionalOffers(string id, GetSubscriptionPromotionalOffersFieldsSubscriptionPromotionalOffers[]? fieldsSubscriptionPromotionalOffers = default, GetSubscriptionPromotionalOffersInclude[]? include = default, GetSubscriptionPromotionalOffersFieldsSubscriptionPromotionalOfferPrices[]? fieldsSubscriptionPromotionalOfferPrices = default, int? limitPrices = default)
        {
            string path = "/v1/subscriptionPromotionalOffers/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionPromotionalOffers != null)
                uriBuilder.AddParameter("fields[subscriptionPromotionalOffers]", string.Join(",", fieldsSubscriptionPromotionalOffers));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsSubscriptionPromotionalOfferPrices != null)
                uriBuilder.AddParameter("fields[subscriptionPromotionalOfferPrices]", string.Join(",", fieldsSubscriptionPromotionalOfferPrices));
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionPromotionalOfferResponse>(message);
        }

        public class SubscriptionPromotionalOfferUpdateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class Prices
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOfferPrices";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public Prices? prices { get; set; }
                }

                public string type { get; set; } = "subscriptionPromotionalOffers";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
            }

            public class Included
            {
                public class Relationships
                {
                    public class Territory
                    {
                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public string type { get; set; } = "subscriptionPromotionalOfferPrices";
                public string? id { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        // /v1/subscriptionPromotionalOffers/{id}
        public Task<SubscriptionPromotionalOfferResponse> PatchSubscriptionPromotionalOffers(string id, SubscriptionPromotionalOfferUpdateRequest request)
        {
            string path = "/v1/subscriptionPromotionalOffers/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionPromotionalOfferResponse>(message);
        }

        // /v1/subscriptionPromotionalOffers/{id}
        public Task DeleteSubscriptionPromotionalOffers(string id)
        {
            string path = "/v1/subscriptionPromotionalOffers/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class SubscriptionSubmissionCreateRequest
        {
            public class Data
            {
                public class Relationships
                {
                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Subscription subscription { get; set; } = new Subscription();
                }

                public string type { get; set; } = "subscriptionSubmissions";
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionSubmissionResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionSubmissions";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    public bool? familySharable { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionPeriod
                    {
                        ONE_WEEK,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public SubscriptionPeriod? subscriptionPeriod { get; set; }
                    public string? reviewNote { get; set; }
                    public int? groupLevel { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class SubscriptionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Group
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IntroductoryOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionIntroductoryOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotionalOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class OfferCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public SubscriptionLocalizations? subscriptionLocalizations { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public Group? group { get; set; }
                    public IntroductoryOffers? introductoryOffers { get; set; }
                    public PromotionalOffers? promotionalOffers { get; set; }
                    public OfferCodes? offerCodes { get; set; }
                    public Prices? prices { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptionSubmissions
        public Task<SubscriptionSubmissionResponse> PostSubscriptionSubmissions(SubscriptionSubmissionCreateRequest request)
        {
            string path = "/v1/subscriptionSubmissions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionSubmissionResponse>(message);
        }

        public class SubscriptionCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public string productId { get; set; } = "";
                    public bool? familySharable { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionPeriod
                    {
                        ONE_WEEK,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public SubscriptionPeriod? subscriptionPeriod { get; set; }
                    public string? reviewNote { get; set; }
                    public int? groupLevel { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class Group
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Data data { get; set; } = new Data();
                    }

                    public Group group { get; set; } = new Group();
                }

                public string type { get; set; } = "subscriptions";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships relationships { get; set; } = new Relationships();
            }

            public Data data { get; set; } = new Data();
        }

        public class SubscriptionResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    public bool? familySharable { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionPeriod
                    {
                        ONE_WEEK,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public SubscriptionPeriod? subscriptionPeriod { get; set; }
                    public string? reviewNote { get; set; }
                    public int? groupLevel { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class SubscriptionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Group
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IntroductoryOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionIntroductoryOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotionalOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class OfferCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public SubscriptionLocalizations? subscriptionLocalizations { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public Group? group { get; set; }
                    public IntroductoryOffers? introductoryOffers { get; set; }
                    public PromotionalOffers? promotionalOffers { get; set; }
                    public OfferCodes? offerCodes { get; set; }
                    public Prices? prices { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/subscriptions
        public Task<SubscriptionResponse> PostSubscriptions(SubscriptionCreateRequest request)
        {
            string path = "/v1/subscriptions";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsInclude
        {
            appStoreReviewScreenshot,
            group,
            introductoryOffers,
            offerCodes,
            prices,
            promotedPurchase,
            promotionalOffers,
            subscriptionLocalizations,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsSubscriptionPricePoints
        {
            customerPrice,
            equalizations,
            proceeds,
            proceedsYear2,
            subscription,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsSubscriptionPromotionalOffers
        {
            duration,
            name,
            numberOfPeriods,
            offerCode,
            offerMode,
            prices,
            subscription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsSubscriptionOfferCodes
        {
            active,
            customCodes,
            customerEligibilities,
            duration,
            name,
            numberOfPeriods,
            offerEligibility,
            offerMode,
            oneTimeUseCodes,
            prices,
            subscription,
            totalNumberOfCodes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsSubscriptionAppStoreReviewScreenshots
        {
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            subscription,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsSubscriptionPrices
        {
            preserveCurrentPrice,
            preserved,
            startDate,
            subscription,
            subscriptionPricePoint,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsSubscriptionIntroductoryOffers
        {
            duration,
            endDate,
            numberOfPeriods,
            offerMode,
            startDate,
            subscription,
            subscriptionPricePoint,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsFieldsSubscriptionLocalizations
        {
            description,
            locale,
            name,
            state,
            subscription,
        }







        // /v1/subscriptions/{id}
        public Task<SubscriptionResponse> GetSubscriptions(string id, GetSubscriptionsFieldsSubscriptions[]? fieldsSubscriptions = default, GetSubscriptionsInclude[]? include = default, GetSubscriptionsFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetSubscriptionsFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, GetSubscriptionsFieldsSubscriptionPromotionalOffers[]? fieldsSubscriptionPromotionalOffers = default, GetSubscriptionsFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, GetSubscriptionsFieldsSubscriptionAppStoreReviewScreenshots[]? fieldsSubscriptionAppStoreReviewScreenshots = default, GetSubscriptionsFieldsSubscriptionPrices[]? fieldsSubscriptionPrices = default, GetSubscriptionsFieldsSubscriptionIntroductoryOffers[]? fieldsSubscriptionIntroductoryOffers = default, GetSubscriptionsFieldsSubscriptionLocalizations[]? fieldsSubscriptionLocalizations = default, int? limitIntroductoryOffers = default, int? limitOfferCodes = default, int? limitPrices = default, int? limitPromotionalOffers = default, int? limitSubscriptionLocalizations = default)
        {
            string path = "/v1/subscriptions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsSubscriptionPricePoints != null)
                uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
            if (fieldsSubscriptionPromotionalOffers != null)
                uriBuilder.AddParameter("fields[subscriptionPromotionalOffers]", string.Join(",", fieldsSubscriptionPromotionalOffers));
            if (fieldsSubscriptionOfferCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
                uriBuilder.AddParameter("fields[subscriptionAppStoreReviewScreenshots]", string.Join(",", fieldsSubscriptionAppStoreReviewScreenshots));
            if (fieldsSubscriptionPrices != null)
                uriBuilder.AddParameter("fields[subscriptionPrices]", string.Join(",", fieldsSubscriptionPrices));
            if (fieldsSubscriptionIntroductoryOffers != null)
                uriBuilder.AddParameter("fields[subscriptionIntroductoryOffers]", string.Join(",", fieldsSubscriptionIntroductoryOffers));
            if (fieldsSubscriptionLocalizations != null)
                uriBuilder.AddParameter("fields[subscriptionLocalizations]", string.Join(",", fieldsSubscriptionLocalizations));
            if (limitIntroductoryOffers.HasValue)
                uriBuilder.AddParameter("limit[introductoryOffers]", limitIntroductoryOffers.Value.ToString());
            if (limitOfferCodes.HasValue)
                uriBuilder.AddParameter("limit[offerCodes]", limitOfferCodes.Value.ToString());
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
            if (limitPromotionalOffers.HasValue)
                uriBuilder.AddParameter("limit[promotionalOffers]", limitPromotionalOffers.Value.ToString());
            if (limitSubscriptionLocalizations.HasValue)
                uriBuilder.AddParameter("limit[subscriptionLocalizations]", limitSubscriptionLocalizations.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionResponse>(message);
        }

        public class SubscriptionUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public bool? familySharable { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionPeriod
                    {
                        ONE_WEEK,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public SubscriptionPeriod? subscriptionPeriod { get; set; }
                    public string? reviewNote { get; set; }
                    public int? groupLevel { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class IntroductoryOffers
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionIntroductoryOffers";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class PromotionalOffers
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOffers";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPrices";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public IntroductoryOffers? introductoryOffers { get; set; }
                    public PromotionalOffers? promotionalOffers { get; set; }
                    public Prices? prices { get; set; }
                }

                public string type { get; set; } = "subscriptions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public class Included
            {
                public class Attributes
                {
                    public string name { get; set; } = "";
                    public string offerCode { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration duration { get; set; } = default;
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode offerMode { get; set; } = default;
                    public int numberOfPeriods { get; set; } = 0;
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOfferPrices";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public Prices? prices { get; set; }
                }

                public string type { get; set; } = "subscriptionPromotionalOffers";
                public string? id { get; set; }
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
        }

        // /v1/subscriptions/{id}
        public Task<SubscriptionResponse> PatchSubscriptions(string id, SubscriptionUpdateRequest request)
        {
            string path = "/v1/subscriptions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<SubscriptionResponse>(message);
        }

        // /v1/subscriptions/{id}
        public Task DeleteSubscriptions(string id)
        {
            string path = "/v1/subscriptions/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class TerritoriesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? currency { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "territories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        // /v1/territories
        public Task<TerritoriesResponse> GetTerritories(string[]? fieldsTerritories = default, int? limit = default)
        {
            string path = "/v1/territories";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<TerritoriesResponse>(message);
        }

        public class UserInvitationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? email { get; set; }
                    public string? firstName { get; set; }
                    public string? lastName { get; set; }
                    public string? expirationDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Roles
                    {
                        ADMIN,
                        FINANCE,
                        ACCOUNT_HOLDER,
                        SALES,
                        MARKETING,
                        APP_MANAGER,
                        DEVELOPER,
                        ACCESS_TO_REPORTS,
                        CUSTOMER_SUPPORT,
                        IMAGE_MANAGER,
                        CREATE_APPS,
                        CLOUD_MANAGED_DEVELOPER_ID,
                        CLOUD_MANAGED_APP_DISTRIBUTION,
                    }

                    public Roles[]? roles { get; set; }
                    public bool? allAppsVisible { get; set; }
                    public bool? provisioningAllowed { get; set; }
                }

                public class Relationships
                {
                    public class VisibleApps
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public VisibleApps? visibleApps { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "userInvitations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUserInvitationsFilterRoles
        {
            ADMIN,
            FINANCE,
            ACCOUNT_HOLDER,
            SALES,
            MARKETING,
            APP_MANAGER,
            DEVELOPER,
            ACCESS_TO_REPORTS,
            CUSTOMER_SUPPORT,
            IMAGE_MANAGER,
            CREATE_APPS,
            CLOUD_MANAGED_DEVELOPER_ID,
            CLOUD_MANAGED_APP_DISTRIBUTION,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUserInvitationsSort
        {
            email,
            [EnumMember(Value = "-email")]
            emailDescending,
            lastName,
            [EnumMember(Value = "-lastName")]
            lastNameDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUserInvitationsFieldsUserInvitations
        {
            allAppsVisible,
            email,
            expirationDate,
            firstName,
            lastName,
            provisioningAllowed,
            roles,
            visibleApps,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUserInvitationsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }



        // /v1/userInvitations
        public Task<UserInvitationsResponse> GetUserInvitations(string[]? filterEmail = default, GetUserInvitationsFilterRoles[]? filterRoles = default, string[]? filterVisibleApps = default, GetUserInvitationsSort[]? sort = default, GetUserInvitationsFieldsUserInvitations[]? fieldsUserInvitations = default, int? limit = default, string[]? include = default, GetUserInvitationsFieldsApps[]? fieldsApps = default, int? limitVisibleApps = default)
        {
            string path = "/v1/userInvitations";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterEmail != null)
                uriBuilder.AddParameter("filter[email]", string.Join(",", filterEmail));
            if (filterRoles != null)
                uriBuilder.AddParameter("filter[roles]", string.Join(",", filterRoles));
            if (filterVisibleApps != null)
                uriBuilder.AddParameter("filter[visibleApps]", string.Join(",", filterVisibleApps));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsUserInvitations != null)
                uriBuilder.AddParameter("fields[userInvitations]", string.Join(",", fieldsUserInvitations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limitVisibleApps.HasValue)
                uriBuilder.AddParameter("limit[visibleApps]", limitVisibleApps.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<UserInvitationsResponse>(message);
        }

        public class UserInvitationCreateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    public string email { get; set; } = "";
                    public string firstName { get; set; } = "";
                    public string lastName { get; set; } = "";
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Roles
                    {
                        ADMIN,
                        FINANCE,
                        ACCOUNT_HOLDER,
                        SALES,
                        MARKETING,
                        APP_MANAGER,
                        DEVELOPER,
                        ACCESS_TO_REPORTS,
                        CUSTOMER_SUPPORT,
                        IMAGE_MANAGER,
                        CREATE_APPS,
                        CLOUD_MANAGED_DEVELOPER_ID,
                        CLOUD_MANAGED_APP_DISTRIBUTION,
                    }

                    public Roles[] roles { get; set; } = { };
                    public bool? allAppsVisible { get; set; }
                    public bool? provisioningAllowed { get; set; }
                }

                public class Relationships
                {
                    public class VisibleApps
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public VisibleApps? visibleApps { get; set; }
                }

                public string type { get; set; } = "userInvitations";
                public Attributes attributes { get; set; } = new Attributes();
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        public class UserInvitationResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? email { get; set; }
                    public string? firstName { get; set; }
                    public string? lastName { get; set; }
                    public string? expirationDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Roles
                    {
                        ADMIN,
                        FINANCE,
                        ACCOUNT_HOLDER,
                        SALES,
                        MARKETING,
                        APP_MANAGER,
                        DEVELOPER,
                        ACCESS_TO_REPORTS,
                        CUSTOMER_SUPPORT,
                        IMAGE_MANAGER,
                        CREATE_APPS,
                        CLOUD_MANAGED_DEVELOPER_ID,
                        CLOUD_MANAGED_APP_DISTRIBUTION,
                    }

                    public Roles[]? roles { get; set; }
                    public bool? allAppsVisible { get; set; }
                    public bool? provisioningAllowed { get; set; }
                }

                public class Relationships
                {
                    public class VisibleApps
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public VisibleApps? visibleApps { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "userInvitations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }

        // /v1/userInvitations
        public Task<UserInvitationResponse> PostUserInvitations(UserInvitationCreateRequest request)
        {
            string path = "/v1/userInvitations";
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<UserInvitationResponse>(message);
        }





        // /v1/userInvitations/{id}
        public Task<UserInvitationResponse> GetUserInvitations(string id, GetUserInvitationsFieldsUserInvitations[]? fieldsUserInvitations = default, string[]? include = default, GetUserInvitationsFieldsApps[]? fieldsApps = default, int? limitVisibleApps = default)
        {
            string path = "/v1/userInvitations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsUserInvitations != null)
                uriBuilder.AddParameter("fields[userInvitations]", string.Join(",", fieldsUserInvitations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limitVisibleApps.HasValue)
                uriBuilder.AddParameter("limit[visibleApps]", limitVisibleApps.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<UserInvitationResponse>(message);
        }

        // /v1/userInvitations/{id}
        public Task DeleteUserInvitations(string id)
        {
            string path = "/v1/userInvitations/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class UsersResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? username { get; set; }
                    public string? firstName { get; set; }
                    public string? lastName { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Roles
                    {
                        ADMIN,
                        FINANCE,
                        ACCOUNT_HOLDER,
                        SALES,
                        MARKETING,
                        APP_MANAGER,
                        DEVELOPER,
                        ACCESS_TO_REPORTS,
                        CUSTOMER_SUPPORT,
                        IMAGE_MANAGER,
                        CREATE_APPS,
                        CLOUD_MANAGED_DEVELOPER_ID,
                        CLOUD_MANAGED_APP_DISTRIBUTION,
                    }

                    public Roles[]? roles { get; set; }
                    public bool? allAppsVisible { get; set; }
                    public bool? provisioningAllowed { get; set; }
                }

                public class Relationships
                {
                    public class VisibleApps
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public VisibleApps? visibleApps { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "users";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUsersFilterRoles
        {
            ADMIN,
            FINANCE,
            ACCOUNT_HOLDER,
            SALES,
            MARKETING,
            APP_MANAGER,
            DEVELOPER,
            ACCESS_TO_REPORTS,
            CUSTOMER_SUPPORT,
            IMAGE_MANAGER,
            CREATE_APPS,
            CLOUD_MANAGED_DEVELOPER_ID,
            CLOUD_MANAGED_APP_DISTRIBUTION,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUsersSort
        {
            lastName,
            [EnumMember(Value = "-lastName")]
            lastNameDescending,
            username,
            [EnumMember(Value = "-username")]
            usernameDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUsersFieldsUsers
        {
            allAppsVisible,
            firstName,
            lastName,
            provisioningAllowed,
            roles,
            username,
            visibleApps,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUsersFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }



        // /v1/users
        public Task<UsersResponse> GetUsers(GetUsersFilterRoles[]? filterRoles = default, string[]? filterUsername = default, string[]? filterVisibleApps = default, GetUsersSort[]? sort = default, GetUsersFieldsUsers[]? fieldsUsers = default, int? limit = default, string[]? include = default, GetUsersFieldsApps[]? fieldsApps = default, int? limitVisibleApps = default)
        {
            string path = "/v1/users";
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterRoles != null)
                uriBuilder.AddParameter("filter[roles]", string.Join(",", filterRoles));
            if (filterUsername != null)
                uriBuilder.AddParameter("filter[username]", string.Join(",", filterUsername));
            if (filterVisibleApps != null)
                uriBuilder.AddParameter("filter[visibleApps]", string.Join(",", filterVisibleApps));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsUsers != null)
                uriBuilder.AddParameter("fields[users]", string.Join(",", fieldsUsers));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limitVisibleApps.HasValue)
                uriBuilder.AddParameter("limit[visibleApps]", limitVisibleApps.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<UsersResponse>(message);
        }

        public class UserResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? username { get; set; }
                    public string? firstName { get; set; }
                    public string? lastName { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Roles
                    {
                        ADMIN,
                        FINANCE,
                        ACCOUNT_HOLDER,
                        SALES,
                        MARKETING,
                        APP_MANAGER,
                        DEVELOPER,
                        ACCESS_TO_REPORTS,
                        CUSTOMER_SUPPORT,
                        IMAGE_MANAGER,
                        CREATE_APPS,
                        CLOUD_MANAGED_DEVELOPER_ID,
                        CLOUD_MANAGED_APP_DISTRIBUTION,
                    }

                    public Roles[]? roles { get; set; }
                    public bool? allAppsVisible { get; set; }
                    public bool? provisioningAllowed { get; set; }
                }

                public class Relationships
                {
                    public class VisibleApps
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public VisibleApps? visibleApps { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "users";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
        }





        // /v1/users/{id}
        public Task<UserResponse> GetUsers(string id, GetUsersFieldsUsers[]? fieldsUsers = default, string[]? include = default, GetUsersFieldsApps[]? fieldsApps = default, int? limitVisibleApps = default)
        {
            string path = "/v1/users/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsUsers != null)
                uriBuilder.AddParameter("fields[users]", string.Join(",", fieldsUsers));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limitVisibleApps.HasValue)
                uriBuilder.AddParameter("limit[visibleApps]", limitVisibleApps.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<UserResponse>(message);
        }

        public class UserUpdateRequest
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Roles
                    {
                        ADMIN,
                        FINANCE,
                        ACCOUNT_HOLDER,
                        SALES,
                        MARKETING,
                        APP_MANAGER,
                        DEVELOPER,
                        ACCESS_TO_REPORTS,
                        CUSTOMER_SUPPORT,
                        IMAGE_MANAGER,
                        CREATE_APPS,
                        CLOUD_MANAGED_DEVELOPER_ID,
                        CLOUD_MANAGED_APP_DISTRIBUTION,
                    }

                    public Roles[]? roles { get; set; }
                    public bool? allAppsVisible { get; set; }
                    public bool? provisioningAllowed { get; set; }
                }

                public class Relationships
                {
                    public class VisibleApps
                    {
                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Data[]? data { get; set; }
                    }

                    public VisibleApps? visibleApps { get; set; }
                }

                public string type { get; set; } = "users";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/users/{id}
        public Task<UserResponse> PatchUsers(string id, UserUpdateRequest request)
        {
            string path = "/v1/users/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync<UserResponse>(message);
        }

        // /v1/users/{id}
        public Task DeleteUsers(string id)
        {
            string path = "/v1/users/{id}";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCategoriesParentFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }


        // /v1/appCategories/{id}/parent
        public Task<AppCategoryResponse> GetAppCategoriesParent(string id, GetAppCategoriesParentFieldsAppCategories[]? fieldsAppCategories = default)
        {
            string path = "/v1/appCategories/{id}/parent";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoryResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCategoriesSubcategoriesFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }



        // /v1/appCategories/{id}/subcategories
        public Task<AppCategoriesResponse> GetAppCategoriesSubcategories(string id, GetAppCategoriesSubcategoriesFieldsAppCategories[]? fieldsAppCategories = default, int? limit = default)
        {
            string path = "/v1/appCategories/{id}/subcategories";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoriesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperienceLocalizationsAppClipHeaderImageFieldsAppClipHeaderImages
        {
            appClipDefaultExperienceLocalization,
            assetDeliveryState,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperienceLocalizationsAppClipHeaderImageFieldsAppClipDefaultExperienceLocalizations
        {
            appClipDefaultExperience,
            appClipHeaderImage,
            locale,
            subtitle,
        }



        // /v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage
        public Task<AppClipHeaderImageResponse> GetAppClipDefaultExperienceLocalizationsAppClipHeaderImage(string id, GetAppClipDefaultExperienceLocalizationsAppClipHeaderImageFieldsAppClipHeaderImages[]? fieldsAppClipHeaderImages = default, GetAppClipDefaultExperienceLocalizationsAppClipHeaderImageFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, string[]? include = default)
        {
            string path = "/v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipHeaderImages != null)
                uriBuilder.AddParameter("fields[appClipHeaderImages]", string.Join(",", fieldsAppClipHeaderImages));
            if (fieldsAppClipDefaultExperienceLocalizations != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipHeaderImageResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesAppClipAppStoreReviewDetailFieldsAppClipAppStoreReviewDetails
        {
            appClipDefaultExperience,
            invocationUrls,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesAppClipAppStoreReviewDetailFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }



        // /v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail
        public Task<AppClipAppStoreReviewDetailResponse> GetAppClipDefaultExperiencesAppClipAppStoreReviewDetail(string id, GetAppClipDefaultExperiencesAppClipAppStoreReviewDetailFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, GetAppClipDefaultExperiencesAppClipAppStoreReviewDetailFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, string[]? include = default)
        {
            string path = "/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipAppStoreReviewDetailResponse>(message);
        }

        public class AppClipDefaultExperienceLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? subtitle { get; set; }
                }

                public class Relationships
                {
                    public class AppClipDefaultExperience
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipHeaderImage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipHeaderImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                    public AppClipHeaderImage? appClipHeaderImage { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsFieldsAppClipDefaultExperienceLocalizations
        {
            appClipDefaultExperience,
            appClipHeaderImage,
            locale,
            subtitle,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsFieldsAppClipHeaderImages
        {
            appClipDefaultExperienceLocalization,
            assetDeliveryState,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsInclude
        {
            appClipDefaultExperience,
            appClipHeaderImage,
        }


        // /v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations
        public Task<AppClipDefaultExperienceLocalizationsResponse> GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizations(string id, string[]? filterLocale = default, GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsFieldsAppClipHeaderImages[]? fieldsAppClipHeaderImages = default, int? limit = default, GetAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsInclude[]? include = default)
        {
            string path = "/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterLocale != null)
                uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (fieldsAppClipDefaultExperienceLocalizations != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
            if (fieldsAppClipHeaderImages != null)
                uriBuilder.AddParameter("fields[appClipHeaderImages]", string.Join(",", fieldsAppClipHeaderImages));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipDefaultExperienceLocalizationsResponse>(message);
        }

        public class GetAppClipDefaultExperiencesReleaseWithAppStoreVersionResponse
        {
            public class Data
            {
                public string type { get; set; } = "appStoreVersions";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion
        public Task<GetAppClipDefaultExperiencesReleaseWithAppStoreVersionResponse> GetAppClipDefaultExperiencesReleaseWithAppStoreVersion(string id)
        {
            string path = "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetAppClipDefaultExperiencesReleaseWithAppStoreVersionResponse>(message);
        }

        public class PatchAppClipDefaultExperiencesReleaseWithAppStoreVersionRequest
        {
            public class Data
            {
                public string type { get; set; } = "appStoreVersions";
                public string id { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion
        public Task PatchAppClipDefaultExperiencesReleaseWithAppStoreVersion(string id, PatchAppClipDefaultExperiencesReleaseWithAppStoreVersionRequest request)
        {
            string path = "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreVersionExperiments
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
            endDate,
            name,
            reviewRequired,
            startDate,
            started,
            state,
            trafficProportion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAgeRatingDeclarations
        {
            alcoholTobaccoOrDrugUseOrReferences,
            contests,
            gambling,
            gamblingAndContests,
            gamblingSimulated,
            horrorOrFearThemes,
            kidsAgeBand,
            matureOrSuggestiveThemes,
            medicalOrTreatmentInformation,
            profanityOrCrudeHumor,
            seventeenPlus,
            sexualContentGraphicAndNudity,
            sexualContentOrNudity,
            unrestrictedWebAccess,
            violenceCartoonOrFantasy,
            violenceRealistic,
            violenceRealisticProlongedGraphicOrSadistic,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreReviewDetails
        {
            appStoreReviewAttachments,
            appStoreVersion,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsRoutingAppCoverages
        {
            appStoreVersion,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreVersionPhasedReleases
        {
            appStoreVersion,
            currentDayNumber,
            phasedReleaseState,
            startDate,
            totalPauseDuration,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipDefaultExperiencesReleaseWithAppStoreVersionInclude
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            routingAppCoverage,
        }


        // /v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion
        public Task<AppStoreVersionResponse> GetAppClipDefaultExperiencesReleaseWithAppStoreVersion(string id, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, string[]? fieldsAppStoreVersionSubmissions = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsApps[]? fieldsApps = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsBuilds[]? fieldsBuilds = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limitAppStoreVersionLocalizations = default, int? limitAppStoreVersionExperiments = default, GetAppClipDefaultExperiencesReleaseWithAppStoreVersionInclude[]? include = default)
        {
            string path = "/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionExperiments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
            if (fieldsAgeRatingDeclarations != null)
                uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
            if (fieldsAppStoreVersionSubmissions != null)
                uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
            if (fieldsAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsRoutingAppCoverages != null)
                uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (fieldsAppStoreVersionPhasedReleases != null)
                uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limitAppStoreVersionLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());
            if (limitAppStoreVersionExperiments.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionResponse>(message);
        }

        public class AppClipAdvancedExperiencesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class Place
                    {
                        public class MainAddress
                        {
                            public class StructuredAddress
                            {
                                public string[]? streetAddress { get; set; }
                                public string? floor { get; set; }
                                public string? neighborhood { get; set; }
                                public string? locality { get; set; }
                                public string? stateProvince { get; set; }
                                public string? postalCode { get; set; }
                                public string? countryCode { get; set; }
                            }

                            public string? fullAddress { get; set; }
                            public StructuredAddress? structuredAddress { get; set; }
                        }

                        public class DisplayPoint
                        {
                            public class Coordinates
                            {
                                public double? latitude { get; set; }
                                public double? longitude { get; set; }
                            }

                            public Coordinates? coordinates { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Source
                            {
                                CALCULATED,
                                MANUALLY_PLACED,
                            }
                            public Source? source { get; set; }
                        }

                        public class PhoneNumber
                        {
                            public string? number { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Type
                            {
                                FAX,
                                LANDLINE,
                                MOBILE,
                                TOLLFREE,
                            }
                            public Type? type { get; set; }
                            public string? intent { get; set; }
                        }

                        public string? placeId { get; set; }
                        public string[]? names { get; set; }
                        public MainAddress? mainAddress { get; set; }
                        public DisplayPoint? displayPoint { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum MapAction
                        {
                            BUY_TICKETS,
                            VIEW_AVAILABILITY,
                            VIEW_PRICING,
                            HOTEL_BOOK_ROOM,
                            PARKING_RESERVE_PARKING,
                            RESTAURANT_JOIN_WAITLIST,
                            RESTAURANT_ORDER_DELIVERY,
                            RESTAURANT_ORDER_FOOD,
                            RESTAURANT_ORDER_TAKEOUT,
                            RESTAURANT_RESERVATION,
                            SCHEDULE_APPOINTMENT,
                            RESTAURANT_VIEW_MENU,
                            THEATER_NOW_PLAYING,
                        }
                        public MapAction? mapAction { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Relationship
                        {
                            OWNER,
                            AUTHORIZED,
                            OTHER,
                        }
                        public Relationship? relationship { get; set; }
                        public PhoneNumber? phoneNumber { get; set; }
                        public string? homePage { get; set; }
                        public string[]? categories { get; set; }
                    }

                    public string? link { get; set; }
                    public int? version { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Status
                    {
                        RECEIVED,
                        DEACTIVATED,
                        APP_TRANSFER_IN_PROGRESS,
                    }
                    public Status? status { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                    public bool? isPoweredBy { get; set; }
                    public Place? place { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PlaceStatus
                    {
                        PENDING,
                        MATCHED,
                        NO_MATCH,
                    }
                    public PlaceStatus? placeStatus { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BusinessCategory
                    {
                        AUTOMOTIVE,
                        BEAUTY,
                        BIKES,
                        BOOKS,
                        CASINO,
                        EDUCATION,
                        EDUCATION_JAPAN,
                        ENTERTAINMENT,
                        EV_CHARGER,
                        FINANCIAL_USD,
                        FINANCIAL_CNY,
                        FINANCIAL_GBP,
                        FINANCIAL_JPY,
                        FINANCIAL_EUR,
                        FITNESS,
                        FOOD_AND_DRINK,
                        GAS,
                        GROCERY,
                        HEALTH_AND_MEDICAL,
                        HOTEL_AND_TRAVEL,
                        MUSIC,
                        PARKING,
                        PET_SERVICES,
                        PROFESSIONAL_SERVICES,
                        SHOPPING,
                        TICKETING,
                        TRANSIT,
                    }
                    public BusinessCategory? businessCategory { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum DefaultLanguage
                    {
                        AR,
                        CA,
                        CS,
                        DA,
                        DE,
                        EL,
                        EN,
                        ES,
                        FI,
                        FR,
                        HE,
                        HI,
                        HR,
                        HU,
                        ID,
                        IT,
                        JA,
                        KO,
                        MS,
                        NL,
                        NO,
                        PL,
                        PT,
                        RO,
                        RU,
                        SK,
                        SV,
                        TH,
                        TR,
                        UK,
                        VI,
                        ZH,
                    }
                    public DefaultLanguage? defaultLanguage { get; set; }
                }

                public class Relationships
                {
                    public class AppClip
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class HeaderImage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipAdvancedExperienceImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Localizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipAdvancedExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppClip? appClip { get; set; }
                    public HeaderImage? headerImage { get; set; }
                    public Localizations? localizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipAdvancedExperiences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipAdvancedExperiencesFilterAction
        {
            OPEN,
            VIEW,
            PLAY,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipAdvancedExperiencesFilterPlaceStatus
        {
            PENDING,
            MATCHED,
            NO_MATCH,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipAdvancedExperiencesFilterStatus
        {
            RECEIVED,
            DEACTIVATED,
            APP_TRANSFER_IN_PROGRESS,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipAdvancedExperiencesFieldsAppClipAdvancedExperiences
        {
            action,
            appClip,
            businessCategory,
            defaultLanguage,
            headerImage,
            isPoweredBy,
            link,
            localizations,
            place,
            placeStatus,
            removed,
            status,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipAdvancedExperiencesFieldsAppClips
        {
            app,
            appClipAdvancedExperiences,
            appClipDefaultExperiences,
            bundleId,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipAdvancedExperiencesFieldsAppClipAdvancedExperienceImages
        {
            assetDeliveryState,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipAdvancedExperiencesFieldsAppClipAdvancedExperienceLocalizations
        {
            language,
            subtitle,
            title,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipAdvancedExperiencesInclude
        {
            appClip,
            headerImage,
            localizations,
        }


        // /v1/appClips/{id}/appClipAdvancedExperiences
        public Task<AppClipAdvancedExperiencesResponse> GetAppClipsAppClipAdvancedExperiences(string id, GetAppClipsAppClipAdvancedExperiencesFilterAction[]? filterAction = default, GetAppClipsAppClipAdvancedExperiencesFilterPlaceStatus[]? filterPlaceStatus = default, GetAppClipsAppClipAdvancedExperiencesFilterStatus[]? filterStatus = default, GetAppClipsAppClipAdvancedExperiencesFieldsAppClipAdvancedExperiences[]? fieldsAppClipAdvancedExperiences = default, GetAppClipsAppClipAdvancedExperiencesFieldsAppClips[]? fieldsAppClips = default, GetAppClipsAppClipAdvancedExperiencesFieldsAppClipAdvancedExperienceImages[]? fieldsAppClipAdvancedExperienceImages = default, GetAppClipsAppClipAdvancedExperiencesFieldsAppClipAdvancedExperienceLocalizations[]? fieldsAppClipAdvancedExperienceLocalizations = default, int? limit = default, int? limitLocalizations = default, GetAppClipsAppClipAdvancedExperiencesInclude[]? include = default)
        {
            string path = "/v1/appClips/{id}/appClipAdvancedExperiences";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterAction != null)
                uriBuilder.AddParameter("filter[action]", string.Join(",", filterAction));
            if (filterPlaceStatus != null)
                uriBuilder.AddParameter("filter[placeStatus]", string.Join(",", filterPlaceStatus));
            if (filterStatus != null)
                uriBuilder.AddParameter("filter[status]", string.Join(",", filterStatus));
            if (fieldsAppClipAdvancedExperiences != null)
                uriBuilder.AddParameter("fields[appClipAdvancedExperiences]", string.Join(",", fieldsAppClipAdvancedExperiences));
            if (fieldsAppClips != null)
                uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
            if (fieldsAppClipAdvancedExperienceImages != null)
                uriBuilder.AddParameter("fields[appClipAdvancedExperienceImages]", string.Join(",", fieldsAppClipAdvancedExperienceImages));
            if (fieldsAppClipAdvancedExperienceLocalizations != null)
                uriBuilder.AddParameter("fields[appClipAdvancedExperienceLocalizations]", string.Join(",", fieldsAppClipAdvancedExperienceLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitLocalizations.HasValue)
                uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipAdvancedExperiencesResponse>(message);
        }

        public class AppClipDefaultExperiencesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Action
                    {
                        OPEN,
                        VIEW,
                        PLAY,
                    }
                    public Action? action { get; set; }
                }

                public class Relationships
                {
                    public class AppClip
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class ReleaseWithAppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperienceLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperienceLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClipAppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipAppStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppClip? appClip { get; set; }
                    public ReleaseWithAppStoreVersion? releaseWithAppStoreVersion { get; set; }
                    public AppClipDefaultExperienceLocalizations? appClipDefaultExperienceLocalizations { get; set; }
                    public AppClipAppStoreReviewDetail? appClipAppStoreReviewDetail { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipDefaultExperiences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipDefaultExperiencesFieldsAppClips
        {
            app,
            appClipAdvancedExperiences,
            appClipDefaultExperiences,
            bundleId,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipDefaultExperiencesFieldsAppClipAppStoreReviewDetails
        {
            appClipDefaultExperience,
            invocationUrls,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipDefaultExperiencesFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipDefaultExperiencesFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipDefaultExperiencesFieldsAppClipDefaultExperienceLocalizations
        {
            appClipDefaultExperience,
            appClipHeaderImage,
            locale,
            subtitle,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppClipsAppClipDefaultExperiencesInclude
        {
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            releaseWithAppStoreVersion,
        }


        // /v1/appClips/{id}/appClipDefaultExperiences
        public Task<AppClipDefaultExperiencesResponse> GetAppClipsAppClipDefaultExperiences(string id, bool? existsReleaseWithAppStoreVersion = default, GetAppClipsAppClipDefaultExperiencesFieldsAppClips[]? fieldsAppClips = default, GetAppClipsAppClipDefaultExperiencesFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, GetAppClipsAppClipDefaultExperiencesFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppClipsAppClipDefaultExperiencesFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GetAppClipsAppClipDefaultExperiencesFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, int? limit = default, int? limitAppClipDefaultExperienceLocalizations = default, GetAppClipsAppClipDefaultExperiencesInclude[]? include = default)
        {
            string path = "/v1/appClips/{id}/appClipDefaultExperiences";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (existsReleaseWithAppStoreVersion.HasValue)
                uriBuilder.AddParameter("exists[releaseWithAppStoreVersion]", existsReleaseWithAppStoreVersion.Value.ToString());
            if (fieldsAppClips != null)
                uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
            if (fieldsAppClipAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (fieldsAppClipDefaultExperienceLocalizations != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppClipDefaultExperienceLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipDefaultExperiencesResponse>(message);
        }

        public class AppPreviewSetsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PreviewType
                    {
                        IPHONE_67,
                        IPHONE_61,
                        IPHONE_65,
                        IPHONE_58,
                        IPHONE_55,
                        IPHONE_47,
                        IPHONE_40,
                        IPHONE_35,
                        IPAD_PRO_3GEN_129,
                        IPAD_PRO_3GEN_11,
                        IPAD_PRO_129,
                        IPAD_105,
                        IPAD_97,
                        DESKTOP,
                        APPLE_TV,
                    }
                    public PreviewType? previewType { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppPreviews
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviews";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                    public AppPreviews? appPreviews { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPreviewSets";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppPreviewSetsFilterPreviewType
        {
            IPHONE_67,
            IPHONE_61,
            IPHONE_65,
            IPHONE_58,
            IPHONE_55,
            IPHONE_47,
            IPHONE_40,
            IPHONE_35,
            IPAD_PRO_3GEN_129,
            IPAD_PRO_3GEN_11,
            IPAD_PRO_129,
            IPAD_105,
            IPAD_97,
            DESKTOP,
            APPLE_TV,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppPreviews
        {
            appPreviewSet,
            assetDeliveryState,
            fileName,
            fileSize,
            mimeType,
            previewFrameTimeCode,
            previewImage,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
            videoUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppPreviewSetsInclude
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
        }


        // /v1/appCustomProductPageLocalizations/{id}/appPreviewSets
        public Task<AppPreviewSetsResponse> GetAppCustomProductPageLocalizationsAppPreviewSets(string id, GetAppCustomProductPageLocalizationsAppPreviewSetsFilterPreviewType[]? filterPreviewType = default, string[]? filterAppStoreVersionExperimentTreatmentLocalization = default, string[]? filterAppStoreVersionLocalization = default, GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppPreviews[]? fieldsAppPreviews = default, GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, GetAppCustomProductPageLocalizationsAppPreviewSetsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limit = default, int? limitAppPreviews = default, GetAppCustomProductPageLocalizationsAppPreviewSetsInclude[]? include = default)
        {
            string path = "/v1/appCustomProductPageLocalizations/{id}/appPreviewSets";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPreviewType != null)
                uriBuilder.AddParameter("filter[previewType]", string.Join(",", filterPreviewType));
            if (filterAppStoreVersionExperimentTreatmentLocalization != null)
                uriBuilder.AddParameter("filter[appStoreVersionExperimentTreatmentLocalization]", string.Join(",", filterAppStoreVersionExperimentTreatmentLocalization));
            if (filterAppStoreVersionLocalization != null)
                uriBuilder.AddParameter("filter[appStoreVersionLocalization]", string.Join(",", filterAppStoreVersionLocalization));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (fieldsAppPreviews != null)
                uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppPreviews.HasValue)
                uriBuilder.AddParameter("limit[appPreviews]", limitAppPreviews.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPreviewSetsResponse>(message);
        }

        public class AppScreenshotSetsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ScreenshotDisplayType
                    {
                        APP_IPHONE_67,
                        APP_IPHONE_61,
                        APP_IPHONE_65,
                        APP_IPHONE_58,
                        APP_IPHONE_55,
                        APP_IPHONE_47,
                        APP_IPHONE_40,
                        APP_IPHONE_35,
                        APP_IPAD_PRO_3GEN_129,
                        APP_IPAD_PRO_3GEN_11,
                        APP_IPAD_PRO_129,
                        APP_IPAD_105,
                        APP_IPAD_97,
                        APP_DESKTOP,
                        APP_WATCH_ULTRA,
                        APP_WATCH_SERIES_7,
                        APP_WATCH_SERIES_4,
                        APP_WATCH_SERIES_3,
                        APP_APPLE_TV,
                        IMESSAGE_APP_IPHONE_67,
                        IMESSAGE_APP_IPHONE_61,
                        IMESSAGE_APP_IPHONE_65,
                        IMESSAGE_APP_IPHONE_58,
                        IMESSAGE_APP_IPHONE_55,
                        IMESSAGE_APP_IPHONE_47,
                        IMESSAGE_APP_IPHONE_40,
                        IMESSAGE_APP_IPAD_PRO_3GEN_129,
                        IMESSAGE_APP_IPAD_PRO_3GEN_11,
                        IMESSAGE_APP_IPAD_PRO_129,
                        IMESSAGE_APP_IPAD_105,
                        IMESSAGE_APP_IPAD_97,
                    }
                    public ScreenshotDisplayType? screenshotDisplayType { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                    public AppScreenshots? appScreenshots { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appScreenshotSets";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppScreenshotSetsFilterScreenshotDisplayType
        {
            APP_IPHONE_67,
            APP_IPHONE_61,
            APP_IPHONE_65,
            APP_IPHONE_58,
            APP_IPHONE_55,
            APP_IPHONE_47,
            APP_IPHONE_40,
            APP_IPHONE_35,
            APP_IPAD_PRO_3GEN_129,
            APP_IPAD_PRO_3GEN_11,
            APP_IPAD_PRO_129,
            APP_IPAD_105,
            APP_IPAD_97,
            APP_DESKTOP,
            APP_WATCH_ULTRA,
            APP_WATCH_SERIES_7,
            APP_WATCH_SERIES_4,
            APP_WATCH_SERIES_3,
            APP_APPLE_TV,
            IMESSAGE_APP_IPHONE_67,
            IMESSAGE_APP_IPHONE_61,
            IMESSAGE_APP_IPHONE_65,
            IMESSAGE_APP_IPHONE_58,
            IMESSAGE_APP_IPHONE_55,
            IMESSAGE_APP_IPHONE_47,
            IMESSAGE_APP_IPHONE_40,
            IMESSAGE_APP_IPAD_PRO_3GEN_129,
            IMESSAGE_APP_IPAD_PRO_3GEN_11,
            IMESSAGE_APP_IPAD_PRO_129,
            IMESSAGE_APP_IPAD_105,
            IMESSAGE_APP_IPAD_97,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppScreenshots
        {
            appScreenshotSet,
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageLocalizationsAppScreenshotSetsInclude
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
        }


        // /v1/appCustomProductPageLocalizations/{id}/appScreenshotSets
        public Task<AppScreenshotSetsResponse> GetAppCustomProductPageLocalizationsAppScreenshotSets(string id, GetAppCustomProductPageLocalizationsAppScreenshotSetsFilterScreenshotDisplayType[]? filterScreenshotDisplayType = default, string[]? filterAppStoreVersionExperimentTreatmentLocalization = default, string[]? filterAppStoreVersionLocalization = default, GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppScreenshots[]? fieldsAppScreenshots = default, GetAppCustomProductPageLocalizationsAppScreenshotSetsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limit = default, int? limitAppScreenshots = default, GetAppCustomProductPageLocalizationsAppScreenshotSetsInclude[]? include = default)
        {
            string path = "/v1/appCustomProductPageLocalizations/{id}/appScreenshotSets";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterScreenshotDisplayType != null)
                uriBuilder.AddParameter("filter[screenshotDisplayType]", string.Join(",", filterScreenshotDisplayType));
            if (filterAppStoreVersionExperimentTreatmentLocalization != null)
                uriBuilder.AddParameter("filter[appStoreVersionExperimentTreatmentLocalization]", string.Join(",", filterAppStoreVersionExperimentTreatmentLocalization));
            if (filterAppStoreVersionLocalization != null)
                uriBuilder.AddParameter("filter[appStoreVersionLocalization]", string.Join(",", filterAppStoreVersionLocalization));
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (fieldsAppScreenshots != null)
                uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppScreenshots.HasValue)
                uriBuilder.AddParameter("limit[appScreenshots]", limitAppScreenshots.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppScreenshotSetsResponse>(message);
        }

        public class AppCustomProductPageLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? promotionalText { get; set; }
                }

                public class Relationships
                {
                    public class AppCustomProductPageVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshotSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppPreviewSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppCustomProductPageVersion? appCustomProductPageVersion { get; set; }
                    public AppScreenshotSets? appScreenshotSets { get; set; }
                    public AppPreviewSets? appPreviewSets { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCustomProductPageLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsFieldsAppCustomProductPageVersions
        {
            appCustomProductPage,
            appCustomProductPageLocalizations,
            state,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsInclude
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
        }


        // /v1/appCustomProductPageVersions/{id}/appCustomProductPageLocalizations
        public Task<AppCustomProductPageLocalizationsResponse> GetAppCustomProductPageVersionsAppCustomProductPageLocalizations(string id, string[]? filterLocale = default, GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limit = default, int? limitAppScreenshotSets = default, int? limitAppPreviewSets = default, GetAppCustomProductPageVersionsAppCustomProductPageLocalizationsInclude[]? include = default)
        {
            string path = "/v1/appCustomProductPageVersions/{id}/appCustomProductPageLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterLocale != null)
                uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (fieldsAppCustomProductPageVersions != null)
                uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppScreenshotSets.HasValue)
                uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());
            if (limitAppPreviewSets.HasValue)
                uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCustomProductPageLocalizationsResponse>(message);
        }

        public class AppCustomProductPageVersionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? version { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        READY_FOR_REVIEW,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        ACCEPTED,
                        APPROVED,
                        REPLACED_WITH_NEW_VERSION,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class AppCustomProductPage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppCustomProductPage? appCustomProductPage { get; set; }
                    public AppCustomProductPageLocalizations? appCustomProductPageLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCustomProductPageVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPagesAppCustomProductPageVersionsFilterState
        {
            PREPARE_FOR_SUBMISSION,
            READY_FOR_REVIEW,
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            ACCEPTED,
            APPROVED,
            REPLACED_WITH_NEW_VERSION,
            REJECTED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPagesAppCustomProductPageVersionsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPagesAppCustomProductPageVersionsFieldsAppCustomProductPageVersions
        {
            appCustomProductPage,
            appCustomProductPageLocalizations,
            state,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPagesAppCustomProductPageVersionsFieldsAppCustomProductPages
        {
            app,
            appCustomProductPageVersions,
            appStoreVersionTemplate,
            customProductPageTemplate,
            name,
            url,
            visible,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppCustomProductPagesAppCustomProductPageVersionsInclude
        {
            appCustomProductPage,
            appCustomProductPageLocalizations,
        }


        // /v1/appCustomProductPages/{id}/appCustomProductPageVersions
        public Task<AppCustomProductPageVersionsResponse> GetAppCustomProductPagesAppCustomProductPageVersions(string id, GetAppCustomProductPagesAppCustomProductPageVersionsFilterState[]? filterState = default, GetAppCustomProductPagesAppCustomProductPageVersionsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppCustomProductPagesAppCustomProductPageVersionsFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, GetAppCustomProductPagesAppCustomProductPageVersionsFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, int? limit = default, int? limitAppCustomProductPageLocalizations = default, GetAppCustomProductPagesAppCustomProductPageVersionsInclude[]? include = default)
        {
            string path = "/v1/appCustomProductPages/{id}/appCustomProductPageVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterState != null)
                uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (fieldsAppCustomProductPageVersions != null)
                uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
            if (fieldsAppCustomProductPages != null)
                uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppCustomProductPageLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appCustomProductPageLocalizations]", limitAppCustomProductPageLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCustomProductPageVersionsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEncryptionDeclarationsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/appEncryptionDeclarations/{id}/app
        public Task<AppResponse> GetAppEncryptionDeclarationsApp(string id, GetAppEncryptionDeclarationsAppFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/appEncryptionDeclarations/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        public class PostAppEncryptionDeclarationsBuildsRequest
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/appEncryptionDeclarations/{id}/relationships/builds
        public Task PostAppEncryptionDeclarationsBuilds(string id, PostAppEncryptionDeclarationsBuildsRequest request)
        {
            string path = "/v1/appEncryptionDeclarations/{id}/relationships/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class AppEventScreenshotsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public string? assetToken { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppEventAssetType
                    {
                        EVENT_CARD,
                        EVENT_DETAILS_PAGE,
                    }
                    public AppEventAssetType? appEventAssetType { get; set; }
                }

                public class Relationships
                {
                    public class AppEventLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppEventLocalization? appEventLocalization { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEventScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEventVideoClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventVideoClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppEvent? appEvent { get; set; }
                    public AppEventScreenshots? appEventScreenshots { get; set; }
                    public AppEventVideoClips? appEventVideoClips { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventLocalizationsAppEventScreenshotsFieldsAppEventScreenshots
        {
            appEventAssetType,
            appEventLocalization,
            assetDeliveryState,
            assetToken,
            fileName,
            fileSize,
            imageAsset,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventLocalizationsAppEventScreenshotsFieldsAppEventLocalizations
        {
            appEvent,
            appEventScreenshots,
            appEventVideoClips,
            locale,
            longDescription,
            name,
            shortDescription,
        }




        // /v1/appEventLocalizations/{id}/appEventScreenshots
        public Task<AppEventScreenshotsResponse> GetAppEventLocalizationsAppEventScreenshots(string id, GetAppEventLocalizationsAppEventScreenshotsFieldsAppEventScreenshots[]? fieldsAppEventScreenshots = default, GetAppEventLocalizationsAppEventScreenshotsFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/appEventLocalizations/{id}/appEventScreenshots";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEventScreenshots != null)
                uriBuilder.AddParameter("fields[appEventScreenshots]", string.Join(",", fieldsAppEventScreenshots));
            if (fieldsAppEventLocalizations != null)
                uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEventScreenshotsResponse>(message);
        }

        public class AppEventVideoClipsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class PreviewImage
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? previewFrameTimeCode { get; set; }
                    public string? videoUrl { get; set; }
                    public PreviewImage? previewImage { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppEventAssetType
                    {
                        EVENT_CARD,
                        EVENT_DETAILS_PAGE,
                    }
                    public AppEventAssetType? appEventAssetType { get; set; }
                }

                public class Relationships
                {
                    public class AppEventLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppEventLocalization? appEventLocalization { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventVideoClips";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEventScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEventVideoClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventVideoClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppEvent? appEvent { get; set; }
                    public AppEventScreenshots? appEventScreenshots { get; set; }
                    public AppEventVideoClips? appEventVideoClips { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventLocalizationsAppEventVideoClipsFieldsAppEventVideoClips
        {
            appEventAssetType,
            appEventLocalization,
            assetDeliveryState,
            fileName,
            fileSize,
            previewFrameTimeCode,
            previewImage,
            uploadOperations,
            uploaded,
            videoUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventLocalizationsAppEventVideoClipsFieldsAppEventLocalizations
        {
            appEvent,
            appEventScreenshots,
            appEventVideoClips,
            locale,
            longDescription,
            name,
            shortDescription,
        }




        // /v1/appEventLocalizations/{id}/appEventVideoClips
        public Task<AppEventVideoClipsResponse> GetAppEventLocalizationsAppEventVideoClips(string id, GetAppEventLocalizationsAppEventVideoClipsFieldsAppEventVideoClips[]? fieldsAppEventVideoClips = default, GetAppEventLocalizationsAppEventVideoClipsFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/appEventLocalizations/{id}/appEventVideoClips";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEventVideoClips != null)
                uriBuilder.AddParameter("fields[appEventVideoClips]", string.Join(",", fieldsAppEventVideoClips));
            if (fieldsAppEventLocalizations != null)
                uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEventVideoClipsResponse>(message);
        }

        public class AppEventLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEventScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEventVideoClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventVideoClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppEvent? appEvent { get; set; }
                    public AppEventScreenshots? appEventScreenshots { get; set; }
                    public AppEventVideoClips? appEventVideoClips { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventsLocalizationsFieldsAppEventScreenshots
        {
            appEventAssetType,
            appEventLocalization,
            assetDeliveryState,
            assetToken,
            fileName,
            fileSize,
            imageAsset,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventsLocalizationsFieldsAppEventVideoClips
        {
            appEventAssetType,
            appEventLocalization,
            assetDeliveryState,
            fileName,
            fileSize,
            previewFrameTimeCode,
            previewImage,
            uploadOperations,
            uploaded,
            videoUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventsLocalizationsFieldsAppEventLocalizations
        {
            appEvent,
            appEventScreenshots,
            appEventVideoClips,
            locale,
            longDescription,
            name,
            shortDescription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventsLocalizationsFieldsAppEvents
        {
            app,
            archivedTerritorySchedules,
            badge,
            deepLink,
            eventState,
            localizations,
            primaryLocale,
            priority,
            purchaseRequirement,
            purpose,
            referenceName,
            territorySchedules,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppEventsLocalizationsInclude
        {
            appEvent,
            appEventScreenshots,
            appEventVideoClips,
        }


        // /v1/appEvents/{id}/localizations
        public Task<AppEventLocalizationsResponse> GetAppEventsLocalizations(string id, GetAppEventsLocalizationsFieldsAppEventScreenshots[]? fieldsAppEventScreenshots = default, GetAppEventsLocalizationsFieldsAppEventVideoClips[]? fieldsAppEventVideoClips = default, GetAppEventsLocalizationsFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, GetAppEventsLocalizationsFieldsAppEvents[]? fieldsAppEvents = default, int? limit = default, int? limitAppEventScreenshots = default, int? limitAppEventVideoClips = default, GetAppEventsLocalizationsInclude[]? include = default)
        {
            string path = "/v1/appEvents/{id}/localizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEventScreenshots != null)
                uriBuilder.AddParameter("fields[appEventScreenshots]", string.Join(",", fieldsAppEventScreenshots));
            if (fieldsAppEventVideoClips != null)
                uriBuilder.AddParameter("fields[appEventVideoClips]", string.Join(",", fieldsAppEventVideoClips));
            if (fieldsAppEventLocalizations != null)
                uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
            if (fieldsAppEvents != null)
                uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppEventScreenshots.HasValue)
                uriBuilder.AddParameter("limit[appEventScreenshots]", limitAppEventScreenshots.Value.ToString());
            if (limitAppEventVideoClips.HasValue)
                uriBuilder.AddParameter("limit[appEventVideoClips]", limitAppEventVideoClips.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEventLocalizationsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosAgeRatingDeclarationFieldsAgeRatingDeclarations
        {
            alcoholTobaccoOrDrugUseOrReferences,
            contests,
            gambling,
            gamblingAndContests,
            gamblingSimulated,
            horrorOrFearThemes,
            kidsAgeBand,
            matureOrSuggestiveThemes,
            medicalOrTreatmentInformation,
            profanityOrCrudeHumor,
            seventeenPlus,
            sexualContentGraphicAndNudity,
            sexualContentOrNudity,
            unrestrictedWebAccess,
            violenceCartoonOrFantasy,
            violenceRealistic,
            violenceRealisticProlongedGraphicOrSadistic,
        }


        // /v1/appInfos/{id}/ageRatingDeclaration
        public Task<AgeRatingDeclarationResponse> GetAppInfosAgeRatingDeclaration(string id, GetAppInfosAgeRatingDeclarationFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default)
        {
            string path = "/v1/appInfos/{id}/ageRatingDeclaration";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAgeRatingDeclarations != null)
                uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AgeRatingDeclarationResponse>(message);
        }

        public class AppInfoLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? subtitle { get; set; }
                    public string? privacyPolicyUrl { get; set; }
                    public string? privacyChoicesUrl { get; set; }
                    public string? privacyPolicyText { get; set; }
                }

                public class Relationships
                {
                    public class AppInfo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppInfo? appInfo { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appInfoLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreState
                    {
                        ACCEPTED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        DEVELOPER_REJECTED,
                        IN_REVIEW,
                        INVALID_BINARY,
                        METADATA_REJECTED,
                        PENDING_APPLE_RELEASE,
                        PENDING_CONTRACT,
                        PENDING_DEVELOPER_RELEASE,
                        PREPARE_FOR_SUBMISSION,
                        PREORDER_READY_FOR_SALE,
                        PROCESSING_FOR_APP_STORE,
                        READY_FOR_REVIEW,
                        READY_FOR_SALE,
                        REJECTED,
                        REMOVED_FROM_SALE,
                        WAITING_FOR_EXPORT_COMPLIANCE,
                        WAITING_FOR_REVIEW,
                        REPLACED_WITH_NEW_VERSION,
                    }
                    public AppStoreState? appStoreState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreAgeRating
                    {
                        FOUR_PLUS,
                        NINE_PLUS,
                        TWELVE_PLUS,
                        SEVENTEEN_PLUS,
                    }
                    public AppStoreAgeRating? appStoreAgeRating { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BrazilAgeRating
                    {
                        L,
                        TEN,
                        TWELVE,
                        FOURTEEN,
                        SIXTEEN,
                        EIGHTEEN,
                    }
                    public BrazilAgeRating? brazilAgeRating { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum KidsAgeBand
                    {
                        FIVE_AND_UNDER,
                        SIX_TO_EIGHT,
                        NINE_TO_ELEVEN,
                    }
                    public KidsAgeBand? kidsAgeBand { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AgeRatingDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ageRatingDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfoLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfoLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PrimaryCategory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryOne
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryTwo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondaryCategory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryOne
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryTwo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AgeRatingDeclaration? ageRatingDeclaration { get; set; }
                    public AppInfoLocalizations? appInfoLocalizations { get; set; }
                    public PrimaryCategory? primaryCategory { get; set; }
                    public PrimarySubcategoryOne? primarySubcategoryOne { get; set; }
                    public PrimarySubcategoryTwo? primarySubcategoryTwo { get; set; }
                    public SecondaryCategory? secondaryCategory { get; set; }
                    public SecondarySubcategoryOne? secondarySubcategoryOne { get; set; }
                    public SecondarySubcategoryTwo? secondarySubcategoryTwo { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appInfos";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosAppInfoLocalizationsFieldsAppInfos
        {
            ageRatingDeclaration,
            app,
            appInfoLocalizations,
            appStoreAgeRating,
            appStoreState,
            brazilAgeRating,
            kidsAgeBand,
            primaryCategory,
            primarySubcategoryOne,
            primarySubcategoryTwo,
            secondaryCategory,
            secondarySubcategoryOne,
            secondarySubcategoryTwo,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosAppInfoLocalizationsFieldsAppInfoLocalizations
        {
            appInfo,
            locale,
            name,
            privacyChoicesUrl,
            privacyPolicyText,
            privacyPolicyUrl,
            subtitle,
        }




        // /v1/appInfos/{id}/appInfoLocalizations
        public Task<AppInfoLocalizationsResponse> GetAppInfosAppInfoLocalizations(string id, string[]? filterLocale = default, GetAppInfosAppInfoLocalizationsFieldsAppInfos[]? fieldsAppInfos = default, GetAppInfosAppInfoLocalizationsFieldsAppInfoLocalizations[]? fieldsAppInfoLocalizations = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/appInfos/{id}/appInfoLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterLocale != null)
                uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
            if (fieldsAppInfos != null)
                uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
            if (fieldsAppInfoLocalizations != null)
                uriBuilder.AddParameter("fields[appInfoLocalizations]", string.Join(",", fieldsAppInfoLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppInfoLocalizationsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosPrimaryCategoryFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }


        // /v1/appInfos/{id}/primaryCategory
        public Task<AppCategoryResponse> GetAppInfosPrimaryCategory(string id, GetAppInfosPrimaryCategoryFieldsAppCategories[]? fieldsAppCategories = default)
        {
            string path = "/v1/appInfos/{id}/primaryCategory";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoryResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosPrimarySubcategoryOneFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }


        // /v1/appInfos/{id}/primarySubcategoryOne
        public Task<AppCategoryResponse> GetAppInfosPrimarySubcategoryOne(string id, GetAppInfosPrimarySubcategoryOneFieldsAppCategories[]? fieldsAppCategories = default)
        {
            string path = "/v1/appInfos/{id}/primarySubcategoryOne";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoryResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosPrimarySubcategoryTwoFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }


        // /v1/appInfos/{id}/primarySubcategoryTwo
        public Task<AppCategoryResponse> GetAppInfosPrimarySubcategoryTwo(string id, GetAppInfosPrimarySubcategoryTwoFieldsAppCategories[]? fieldsAppCategories = default)
        {
            string path = "/v1/appInfos/{id}/primarySubcategoryTwo";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoryResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosSecondaryCategoryFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }


        // /v1/appInfos/{id}/secondaryCategory
        public Task<AppCategoryResponse> GetAppInfosSecondaryCategory(string id, GetAppInfosSecondaryCategoryFieldsAppCategories[]? fieldsAppCategories = default)
        {
            string path = "/v1/appInfos/{id}/secondaryCategory";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoryResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosSecondarySubcategoryOneFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }


        // /v1/appInfos/{id}/secondarySubcategoryOne
        public Task<AppCategoryResponse> GetAppInfosSecondarySubcategoryOne(string id, GetAppInfosSecondarySubcategoryOneFieldsAppCategories[]? fieldsAppCategories = default)
        {
            string path = "/v1/appInfos/{id}/secondarySubcategoryOne";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoryResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppInfosSecondarySubcategoryTwoFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }


        // /v1/appInfos/{id}/secondarySubcategoryTwo
        public Task<AppCategoryResponse> GetAppInfosSecondarySubcategoryTwo(string id, GetAppInfosSecondarySubcategoryTwoFieldsAppCategories[]? fieldsAppCategories = default)
        {
            string path = "/v1/appInfos/{id}/secondarySubcategoryTwo";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCategoryResponse>(message);
        }

        public class GetAppPreviewSetsAppPreviewsResponse
        {
            public class Data
            {
                public string type { get; set; } = "appPreviews";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/appPreviewSets/{id}/relationships/appPreviews
        public Task<GetAppPreviewSetsAppPreviewsResponse> GetAppPreviewSetsAppPreviews(string id, int? limit = default)
        {
            string path = "/v1/appPreviewSets/{id}/relationships/appPreviews";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetAppPreviewSetsAppPreviewsResponse>(message);
        }

        public class PatchAppPreviewSetsAppPreviewsRequest
        {
            public class Data
            {
                public string type { get; set; } = "appPreviews";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/appPreviewSets/{id}/relationships/appPreviews
        public Task PatchAppPreviewSetsAppPreviews(string id, PatchAppPreviewSetsAppPreviewsRequest request)
        {
            string path = "/v1/appPreviewSets/{id}/relationships/appPreviews";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class AppPreviewsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class PreviewImage
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public string? previewFrameTimeCode { get; set; }
                    public string? mimeType { get; set; }
                    public string? videoUrl { get; set; }
                    public PreviewImage? previewImage { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class AppPreviewSet
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppPreviewSet? appPreviewSet { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPreviews";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PreviewType
                    {
                        IPHONE_67,
                        IPHONE_61,
                        IPHONE_65,
                        IPHONE_58,
                        IPHONE_55,
                        IPHONE_47,
                        IPHONE_40,
                        IPHONE_35,
                        IPAD_PRO_3GEN_129,
                        IPAD_PRO_3GEN_11,
                        IPAD_PRO_129,
                        IPAD_105,
                        IPAD_97,
                        DESKTOP,
                        APPLE_TV,
                    }
                    public PreviewType? previewType { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppPreviews
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviews";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                    public AppPreviews? appPreviews { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPreviewSets";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPreviewSetsAppPreviewsFieldsAppPreviews
        {
            appPreviewSet,
            assetDeliveryState,
            fileName,
            fileSize,
            mimeType,
            previewFrameTimeCode,
            previewImage,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
            videoUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPreviewSetsAppPreviewsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }




        // /v1/appPreviewSets/{id}/appPreviews
        public Task<AppPreviewsResponse> GetAppPreviewSetsAppPreviews(string id, GetAppPreviewSetsAppPreviewsFieldsAppPreviews[]? fieldsAppPreviews = default, GetAppPreviewSetsAppPreviewsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/appPreviewSets/{id}/appPreviews";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPreviews != null)
                uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPreviewsResponse>(message);
        }

        public class TerritoryResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? currency { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "territories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }


        // /v1/appPricePoints/{id}/territory
        public Task<TerritoryResponse> GetAppPricePointsTerritory(string id, string[]? fieldsTerritories = default)
        {
            string path = "/v1/appPricePoints/{id}/territory";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<TerritoryResponse>(message);
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPriceTiersPricePointsFieldsAppPricePoints
        {
            customerPrice,
            priceTier,
            proceeds,
            territory,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppPriceTiersPricePointsInclude
        {
            priceTier,
            territory,
        }


        // /v1/appPriceTiers/{id}/pricePoints
        public Task<AppPricePointsResponse> GetAppPriceTiersPricePoints(string id, string[]? filterTerritory = default, string[]? fieldsAppPriceTiers = default, GetAppPriceTiersPricePointsFieldsAppPricePoints[]? fieldsAppPricePoints = default, string[]? fieldsTerritories = default, int? limit = default, GetAppPriceTiersPricePointsInclude[]? include = default)
        {
            string path = "/v1/appPriceTiers/{id}/pricePoints";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsAppPriceTiers != null)
                uriBuilder.AddParameter("fields[appPriceTiers]", string.Join(",", fieldsAppPriceTiers));
            if (fieldsAppPricePoints != null)
                uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPricePointsResponse>(message);
        }

        public class GetAppScreenshotSetsAppScreenshotsResponse
        {
            public class Data
            {
                public string type { get; set; } = "appScreenshots";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/appScreenshotSets/{id}/relationships/appScreenshots
        public Task<GetAppScreenshotSetsAppScreenshotsResponse> GetAppScreenshotSetsAppScreenshots(string id, int? limit = default)
        {
            string path = "/v1/appScreenshotSets/{id}/relationships/appScreenshots";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetAppScreenshotSetsAppScreenshotsResponse>(message);
        }

        public class PatchAppScreenshotSetsAppScreenshotsRequest
        {
            public class Data
            {
                public string type { get; set; } = "appScreenshots";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/appScreenshotSets/{id}/relationships/appScreenshots
        public Task PatchAppScreenshotSetsAppScreenshots(string id, PatchAppScreenshotSetsAppScreenshotsRequest request)
        {
            string path = "/v1/appScreenshotSets/{id}/relationships/appScreenshots";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class AppScreenshotsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public string? assetToken { get; set; }
                    public string? assetType { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class AppScreenshotSet
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppScreenshotSet? appScreenshotSet { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appScreenshots";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ScreenshotDisplayType
                    {
                        APP_IPHONE_67,
                        APP_IPHONE_61,
                        APP_IPHONE_65,
                        APP_IPHONE_58,
                        APP_IPHONE_55,
                        APP_IPHONE_47,
                        APP_IPHONE_40,
                        APP_IPHONE_35,
                        APP_IPAD_PRO_3GEN_129,
                        APP_IPAD_PRO_3GEN_11,
                        APP_IPAD_PRO_129,
                        APP_IPAD_105,
                        APP_IPAD_97,
                        APP_DESKTOP,
                        APP_WATCH_ULTRA,
                        APP_WATCH_SERIES_7,
                        APP_WATCH_SERIES_4,
                        APP_WATCH_SERIES_3,
                        APP_APPLE_TV,
                        IMESSAGE_APP_IPHONE_67,
                        IMESSAGE_APP_IPHONE_61,
                        IMESSAGE_APP_IPHONE_65,
                        IMESSAGE_APP_IPHONE_58,
                        IMESSAGE_APP_IPHONE_55,
                        IMESSAGE_APP_IPHONE_47,
                        IMESSAGE_APP_IPHONE_40,
                        IMESSAGE_APP_IPAD_PRO_3GEN_129,
                        IMESSAGE_APP_IPAD_PRO_3GEN_11,
                        IMESSAGE_APP_IPAD_PRO_129,
                        IMESSAGE_APP_IPAD_105,
                        IMESSAGE_APP_IPAD_97,
                    }
                    public ScreenshotDisplayType? screenshotDisplayType { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalization
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionLocalization? appStoreVersionLocalization { get; set; }
                    public AppCustomProductPageLocalization? appCustomProductPageLocalization { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalization? appStoreVersionExperimentTreatmentLocalization { get; set; }
                    public AppScreenshots? appScreenshots { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appScreenshotSets";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppScreenshotSetsAppScreenshotsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppScreenshotSetsAppScreenshotsFieldsAppScreenshots
        {
            appScreenshotSet,
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }




        // /v1/appScreenshotSets/{id}/appScreenshots
        public Task<AppScreenshotsResponse> GetAppScreenshotSetsAppScreenshots(string id, GetAppScreenshotSetsAppScreenshotsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppScreenshotSetsAppScreenshotsFieldsAppScreenshots[]? fieldsAppScreenshots = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/appScreenshotSets/{id}/appScreenshots";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppScreenshots != null)
                uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppScreenshotsResponse>(message);
        }

        public class AppStoreReviewAttachmentsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public class AssetDeliveryState
                    {
                        public class Errors
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public class Warnings
                        {
                            public string? code { get; set; }
                            public string? description { get; set; }
                        }

                        public Errors[]? errors { get; set; }
                        public Warnings[]? warnings { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum State
                        {
                            AWAITING_UPLOAD,
                            UPLOAD_COMPLETE,
                            COMPLETE,
                            FAILED,
                        }
                        public State? state { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    public AssetDeliveryState? assetDeliveryState { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppStoreReviewDetail? appStoreReviewDetail { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreReviewAttachments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? contactFirstName { get; set; }
                    public string? contactLastName { get; set; }
                    public string? contactPhone { get; set; }
                    public string? contactEmail { get; set; }
                    public string? demoAccountName { get; set; }
                    public string? demoAccountPassword { get; set; }
                    public bool? demoAccountRequired { get; set; }
                    public string? notes { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewAttachments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewAttachments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppStoreReviewAttachments? appStoreReviewAttachments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreReviewDetails";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreReviewDetailsAppStoreReviewAttachmentsFieldsAppStoreReviewDetails
        {
            appStoreReviewAttachments,
            appStoreVersion,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreReviewDetailsAppStoreReviewAttachmentsFieldsAppStoreReviewAttachments
        {
            appStoreReviewDetail,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }




        // /v1/appStoreReviewDetails/{id}/appStoreReviewAttachments
        public Task<AppStoreReviewAttachmentsResponse> GetAppStoreReviewDetailsAppStoreReviewAttachments(string id, GetAppStoreReviewDetailsAppStoreReviewAttachmentsFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, GetAppStoreReviewDetailsAppStoreReviewAttachmentsFieldsAppStoreReviewAttachments[]? fieldsAppStoreReviewAttachments = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
            if (fieldsAppStoreReviewAttachments != null)
                uriBuilder.AddParameter("fields[appStoreReviewAttachments]", string.Join(",", fieldsAppStoreReviewAttachments));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreReviewAttachmentsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFilterPreviewType
        {
            IPHONE_67,
            IPHONE_61,
            IPHONE_65,
            IPHONE_58,
            IPHONE_55,
            IPHONE_47,
            IPHONE_40,
            IPHONE_35,
            IPAD_PRO_3GEN_129,
            IPAD_PRO_3GEN_11,
            IPAD_PRO_129,
            IPAD_105,
            IPAD_97,
            DESKTOP,
            APPLE_TV,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppPreviews
        {
            appPreviewSet,
            assetDeliveryState,
            fileName,
            fileSize,
            mimeType,
            previewFrameTimeCode,
            previewImage,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
            videoUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsInclude
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
        }


        // /v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets
        public Task<AppPreviewSetsResponse> GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSets(string id, GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFilterPreviewType[]? filterPreviewType = default, string[]? filterAppCustomProductPageLocalization = default, string[]? filterAppStoreVersionLocalization = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppPreviews[]? fieldsAppPreviews = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limit = default, int? limitAppPreviews = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsInclude[]? include = default)
        {
            string path = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPreviewType != null)
                uriBuilder.AddParameter("filter[previewType]", string.Join(",", filterPreviewType));
            if (filterAppCustomProductPageLocalization != null)
                uriBuilder.AddParameter("filter[appCustomProductPageLocalization]", string.Join(",", filterAppCustomProductPageLocalization));
            if (filterAppStoreVersionLocalization != null)
                uriBuilder.AddParameter("filter[appStoreVersionLocalization]", string.Join(",", filterAppStoreVersionLocalization));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (fieldsAppPreviews != null)
                uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppPreviews.HasValue)
                uriBuilder.AddParameter("limit[appPreviews]", limitAppPreviews.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPreviewSetsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFilterScreenshotDisplayType
        {
            APP_IPHONE_67,
            APP_IPHONE_61,
            APP_IPHONE_65,
            APP_IPHONE_58,
            APP_IPHONE_55,
            APP_IPHONE_47,
            APP_IPHONE_40,
            APP_IPHONE_35,
            APP_IPAD_PRO_3GEN_129,
            APP_IPAD_PRO_3GEN_11,
            APP_IPAD_PRO_129,
            APP_IPAD_105,
            APP_IPAD_97,
            APP_DESKTOP,
            APP_WATCH_ULTRA,
            APP_WATCH_SERIES_7,
            APP_WATCH_SERIES_4,
            APP_WATCH_SERIES_3,
            APP_APPLE_TV,
            IMESSAGE_APP_IPHONE_67,
            IMESSAGE_APP_IPHONE_61,
            IMESSAGE_APP_IPHONE_65,
            IMESSAGE_APP_IPHONE_58,
            IMESSAGE_APP_IPHONE_55,
            IMESSAGE_APP_IPHONE_47,
            IMESSAGE_APP_IPHONE_40,
            IMESSAGE_APP_IPAD_PRO_3GEN_129,
            IMESSAGE_APP_IPAD_PRO_3GEN_11,
            IMESSAGE_APP_IPAD_PRO_129,
            IMESSAGE_APP_IPAD_105,
            IMESSAGE_APP_IPAD_97,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppScreenshots
        {
            appScreenshotSet,
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsInclude
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
        }


        // /v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets
        public Task<AppScreenshotSetsResponse> GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSets(string id, GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFilterScreenshotDisplayType[]? filterScreenshotDisplayType = default, string[]? filterAppCustomProductPageLocalization = default, string[]? filterAppStoreVersionLocalization = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppScreenshots[]? fieldsAppScreenshots = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limit = default, int? limitAppScreenshots = default, GetAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsInclude[]? include = default)
        {
            string path = "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterScreenshotDisplayType != null)
                uriBuilder.AddParameter("filter[screenshotDisplayType]", string.Join(",", filterScreenshotDisplayType));
            if (filterAppCustomProductPageLocalization != null)
                uriBuilder.AddParameter("filter[appCustomProductPageLocalization]", string.Join(",", filterAppCustomProductPageLocalization));
            if (filterAppStoreVersionLocalization != null)
                uriBuilder.AddParameter("filter[appStoreVersionLocalization]", string.Join(",", filterAppStoreVersionLocalization));
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (fieldsAppScreenshots != null)
                uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppScreenshots.HasValue)
                uriBuilder.AddParameter("limit[appScreenshots]", limitAppScreenshots.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppScreenshotSetsResponse>(message);
        }

        public class AppStoreVersionExperimentTreatmentLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionExperimentTreatment
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshotSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppPreviewSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionExperimentTreatment? appStoreVersionExperimentTreatment { get; set; }
                    public AppScreenshotSets? appScreenshotSets { get; set; }
                    public AppPreviewSets? appPreviewSets { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsFieldsAppStoreVersionExperimentTreatments
        {
            appIcon,
            appIconName,
            appStoreVersionExperiment,
            appStoreVersionExperimentTreatmentLocalizations,
            name,
            promotedDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsInclude
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
        }


        // /v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations
        public Task<AppStoreVersionExperimentTreatmentLocalizationsResponse> GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizations(string id, string[]? filterLocale = default, GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, int? limit = default, int? limitAppScreenshotSets = default, int? limitAppPreviewSets = default, GetAppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsInclude[]? include = default)
        {
            string path = "/v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterLocale != null)
                uriBuilder.AddParameter("filter[locale]", string.Join(",", filterLocale));
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppStoreVersionExperimentTreatments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppScreenshotSets.HasValue)
                uriBuilder.AddParameter("limit[appScreenshotSets]", limitAppScreenshotSets.Value.ToString());
            if (limitAppPreviewSets.HasValue)
                uriBuilder.AddParameter("limit[appPreviewSets]", limitAppPreviewSets.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionExperimentTreatmentLocalizationsResponse>(message);
        }

        public class AppStoreVersionExperimentTreatmentsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class AppIcon
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? name { get; set; }
                    public AppIcon? appIcon { get; set; }
                    public string? appIconName { get; set; }
                    public string? promotedDate { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersionExperiment
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatmentLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatmentLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersionExperiment? appStoreVersionExperiment { get; set; }
                    public AppStoreVersionExperimentTreatmentLocalizations? appStoreVersionExperimentTreatmentLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionExperimentTreatments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperiments
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
            endDate,
            name,
            reviewRequired,
            startDate,
            started,
            state,
            trafficProportion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperimentTreatments
        {
            appIcon,
            appIconName,
            appStoreVersionExperiment,
            appStoreVersionExperimentTreatmentLocalizations,
            name,
            promotedDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsInclude
        {
            appStoreVersionExperiment,
            appStoreVersionExperimentTreatmentLocalizations,
        }


        // /v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments
        public Task<AppStoreVersionExperimentTreatmentsResponse> GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatments(string id, GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, int? limit = default, int? limitAppStoreVersionExperimentTreatmentLocalizations = default, GetAppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsInclude[]? include = default)
        {
            string path = "/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionExperiments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
            if (fieldsAppStoreVersionExperimentTreatments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppStoreVersionExperimentTreatmentLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatmentLocalizations]", limitAppStoreVersionExperimentTreatmentLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionExperimentTreatmentsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppPreviewSetsFilterPreviewType
        {
            IPHONE_67,
            IPHONE_61,
            IPHONE_65,
            IPHONE_58,
            IPHONE_55,
            IPHONE_47,
            IPHONE_40,
            IPHONE_35,
            IPAD_PRO_3GEN_129,
            IPAD_PRO_3GEN_11,
            IPAD_PRO_129,
            IPAD_105,
            IPAD_97,
            DESKTOP,
            APPLE_TV,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppPreviews
        {
            appPreviewSet,
            assetDeliveryState,
            fileName,
            fileSize,
            mimeType,
            previewFrameTimeCode,
            previewImage,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
            videoUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppPreviewSets
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            previewType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppPreviewSetsInclude
        {
            appCustomProductPageLocalization,
            appPreviews,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
        }


        // /v1/appStoreVersionLocalizations/{id}/appPreviewSets
        public Task<AppPreviewSetsResponse> GetAppStoreVersionLocalizationsAppPreviewSets(string id, GetAppStoreVersionLocalizationsAppPreviewSetsFilterPreviewType[]? filterPreviewType = default, string[]? filterAppCustomProductPageLocalization = default, string[]? filterAppStoreVersionExperimentTreatmentLocalization = default, GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppPreviews[]? fieldsAppPreviews = default, GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppPreviewSets[]? fieldsAppPreviewSets = default, GetAppStoreVersionLocalizationsAppPreviewSetsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limit = default, int? limitAppPreviews = default, GetAppStoreVersionLocalizationsAppPreviewSetsInclude[]? include = default)
        {
            string path = "/v1/appStoreVersionLocalizations/{id}/appPreviewSets";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPreviewType != null)
                uriBuilder.AddParameter("filter[previewType]", string.Join(",", filterPreviewType));
            if (filterAppCustomProductPageLocalization != null)
                uriBuilder.AddParameter("filter[appCustomProductPageLocalization]", string.Join(",", filterAppCustomProductPageLocalization));
            if (filterAppStoreVersionExperimentTreatmentLocalization != null)
                uriBuilder.AddParameter("filter[appStoreVersionExperimentTreatmentLocalization]", string.Join(",", filterAppStoreVersionExperimentTreatmentLocalization));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (fieldsAppPreviews != null)
                uriBuilder.AddParameter("fields[appPreviews]", string.Join(",", fieldsAppPreviews));
            if (fieldsAppPreviewSets != null)
                uriBuilder.AddParameter("fields[appPreviewSets]", string.Join(",", fieldsAppPreviewSets));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppPreviews.HasValue)
                uriBuilder.AddParameter("limit[appPreviews]", limitAppPreviews.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPreviewSetsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppScreenshotSetsFilterScreenshotDisplayType
        {
            APP_IPHONE_67,
            APP_IPHONE_61,
            APP_IPHONE_65,
            APP_IPHONE_58,
            APP_IPHONE_55,
            APP_IPHONE_47,
            APP_IPHONE_40,
            APP_IPHONE_35,
            APP_IPAD_PRO_3GEN_129,
            APP_IPAD_PRO_3GEN_11,
            APP_IPAD_PRO_129,
            APP_IPAD_105,
            APP_IPAD_97,
            APP_DESKTOP,
            APP_WATCH_ULTRA,
            APP_WATCH_SERIES_7,
            APP_WATCH_SERIES_4,
            APP_WATCH_SERIES_3,
            APP_APPLE_TV,
            IMESSAGE_APP_IPHONE_67,
            IMESSAGE_APP_IPHONE_61,
            IMESSAGE_APP_IPHONE_65,
            IMESSAGE_APP_IPHONE_58,
            IMESSAGE_APP_IPHONE_55,
            IMESSAGE_APP_IPHONE_47,
            IMESSAGE_APP_IPHONE_40,
            IMESSAGE_APP_IPAD_PRO_3GEN_129,
            IMESSAGE_APP_IPAD_PRO_3GEN_11,
            IMESSAGE_APP_IPAD_PRO_129,
            IMESSAGE_APP_IPAD_105,
            IMESSAGE_APP_IPAD_97,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppScreenshotSets
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
            screenshotDisplayType,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppCustomProductPageLocalizations
        {
            appCustomProductPageVersion,
            appPreviewSets,
            appScreenshotSets,
            locale,
            promotionalText,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppStoreVersionExperimentTreatmentLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersionExperimentTreatment,
            locale,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppScreenshots
        {
            appScreenshotSet,
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionLocalizationsAppScreenshotSetsInclude
        {
            appCustomProductPageLocalization,
            appScreenshots,
            appStoreVersionExperimentTreatmentLocalization,
            appStoreVersionLocalization,
        }


        // /v1/appStoreVersionLocalizations/{id}/appScreenshotSets
        public Task<AppScreenshotSetsResponse> GetAppStoreVersionLocalizationsAppScreenshotSets(string id, GetAppStoreVersionLocalizationsAppScreenshotSetsFilterScreenshotDisplayType[]? filterScreenshotDisplayType = default, string[]? filterAppCustomProductPageLocalization = default, string[]? filterAppStoreVersionExperimentTreatmentLocalization = default, GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppScreenshotSets[]? fieldsAppScreenshotSets = default, GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppCustomProductPageLocalizations[]? fieldsAppCustomProductPageLocalizations = default, GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppStoreVersionExperimentTreatmentLocalizations[]? fieldsAppStoreVersionExperimentTreatmentLocalizations = default, GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppScreenshots[]? fieldsAppScreenshots = default, GetAppStoreVersionLocalizationsAppScreenshotSetsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limit = default, int? limitAppScreenshots = default, GetAppStoreVersionLocalizationsAppScreenshotSetsInclude[]? include = default)
        {
            string path = "/v1/appStoreVersionLocalizations/{id}/appScreenshotSets";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterScreenshotDisplayType != null)
                uriBuilder.AddParameter("filter[screenshotDisplayType]", string.Join(",", filterScreenshotDisplayType));
            if (filterAppCustomProductPageLocalization != null)
                uriBuilder.AddParameter("filter[appCustomProductPageLocalization]", string.Join(",", filterAppCustomProductPageLocalization));
            if (filterAppStoreVersionExperimentTreatmentLocalization != null)
                uriBuilder.AddParameter("filter[appStoreVersionExperimentTreatmentLocalization]", string.Join(",", filterAppStoreVersionExperimentTreatmentLocalization));
            if (fieldsAppScreenshotSets != null)
                uriBuilder.AddParameter("fields[appScreenshotSets]", string.Join(",", fieldsAppScreenshotSets));
            if (fieldsAppCustomProductPageLocalizations != null)
                uriBuilder.AddParameter("fields[appCustomProductPageLocalizations]", string.Join(",", fieldsAppCustomProductPageLocalizations));
            if (fieldsAppStoreVersionExperimentTreatmentLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatmentLocalizations]", string.Join(",", fieldsAppStoreVersionExperimentTreatmentLocalizations));
            if (fieldsAppScreenshots != null)
                uriBuilder.AddParameter("fields[appScreenshots]", string.Join(",", fieldsAppScreenshots));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppScreenshots.HasValue)
                uriBuilder.AddParameter("limit[appScreenshots]", limitAppScreenshots.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppScreenshotSetsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAgeRatingDeclarationFieldsAgeRatingDeclarations
        {
            alcoholTobaccoOrDrugUseOrReferences,
            contests,
            gambling,
            gamblingAndContests,
            gamblingSimulated,
            horrorOrFearThemes,
            kidsAgeBand,
            matureOrSuggestiveThemes,
            medicalOrTreatmentInformation,
            profanityOrCrudeHumor,
            seventeenPlus,
            sexualContentGraphicAndNudity,
            sexualContentOrNudity,
            unrestrictedWebAccess,
            violenceCartoonOrFantasy,
            violenceRealistic,
            violenceRealisticProlongedGraphicOrSadistic,
        }


        // /v1/appStoreVersions/{id}/ageRatingDeclaration
        public Task<AgeRatingDeclarationResponse> GetAppStoreVersionsAgeRatingDeclaration(string id, GetAppStoreVersionsAgeRatingDeclarationFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default)
        {
            string path = "/v1/appStoreVersions/{id}/ageRatingDeclaration";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAgeRatingDeclarations != null)
                uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AgeRatingDeclarationResponse>(message);
        }

        public class GetAppStoreVersionsAppClipDefaultExperienceResponse
        {
            public class Data
            {
                public string type { get; set; } = "appClipDefaultExperiences";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
        public Task<GetAppStoreVersionsAppClipDefaultExperienceResponse> GetAppStoreVersionsAppClipDefaultExperience(string id)
        {
            string path = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetAppStoreVersionsAppClipDefaultExperienceResponse>(message);
        }

        public class PatchAppStoreVersionsAppClipDefaultExperienceRequest
        {
            public class Data
            {
                public string type { get; set; } = "appClipDefaultExperiences";
                public string id { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
        public Task PatchAppStoreVersionsAppClipDefaultExperience(string id, PatchAppStoreVersionsAppClipDefaultExperienceRequest request)
        {
            string path = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppClipDefaultExperienceFieldsAppClips
        {
            app,
            appClipAdvancedExperiences,
            appClipDefaultExperiences,
            bundleId,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppClipDefaultExperienceFieldsAppClipAppStoreReviewDetails
        {
            appClipDefaultExperience,
            invocationUrls,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppClipDefaultExperienceFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppClipDefaultExperienceFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppClipDefaultExperienceFieldsAppClipDefaultExperienceLocalizations
        {
            appClipDefaultExperience,
            appClipHeaderImage,
            locale,
            subtitle,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppClipDefaultExperienceInclude
        {
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            releaseWithAppStoreVersion,
        }


        // /v1/appStoreVersions/{id}/appClipDefaultExperience
        public Task<AppClipDefaultExperienceResponse> GetAppStoreVersionsAppClipDefaultExperience(string id, GetAppStoreVersionsAppClipDefaultExperienceFieldsAppClips[]? fieldsAppClips = default, GetAppStoreVersionsAppClipDefaultExperienceFieldsAppClipAppStoreReviewDetails[]? fieldsAppClipAppStoreReviewDetails = default, GetAppStoreVersionsAppClipDefaultExperienceFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppStoreVersionsAppClipDefaultExperienceFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GetAppStoreVersionsAppClipDefaultExperienceFieldsAppClipDefaultExperienceLocalizations[]? fieldsAppClipDefaultExperienceLocalizations = default, int? limitAppClipDefaultExperienceLocalizations = default, GetAppStoreVersionsAppClipDefaultExperienceInclude[]? include = default)
        {
            string path = "/v1/appStoreVersions/{id}/appClipDefaultExperience";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClips != null)
                uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
            if (fieldsAppClipAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appClipAppStoreReviewDetails]", string.Join(",", fieldsAppClipAppStoreReviewDetails));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (fieldsAppClipDefaultExperienceLocalizations != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperienceLocalizations]", string.Join(",", fieldsAppClipDefaultExperienceLocalizations));
            if (limitAppClipDefaultExperienceLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appClipDefaultExperienceLocalizations]", limitAppClipDefaultExperienceLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipDefaultExperienceResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreReviewDetailFieldsAppStoreReviewDetails
        {
            appStoreReviewAttachments,
            appStoreVersion,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreReviewDetailFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreReviewDetailFieldsAppStoreReviewAttachments
        {
            appStoreReviewDetail,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreReviewDetailInclude
        {
            appStoreReviewAttachments,
            appStoreVersion,
        }


        // /v1/appStoreVersions/{id}/appStoreReviewDetail
        public Task<AppStoreReviewDetailResponse> GetAppStoreVersionsAppStoreReviewDetail(string id, GetAppStoreVersionsAppStoreReviewDetailFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, GetAppStoreVersionsAppStoreReviewDetailFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppStoreVersionsAppStoreReviewDetailFieldsAppStoreReviewAttachments[]? fieldsAppStoreReviewAttachments = default, int? limitAppStoreReviewAttachments = default, GetAppStoreVersionsAppStoreReviewDetailInclude[]? include = default)
        {
            string path = "/v1/appStoreVersions/{id}/appStoreReviewDetail";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppStoreReviewAttachments != null)
                uriBuilder.AddParameter("fields[appStoreReviewAttachments]", string.Join(",", fieldsAppStoreReviewAttachments));
            if (limitAppStoreReviewAttachments.HasValue)
                uriBuilder.AddParameter("limit[appStoreReviewAttachments]", limitAppStoreReviewAttachments.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreReviewDetailResponse>(message);
        }

        public class AppStoreVersionExperimentsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public int? trafficProportion { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        READY_FOR_REVIEW,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        ACCEPTED,
                        APPROVED,
                        REJECTED,
                        COMPLETED,
                        STOPPED,
                    }
                    public State? state { get; set; }
                    public bool? reviewRequired { get; set; }
                    public string? startDate { get; set; }
                    public string? endDate { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperimentTreatments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperimentTreatments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppStoreVersionExperimentTreatments? appStoreVersionExperimentTreatments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionExperiments";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreVersionExperimentsFilterState
        {
            PREPARE_FOR_SUBMISSION,
            READY_FOR_REVIEW,
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            ACCEPTED,
            APPROVED,
            REJECTED,
            COMPLETED,
            STOPPED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreVersionExperimentsFieldsAppStoreVersionExperiments
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
            endDate,
            name,
            reviewRequired,
            startDate,
            started,
            state,
            trafficProportion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreVersionExperimentsFieldsAppStoreVersionExperimentTreatments
        {
            appIcon,
            appIconName,
            appStoreVersionExperiment,
            appStoreVersionExperimentTreatmentLocalizations,
            name,
            promotedDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreVersionExperimentsFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreVersionExperimentsInclude
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
        }


        // /v1/appStoreVersions/{id}/appStoreVersionExperiments
        public Task<AppStoreVersionExperimentsResponse> GetAppStoreVersionsAppStoreVersionExperiments(string id, GetAppStoreVersionsAppStoreVersionExperimentsFilterState[]? filterState = default, GetAppStoreVersionsAppStoreVersionExperimentsFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, GetAppStoreVersionsAppStoreVersionExperimentsFieldsAppStoreVersionExperimentTreatments[]? fieldsAppStoreVersionExperimentTreatments = default, GetAppStoreVersionsAppStoreVersionExperimentsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, int? limit = default, int? limitAppStoreVersionExperimentTreatments = default, GetAppStoreVersionsAppStoreVersionExperimentsInclude[]? include = default)
        {
            string path = "/v1/appStoreVersions/{id}/appStoreVersionExperiments";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterState != null)
                uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
            if (fieldsAppStoreVersionExperiments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
            if (fieldsAppStoreVersionExperimentTreatments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperimentTreatments]", string.Join(",", fieldsAppStoreVersionExperimentTreatments));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppStoreVersionExperimentTreatments.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionExperimentTreatments]", limitAppStoreVersionExperimentTreatments.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionExperimentsResponse>(message);
        }

        public class AppStoreVersionLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? description { get; set; }
                    public string? locale { get; set; }
                    public string? keywords { get; set; }
                    public string? marketingUrl { get; set; }
                    public string? promotionalText { get; set; }
                    public string? supportUrl { get; set; }
                    public string? whatsNew { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppScreenshotSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appScreenshotSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppPreviewSets
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreviewSets";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppScreenshotSets? appScreenshotSets { get; set; }
                    public AppPreviewSets? appPreviewSets { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersionLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreVersionLocalizationsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }



        // /v1/appStoreVersions/{id}/appStoreVersionLocalizations
        public Task<AppStoreVersionLocalizationsResponse> GetAppStoreVersionsAppStoreVersionLocalizations(string id, GetAppStoreVersionsAppStoreVersionLocalizationsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limit = default)
        {
            string path = "/v1/appStoreVersions/{id}/appStoreVersionLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionLocalizationsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreVersionPhasedReleaseFieldsAppStoreVersionPhasedReleases
        {
            appStoreVersion,
            currentDayNumber,
            phasedReleaseState,
            startDate,
            totalPauseDuration,
        }


        // /v1/appStoreVersions/{id}/appStoreVersionPhasedRelease
        public Task<AppStoreVersionPhasedReleaseResponse> GetAppStoreVersionsAppStoreVersionPhasedRelease(string id, GetAppStoreVersionsAppStoreVersionPhasedReleaseFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default)
        {
            string path = "/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionPhasedReleases != null)
                uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionPhasedReleaseResponse>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsAppStoreVersionSubmissionFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }



        // /v1/appStoreVersions/{id}/appStoreVersionSubmission
        public Task<AppStoreVersionSubmissionResponse> GetAppStoreVersionsAppStoreVersionSubmission(string id, string[]? fieldsAppStoreVersionSubmissions = default, GetAppStoreVersionsAppStoreVersionSubmissionFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, string[]? include = default)
        {
            string path = "/v1/appStoreVersions/{id}/appStoreVersionSubmission";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionSubmissions != null)
                uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionSubmissionResponse>(message);
        }

        public class GetAppStoreVersionsBuildResponse
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/appStoreVersions/{id}/relationships/build
        public Task<GetAppStoreVersionsBuildResponse> GetAppStoreVersionsBuild(string id)
        {
            string path = "/v1/appStoreVersions/{id}/relationships/build";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetAppStoreVersionsBuildResponse>(message);
        }

        public class PatchAppStoreVersionsBuildRequest
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/appStoreVersions/{id}/relationships/build
        public Task PatchAppStoreVersionsBuild(string id, PatchAppStoreVersionsBuildRequest request)
        {
            string path = "/v1/appStoreVersions/{id}/relationships/build";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsBuildFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        // /v1/appStoreVersions/{id}/build
        public Task<BuildResponse> GetAppStoreVersionsBuild(string id, GetAppStoreVersionsBuildFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/appStoreVersions/{id}/build";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildResponse>(message);
        }

        public class CustomerReviewsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public int? rating { get; set; }
                    public string? title { get; set; }
                    public string? body { get; set; }
                    public string? reviewerNickname { get; set; }
                    public string? createdDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Territory
                    {
                        ABW,
                        AFG,
                        AGO,
                        AIA,
                        ALB,
                        AND,
                        ANT,
                        ARE,
                        ARG,
                        ARM,
                        ASM,
                        ATG,
                        AUS,
                        AUT,
                        AZE,
                        BDI,
                        BEL,
                        BEN,
                        BES,
                        BFA,
                        BGD,
                        BGR,
                        BHR,
                        BHS,
                        BIH,
                        BLR,
                        BLZ,
                        BMU,
                        BOL,
                        BRA,
                        BRB,
                        BRN,
                        BTN,
                        BWA,
                        CAF,
                        CAN,
                        CHE,
                        CHL,
                        CHN,
                        CIV,
                        CMR,
                        COD,
                        COG,
                        COK,
                        COL,
                        COM,
                        CPV,
                        CRI,
                        CUB,
                        CUW,
                        CXR,
                        CYM,
                        CYP,
                        CZE,
                        DEU,
                        DJI,
                        DMA,
                        DNK,
                        DOM,
                        DZA,
                        ECU,
                        EGY,
                        ERI,
                        ESP,
                        EST,
                        ETH,
                        FIN,
                        FJI,
                        FLK,
                        FRA,
                        FRO,
                        FSM,
                        GAB,
                        GBR,
                        GEO,
                        GGY,
                        GHA,
                        GIB,
                        GIN,
                        GLP,
                        GMB,
                        GNB,
                        GNQ,
                        GRC,
                        GRD,
                        GRL,
                        GTM,
                        GUF,
                        GUM,
                        GUY,
                        HKG,
                        HND,
                        HRV,
                        HTI,
                        HUN,
                        IDN,
                        IMN,
                        IND,
                        IRL,
                        IRQ,
                        ISL,
                        ISR,
                        ITA,
                        JAM,
                        JEY,
                        JOR,
                        JPN,
                        KAZ,
                        KEN,
                        KGZ,
                        KHM,
                        KIR,
                        KNA,
                        KOR,
                        KWT,
                        LAO,
                        LBN,
                        LBR,
                        LBY,
                        LCA,
                        LIE,
                        LKA,
                        LSO,
                        LTU,
                        LUX,
                        LVA,
                        MAC,
                        MAR,
                        MCO,
                        MDA,
                        MDG,
                        MDV,
                        MEX,
                        MHL,
                        MKD,
                        MLI,
                        MLT,
                        MMR,
                        MNE,
                        MNG,
                        MNP,
                        MOZ,
                        MRT,
                        MSR,
                        MTQ,
                        MUS,
                        MWI,
                        MYS,
                        MYT,
                        NAM,
                        NCL,
                        NER,
                        NFK,
                        NGA,
                        NIC,
                        NIU,
                        NLD,
                        NOR,
                        NPL,
                        NRU,
                        NZL,
                        OMN,
                        PAK,
                        PAN,
                        PER,
                        PHL,
                        PLW,
                        PNG,
                        POL,
                        PRI,
                        PRT,
                        PRY,
                        PSE,
                        PYF,
                        QAT,
                        REU,
                        ROU,
                        RUS,
                        RWA,
                        SAU,
                        SEN,
                        SGP,
                        SHN,
                        SLB,
                        SLE,
                        SLV,
                        SMR,
                        SOM,
                        SPM,
                        SRB,
                        SSD,
                        STP,
                        SUR,
                        SVK,
                        SVN,
                        SWE,
                        SWZ,
                        SXM,
                        SYC,
                        TCA,
                        TCD,
                        TGO,
                        THA,
                        TJK,
                        TKM,
                        TLS,
                        TON,
                        TTO,
                        TUN,
                        TUR,
                        TUV,
                        TWN,
                        TZA,
                        UGA,
                        UKR,
                        UMI,
                        URY,
                        USA,
                        UZB,
                        VAT,
                        VCT,
                        VEN,
                        VGB,
                        VIR,
                        VNM,
                        VUT,
                        WLF,
                        WSM,
                        YEM,
                        ZAF,
                        ZMB,
                        ZWE,
                    }
                    public Territory? territory { get; set; }
                }

                public class Relationships
                {
                    public class Response
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "customerReviewResponses";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Response? response { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "customerReviews";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? responseBody { get; set; }
                    public string? lastModifiedDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PUBLISHED,
                        PENDING_PUBLISH,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class Review
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "customerReviews";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Review? review { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "customerReviewResponses";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsCustomerReviewsFilterTerritory
        {
            ABW,
            AFG,
            AGO,
            AIA,
            ALB,
            AND,
            ANT,
            ARE,
            ARG,
            ARM,
            ASM,
            ATG,
            AUS,
            AUT,
            AZE,
            BDI,
            BEL,
            BEN,
            BES,
            BFA,
            BGD,
            BGR,
            BHR,
            BHS,
            BIH,
            BLR,
            BLZ,
            BMU,
            BOL,
            BRA,
            BRB,
            BRN,
            BTN,
            BWA,
            CAF,
            CAN,
            CHE,
            CHL,
            CHN,
            CIV,
            CMR,
            COD,
            COG,
            COK,
            COL,
            COM,
            CPV,
            CRI,
            CUB,
            CUW,
            CXR,
            CYM,
            CYP,
            CZE,
            DEU,
            DJI,
            DMA,
            DNK,
            DOM,
            DZA,
            ECU,
            EGY,
            ERI,
            ESP,
            EST,
            ETH,
            FIN,
            FJI,
            FLK,
            FRA,
            FRO,
            FSM,
            GAB,
            GBR,
            GEO,
            GGY,
            GHA,
            GIB,
            GIN,
            GLP,
            GMB,
            GNB,
            GNQ,
            GRC,
            GRD,
            GRL,
            GTM,
            GUF,
            GUM,
            GUY,
            HKG,
            HND,
            HRV,
            HTI,
            HUN,
            IDN,
            IMN,
            IND,
            IRL,
            IRQ,
            ISL,
            ISR,
            ITA,
            JAM,
            JEY,
            JOR,
            JPN,
            KAZ,
            KEN,
            KGZ,
            KHM,
            KIR,
            KNA,
            KOR,
            KWT,
            LAO,
            LBN,
            LBR,
            LBY,
            LCA,
            LIE,
            LKA,
            LSO,
            LTU,
            LUX,
            LVA,
            MAC,
            MAR,
            MCO,
            MDA,
            MDG,
            MDV,
            MEX,
            MHL,
            MKD,
            MLI,
            MLT,
            MMR,
            MNE,
            MNG,
            MNP,
            MOZ,
            MRT,
            MSR,
            MTQ,
            MUS,
            MWI,
            MYS,
            MYT,
            NAM,
            NCL,
            NER,
            NFK,
            NGA,
            NIC,
            NIU,
            NLD,
            NOR,
            NPL,
            NRU,
            NZL,
            OMN,
            PAK,
            PAN,
            PER,
            PHL,
            PLW,
            PNG,
            POL,
            PRI,
            PRT,
            PRY,
            PSE,
            PYF,
            QAT,
            REU,
            ROU,
            RUS,
            RWA,
            SAU,
            SEN,
            SGP,
            SHN,
            SLB,
            SLE,
            SLV,
            SMR,
            SOM,
            SPM,
            SRB,
            SSD,
            STP,
            SUR,
            SVK,
            SVN,
            SWE,
            SWZ,
            SXM,
            SYC,
            TCA,
            TCD,
            TGO,
            THA,
            TJK,
            TKM,
            TLS,
            TON,
            TTO,
            TUN,
            TUR,
            TUV,
            TWN,
            TZA,
            UGA,
            UKR,
            UMI,
            URY,
            USA,
            UZB,
            VAT,
            VCT,
            VEN,
            VGB,
            VIR,
            VNM,
            VUT,
            WLF,
            WSM,
            YEM,
            ZAF,
            ZMB,
            ZWE,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsCustomerReviewsSort
        {
            createdDate,
            [EnumMember(Value = "-createdDate")]
            createdDateDescending,
            rating,
            [EnumMember(Value = "-rating")]
            ratingDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsCustomerReviewsFieldsCustomerReviews
        {
            body,
            createdDate,
            rating,
            response,
            reviewerNickname,
            territory,
            title,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsCustomerReviewsFieldsCustomerReviewResponses
        {
            lastModifiedDate,
            responseBody,
            review,
            state,
        }




        // /v1/appStoreVersions/{id}/customerReviews
        public Task<CustomerReviewsResponse> GetAppStoreVersionsCustomerReviews(string id, string[]? filterRating = default, GetAppStoreVersionsCustomerReviewsFilterTerritory[]? filterTerritory = default, bool? existsPublishedResponse = default, GetAppStoreVersionsCustomerReviewsSort[]? sort = default, GetAppStoreVersionsCustomerReviewsFieldsCustomerReviews[]? fieldsCustomerReviews = default, GetAppStoreVersionsCustomerReviewsFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/appStoreVersions/{id}/customerReviews";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterRating != null)
                uriBuilder.AddParameter("filter[rating]", string.Join(",", filterRating));
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (existsPublishedResponse.HasValue)
                uriBuilder.AddParameter("exists[publishedResponse]", existsPublishedResponse.Value.ToString());
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsCustomerReviews != null)
                uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
            if (fieldsCustomerReviewResponses != null)
                uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CustomerReviewsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppStoreVersionsRoutingAppCoverageFieldsRoutingAppCoverages
        {
            appStoreVersion,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        // /v1/appStoreVersions/{id}/routingAppCoverage
        public Task<RoutingAppCoverageResponse> GetAppStoreVersionsRoutingAppCoverage(string id, GetAppStoreVersionsRoutingAppCoverageFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default)
        {
            string path = "/v1/appStoreVersions/{id}/routingAppCoverage";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsRoutingAppCoverages != null)
                uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<RoutingAppCoverageResponse>(message);
        }

        public class AppClipsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? bundleId { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperiences
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AppClipDefaultExperiences? appClipDefaultExperiences { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClips";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppClipsFieldsAppClips
        {
            app,
            appClipAdvancedExperiences,
            appClipDefaultExperiences,
            bundleId,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppClipsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppClipsFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppClipsInclude
        {
            app,
            appClipDefaultExperiences,
        }


        // /v1/apps/{id}/appClips
        public Task<AppClipsResponse> GetAppsAppClips(string id, string[]? filterBundleId = default, GetAppsAppClipsFieldsAppClips[]? fieldsAppClips = default, GetAppsAppClipsFieldsApps[]? fieldsApps = default, GetAppsAppClipsFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, int? limit = default, int? limitAppClipDefaultExperiences = default, GetAppsAppClipsInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/appClips";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterBundleId != null)
                uriBuilder.AddParameter("filter[bundleId]", string.Join(",", filterBundleId));
            if (fieldsAppClips != null)
                uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppClipDefaultExperiences.HasValue)
                uriBuilder.AddParameter("limit[appClipDefaultExperiences]", limitAppClipDefaultExperiences.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipsResponse>(message);
        }

        public class AppCustomProductPagesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? url { get; set; }
                    public bool? visible { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AppCustomProductPageVersions? appCustomProductPageVersions { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appCustomProductPages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppCustomProductPagesFieldsAppCustomProductPages
        {
            app,
            appCustomProductPageVersions,
            appStoreVersionTemplate,
            customProductPageTemplate,
            name,
            url,
            visible,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppCustomProductPagesFieldsAppCustomProductPageVersions
        {
            appCustomProductPage,
            appCustomProductPageLocalizations,
            state,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppCustomProductPagesFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppCustomProductPagesInclude
        {
            app,
            appCustomProductPageVersions,
        }


        // /v1/apps/{id}/appCustomProductPages
        public Task<AppCustomProductPagesResponse> GetAppsAppCustomProductPages(string id, string[]? filterVisible = default, GetAppsAppCustomProductPagesFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, GetAppsAppCustomProductPagesFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, GetAppsAppCustomProductPagesFieldsApps[]? fieldsApps = default, int? limit = default, int? limitAppCustomProductPageVersions = default, GetAppsAppCustomProductPagesInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/appCustomProductPages";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterVisible != null)
                uriBuilder.AddParameter("filter[visible]", string.Join(",", filterVisible));
            if (fieldsAppCustomProductPages != null)
                uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
            if (fieldsAppCustomProductPageVersions != null)
                uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppCustomProductPageVersions.HasValue)
                uriBuilder.AddParameter("limit[appCustomProductPageVersions]", limitAppCustomProductPageVersions.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppCustomProductPagesResponse>(message);
        }

        public class AppEventsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class TerritorySchedules
                    {
                        public string[]? territories { get; set; }
                        public string? publishStart { get; set; }
                        public string? eventStart { get; set; }
                        public string? eventEnd { get; set; }
                    }

                    public class ArchivedTerritorySchedules
                    {
                        public string[]? territories { get; set; }
                        public string? publishStart { get; set; }
                        public string? eventStart { get; set; }
                        public string? eventEnd { get; set; }
                    }

                    public string? referenceName { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Badge
                    {
                        LIVE_EVENT,
                        PREMIERE,
                        CHALLENGE,
                        COMPETITION,
                        NEW_SEASON,
                        MAJOR_UPDATE,
                        SPECIAL_EVENT,
                    }
                    public Badge? badge { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum EventState
                    {
                        DRAFT,
                        READY_FOR_REVIEW,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        REJECTED,
                        ACCEPTED,
                        APPROVED,
                        PUBLISHED,
                        PAST,
                        ARCHIVED,
                    }
                    public EventState? eventState { get; set; }
                    public string? deepLink { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum PurchaseRequirement
                    {
                        NO_COST_ASSOCIATED,
                        IN_APP_PURCHASE,
                        SUBSCRIPTION,
                        IN_APP_PURCHASE_AND_SUBSCRIPTION,
                        IN_APP_PURCHASE_OR_SUBSCRIPTION,
                    }
                    public PurchaseRequirement? purchaseRequirement { get; set; }
                    public string? primaryLocale { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Priority
                    {
                        HIGH,
                        NORMAL,
                    }
                    public Priority? priority { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Purpose
                    {
                        APPROPRIATE_FOR_ALL_USERS,
                        ATTRACT_NEW_USERS,
                        KEEP_ACTIVE_USERS_INFORMED,
                        BRING_BACK_LAPSED_USERS,
                    }
                    public Purpose? purpose { get; set; }
                    public TerritorySchedules[]? territorySchedules { get; set; }
                    public ArchivedTerritorySchedules[]? archivedTerritorySchedules { get; set; }
                }

                public class Relationships
                {
                    public class Localizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Localizations? localizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEvents";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? locale { get; set; }
                    public string? name { get; set; }
                    public string? shortDescription { get; set; }
                    public string? longDescription { get; set; }
                }

                public class Relationships
                {
                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEventScreenshots
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEventVideoClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEventVideoClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public AppEvent? appEvent { get; set; }
                    public AppEventScreenshots? appEventScreenshots { get; set; }
                    public AppEventVideoClips? appEventVideoClips { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appEventLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppEventsFilterEventState
        {
            DRAFT,
            READY_FOR_REVIEW,
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            REJECTED,
            ACCEPTED,
            APPROVED,
            PUBLISHED,
            PAST,
            ARCHIVED,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppEventsFieldsAppEventLocalizations
        {
            appEvent,
            appEventScreenshots,
            appEventVideoClips,
            locale,
            longDescription,
            name,
            shortDescription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppEventsFieldsAppEvents
        {
            app,
            archivedTerritorySchedules,
            badge,
            deepLink,
            eventState,
            localizations,
            primaryLocale,
            priority,
            purchaseRequirement,
            purpose,
            referenceName,
            territorySchedules,
        }





        // /v1/apps/{id}/appEvents
        public Task<AppEventsResponse> GetAppsAppEvents(string id, GetAppsAppEventsFilterEventState[]? filterEventState = default, string[]? filterId = default, GetAppsAppEventsFieldsAppEventLocalizations[]? fieldsAppEventLocalizations = default, GetAppsAppEventsFieldsAppEvents[]? fieldsAppEvents = default, int? limit = default, int? limitLocalizations = default, string[]? include = default)
        {
            string path = "/v1/apps/{id}/appEvents";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterEventState != null)
                uriBuilder.AddParameter("filter[eventState]", string.Join(",", filterEventState));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (fieldsAppEventLocalizations != null)
                uriBuilder.AddParameter("fields[appEventLocalizations]", string.Join(",", fieldsAppEventLocalizations));
            if (fieldsAppEvents != null)
                uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitLocalizations.HasValue)
                uriBuilder.AddParameter("limit[localizations]", limitLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEventsResponse>(message);
        }

        public class AppInfosResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreState
                    {
                        ACCEPTED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        DEVELOPER_REJECTED,
                        IN_REVIEW,
                        INVALID_BINARY,
                        METADATA_REJECTED,
                        PENDING_APPLE_RELEASE,
                        PENDING_CONTRACT,
                        PENDING_DEVELOPER_RELEASE,
                        PREPARE_FOR_SUBMISSION,
                        PREORDER_READY_FOR_SALE,
                        PROCESSING_FOR_APP_STORE,
                        READY_FOR_REVIEW,
                        READY_FOR_SALE,
                        REJECTED,
                        REMOVED_FROM_SALE,
                        WAITING_FOR_EXPORT_COMPLIANCE,
                        WAITING_FOR_REVIEW,
                        REPLACED_WITH_NEW_VERSION,
                    }
                    public AppStoreState? appStoreState { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreAgeRating
                    {
                        FOUR_PLUS,
                        NINE_PLUS,
                        TWELVE_PLUS,
                        SEVENTEEN_PLUS,
                    }
                    public AppStoreAgeRating? appStoreAgeRating { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum BrazilAgeRating
                    {
                        L,
                        TEN,
                        TWELVE,
                        FOURTEEN,
                        SIXTEEN,
                        EIGHTEEN,
                    }
                    public BrazilAgeRating? brazilAgeRating { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum KidsAgeBand
                    {
                        FIVE_AND_UNDER,
                        SIX_TO_EIGHT,
                        NINE_TO_ELEVEN,
                    }
                    public KidsAgeBand? kidsAgeBand { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AgeRatingDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ageRatingDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfoLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfoLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PrimaryCategory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryOne
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PrimarySubcategoryTwo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondaryCategory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryOne
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SecondarySubcategoryTwo
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCategories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AgeRatingDeclaration? ageRatingDeclaration { get; set; }
                    public AppInfoLocalizations? appInfoLocalizations { get; set; }
                    public PrimaryCategory? primaryCategory { get; set; }
                    public PrimarySubcategoryOne? primarySubcategoryOne { get; set; }
                    public PrimarySubcategoryTwo? primarySubcategoryTwo { get; set; }
                    public SecondaryCategory? secondaryCategory { get; set; }
                    public SecondarySubcategoryOne? secondarySubcategoryOne { get; set; }
                    public SecondarySubcategoryTwo? secondarySubcategoryTwo { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appInfos";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppInfosFieldsAgeRatingDeclarations
        {
            alcoholTobaccoOrDrugUseOrReferences,
            contests,
            gambling,
            gamblingAndContests,
            gamblingSimulated,
            horrorOrFearThemes,
            kidsAgeBand,
            matureOrSuggestiveThemes,
            medicalOrTreatmentInformation,
            profanityOrCrudeHumor,
            seventeenPlus,
            sexualContentGraphicAndNudity,
            sexualContentOrNudity,
            unrestrictedWebAccess,
            violenceCartoonOrFantasy,
            violenceRealistic,
            violenceRealisticProlongedGraphicOrSadistic,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppInfosFieldsAppInfos
        {
            ageRatingDeclaration,
            app,
            appInfoLocalizations,
            appStoreAgeRating,
            appStoreState,
            brazilAgeRating,
            kidsAgeBand,
            primaryCategory,
            primarySubcategoryOne,
            primarySubcategoryTwo,
            secondaryCategory,
            secondarySubcategoryOne,
            secondarySubcategoryTwo,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppInfosFieldsAppInfoLocalizations
        {
            appInfo,
            locale,
            name,
            privacyChoicesUrl,
            privacyPolicyText,
            privacyPolicyUrl,
            subtitle,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppInfosFieldsAppCategories
        {
            parent,
            platforms,
            subcategories,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppInfosFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppInfosInclude
        {
            ageRatingDeclaration,
            app,
            appInfoLocalizations,
            primaryCategory,
            primarySubcategoryOne,
            primarySubcategoryTwo,
            secondaryCategory,
            secondarySubcategoryOne,
            secondarySubcategoryTwo,
        }


        // /v1/apps/{id}/appInfos
        public Task<AppInfosResponse> GetAppsAppInfos(string id, GetAppsAppInfosFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, GetAppsAppInfosFieldsAppInfos[]? fieldsAppInfos = default, GetAppsAppInfosFieldsAppInfoLocalizations[]? fieldsAppInfoLocalizations = default, GetAppsAppInfosFieldsAppCategories[]? fieldsAppCategories = default, GetAppsAppInfosFieldsApps[]? fieldsApps = default, int? limit = default, int? limitAppInfoLocalizations = default, GetAppsAppInfosInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/appInfos";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAgeRatingDeclarations != null)
                uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
            if (fieldsAppInfos != null)
                uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
            if (fieldsAppInfoLocalizations != null)
                uriBuilder.AddParameter("fields[appInfoLocalizations]", string.Join(",", fieldsAppInfoLocalizations));
            if (fieldsAppCategories != null)
                uriBuilder.AddParameter("fields[appCategories]", string.Join(",", fieldsAppCategories));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppInfoLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appInfoLocalizations]", limitAppInfoLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppInfosResponse>(message);
        }

        public class AppStoreVersionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? versionString { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum AppStoreState
                    {
                        ACCEPTED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        DEVELOPER_REJECTED,
                        IN_REVIEW,
                        INVALID_BINARY,
                        METADATA_REJECTED,
                        PENDING_APPLE_RELEASE,
                        PENDING_CONTRACT,
                        PENDING_DEVELOPER_RELEASE,
                        PREPARE_FOR_SUBMISSION,
                        PREORDER_READY_FOR_SALE,
                        PROCESSING_FOR_APP_STORE,
                        READY_FOR_REVIEW,
                        READY_FOR_SALE,
                        REJECTED,
                        REMOVED_FROM_SALE,
                        WAITING_FOR_EXPORT_COMPLIANCE,
                        WAITING_FOR_REVIEW,
                        REPLACED_WITH_NEW_VERSION,
                    }
                    public AppStoreState? appStoreState { get; set; }
                    public string? copyright { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ReleaseType
                    {
                        MANUAL,
                        AFTER_APPROVAL,
                        SCHEDULED,
                    }
                    public ReleaseType? releaseType { get; set; }
                    public string? earliestReleaseDate { get; set; }
                    public bool? downloadable { get; set; }
                    public string? createdDate { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AgeRatingDeclaration
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ageRatingDeclarations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Build
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionPhasedRelease
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionPhasedReleases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class RoutingAppCoverage
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "routingAppCoverages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionSubmission
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppClipDefaultExperience
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClipDefaultExperiences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperiments
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public App? app { get; set; }
                    public AgeRatingDeclaration? ageRatingDeclaration { get; set; }
                    public AppStoreVersionLocalizations? appStoreVersionLocalizations { get; set; }
                    public Build? build { get; set; }
                    public AppStoreVersionPhasedRelease? appStoreVersionPhasedRelease { get; set; }
                    public RoutingAppCoverage? routingAppCoverage { get; set; }
                    public AppStoreReviewDetail? appStoreReviewDetail { get; set; }
                    public AppStoreVersionSubmission? appStoreVersionSubmission { get; set; }
                    public AppClipDefaultExperience? appClipDefaultExperience { get; set; }
                    public AppStoreVersionExperiments? appStoreVersionExperiments { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appStoreVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFilterAppStoreState
        {
            ACCEPTED,
            DEVELOPER_REMOVED_FROM_SALE,
            DEVELOPER_REJECTED,
            IN_REVIEW,
            INVALID_BINARY,
            METADATA_REJECTED,
            PENDING_APPLE_RELEASE,
            PENDING_CONTRACT,
            PENDING_DEVELOPER_RELEASE,
            PREPARE_FOR_SUBMISSION,
            PREORDER_READY_FOR_SALE,
            PROCESSING_FOR_APP_STORE,
            READY_FOR_REVIEW,
            READY_FOR_SALE,
            REJECTED,
            REMOVED_FROM_SALE,
            WAITING_FOR_EXPORT_COMPLIANCE,
            WAITING_FOR_REVIEW,
            REPLACED_WITH_NEW_VERSION,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFilterPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsAppStoreVersionExperiments
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
            endDate,
            name,
            reviewRequired,
            startDate,
            started,
            state,
            trafficProportion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsAgeRatingDeclarations
        {
            alcoholTobaccoOrDrugUseOrReferences,
            contests,
            gambling,
            gamblingAndContests,
            gamblingSimulated,
            horrorOrFearThemes,
            kidsAgeBand,
            matureOrSuggestiveThemes,
            medicalOrTreatmentInformation,
            profanityOrCrudeHumor,
            seventeenPlus,
            sexualContentGraphicAndNudity,
            sexualContentOrNudity,
            unrestrictedWebAccess,
            violenceCartoonOrFantasy,
            violenceRealistic,
            violenceRealisticProlongedGraphicOrSadistic,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsAppStoreReviewDetails
        {
            appStoreReviewAttachments,
            appStoreVersion,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsRoutingAppCoverages
        {
            appStoreVersion,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsAppStoreVersionPhasedReleases
        {
            appStoreVersion,
            currentDayNumber,
            phasedReleaseState,
            startDate,
            totalPauseDuration,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsAppStoreVersionsInclude
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            routingAppCoverage,
        }


        // /v1/apps/{id}/appStoreVersions
        public Task<AppStoreVersionsResponse> GetAppsAppStoreVersions(string id, GetAppsAppStoreVersionsFilterAppStoreState[]? filterAppStoreState = default, GetAppsAppStoreVersionsFilterPlatform[]? filterPlatform = default, string[]? filterVersionString = default, string[]? filterId = default, GetAppsAppStoreVersionsFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, GetAppsAppStoreVersionsFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, string[]? fieldsAppStoreVersionSubmissions = default, GetAppsAppStoreVersionsFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, GetAppsAppStoreVersionsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppsAppStoreVersionsFieldsApps[]? fieldsApps = default, GetAppsAppStoreVersionsFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, GetAppsAppStoreVersionsFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GetAppsAppStoreVersionsFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, GetAppsAppStoreVersionsFieldsBuilds[]? fieldsBuilds = default, GetAppsAppStoreVersionsFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limit = default, int? limitAppStoreVersionLocalizations = default, int? limitAppStoreVersionExperiments = default, GetAppsAppStoreVersionsInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/appStoreVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterAppStoreState != null)
                uriBuilder.AddParameter("filter[appStoreState]", string.Join(",", filterAppStoreState));
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterVersionString != null)
                uriBuilder.AddParameter("filter[versionString]", string.Join(",", filterVersionString));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (fieldsAppStoreVersionExperiments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
            if (fieldsAgeRatingDeclarations != null)
                uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
            if (fieldsAppStoreVersionSubmissions != null)
                uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
            if (fieldsAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsRoutingAppCoverages != null)
                uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (fieldsAppStoreVersionPhasedReleases != null)
                uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitAppStoreVersionLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());
            if (limitAppStoreVersionExperiments.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionsResponse>(message);
        }



        // /v1/apps/{id}/availableTerritories
        public Task<TerritoriesResponse> GetAppsAvailableTerritories(string id, string[]? fieldsTerritories = default, int? limit = default)
        {
            string path = "/v1/apps/{id}/availableTerritories";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<TerritoriesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsBetaAppLocalizationsFieldsBetaAppLocalizations
        {
            app,
            description,
            feedbackEmail,
            locale,
            marketingUrl,
            privacyPolicyUrl,
            tvOsPrivacyPolicy,
        }



        // /v1/apps/{id}/betaAppLocalizations
        public Task<BetaAppLocalizationsResponse> GetAppsBetaAppLocalizations(string id, GetAppsBetaAppLocalizationsFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, int? limit = default)
        {
            string path = "/v1/apps/{id}/betaAppLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaAppLocalizations != null)
                uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppLocalizationsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsBetaAppReviewDetailFieldsBetaAppReviewDetails
        {
            app,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        // /v1/apps/{id}/betaAppReviewDetail
        public Task<BetaAppReviewDetailResponse> GetAppsBetaAppReviewDetail(string id, GetAppsBetaAppReviewDetailFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default)
        {
            string path = "/v1/apps/{id}/betaAppReviewDetail";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaAppReviewDetails != null)
                uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppReviewDetailResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsBetaGroupsFieldsBetaGroups
        {
            app,
            betaTesters,
            builds,
            createdDate,
            feedbackEnabled,
            hasAccessToAllBuilds,
            iosBuildsAvailableForAppleSiliconMac,
            isInternalGroup,
            name,
            publicLink,
            publicLinkEnabled,
            publicLinkId,
            publicLinkLimit,
            publicLinkLimitEnabled,
        }



        // /v1/apps/{id}/betaGroups
        public Task<BetaGroupsResponse> GetAppsBetaGroups(string id, GetAppsBetaGroupsFieldsBetaGroups[]? fieldsBetaGroups = default, int? limit = default)
        {
            string path = "/v1/apps/{id}/betaGroups";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaGroupsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsBetaLicenseAgreementFieldsBetaLicenseAgreements
        {
            agreementText,
            app,
        }


        // /v1/apps/{id}/betaLicenseAgreement
        public Task<BetaLicenseAgreementResponse> GetAppsBetaLicenseAgreement(string id, GetAppsBetaLicenseAgreementFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default)
        {
            string path = "/v1/apps/{id}/betaLicenseAgreement";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaLicenseAgreements != null)
                uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaLicenseAgreementResponse>(message);
        }

        public class DeleteAppsBetaTestersRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/apps/{id}/relationships/betaTesters
        public Task DeleteAppsBetaTesters(string id, DeleteAppsBetaTestersRequest request)
        {
            string path = "/v1/apps/{id}/relationships/betaTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsBuildsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



        // /v1/apps/{id}/builds
        public Task<BuildsResponse> GetAppsBuilds(string id, GetAppsBuildsFieldsBuilds[]? fieldsBuilds = default, int? limit = default)
        {
            string path = "/v1/apps/{id}/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCiProductFieldsCiProducts
        {
            additionalRepositories,
            app,
            buildRuns,
            bundleId,
            createdDate,
            name,
            primaryRepositories,
            productType,
            workflows,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCiProductFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCiProductFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCiProductFieldsBundleIds
        {
            app,
            bundleIdCapabilities,
            identifier,
            name,
            platform,
            profiles,
            seedId,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCiProductInclude
        {
            app,
            bundleId,
            primaryRepositories,
        }


        // /v1/apps/{id}/ciProduct
        public Task<CiProductResponse> GetAppsCiProduct(string id, GetAppsCiProductFieldsCiProducts[]? fieldsCiProducts = default, GetAppsCiProductFieldsApps[]? fieldsApps = default, GetAppsCiProductFieldsScmRepositories[]? fieldsScmRepositories = default, GetAppsCiProductFieldsBundleIds[]? fieldsBundleIds = default, int? limitPrimaryRepositories = default, GetAppsCiProductInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/ciProduct";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (fieldsBundleIds != null)
                uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));
            if (limitPrimaryRepositories.HasValue)
                uriBuilder.AddParameter("limit[primaryRepositories]", limitPrimaryRepositories.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiProductResponse>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCustomerReviewsFilterTerritory
        {
            ABW,
            AFG,
            AGO,
            AIA,
            ALB,
            AND,
            ANT,
            ARE,
            ARG,
            ARM,
            ASM,
            ATG,
            AUS,
            AUT,
            AZE,
            BDI,
            BEL,
            BEN,
            BES,
            BFA,
            BGD,
            BGR,
            BHR,
            BHS,
            BIH,
            BLR,
            BLZ,
            BMU,
            BOL,
            BRA,
            BRB,
            BRN,
            BTN,
            BWA,
            CAF,
            CAN,
            CHE,
            CHL,
            CHN,
            CIV,
            CMR,
            COD,
            COG,
            COK,
            COL,
            COM,
            CPV,
            CRI,
            CUB,
            CUW,
            CXR,
            CYM,
            CYP,
            CZE,
            DEU,
            DJI,
            DMA,
            DNK,
            DOM,
            DZA,
            ECU,
            EGY,
            ERI,
            ESP,
            EST,
            ETH,
            FIN,
            FJI,
            FLK,
            FRA,
            FRO,
            FSM,
            GAB,
            GBR,
            GEO,
            GGY,
            GHA,
            GIB,
            GIN,
            GLP,
            GMB,
            GNB,
            GNQ,
            GRC,
            GRD,
            GRL,
            GTM,
            GUF,
            GUM,
            GUY,
            HKG,
            HND,
            HRV,
            HTI,
            HUN,
            IDN,
            IMN,
            IND,
            IRL,
            IRQ,
            ISL,
            ISR,
            ITA,
            JAM,
            JEY,
            JOR,
            JPN,
            KAZ,
            KEN,
            KGZ,
            KHM,
            KIR,
            KNA,
            KOR,
            KWT,
            LAO,
            LBN,
            LBR,
            LBY,
            LCA,
            LIE,
            LKA,
            LSO,
            LTU,
            LUX,
            LVA,
            MAC,
            MAR,
            MCO,
            MDA,
            MDG,
            MDV,
            MEX,
            MHL,
            MKD,
            MLI,
            MLT,
            MMR,
            MNE,
            MNG,
            MNP,
            MOZ,
            MRT,
            MSR,
            MTQ,
            MUS,
            MWI,
            MYS,
            MYT,
            NAM,
            NCL,
            NER,
            NFK,
            NGA,
            NIC,
            NIU,
            NLD,
            NOR,
            NPL,
            NRU,
            NZL,
            OMN,
            PAK,
            PAN,
            PER,
            PHL,
            PLW,
            PNG,
            POL,
            PRI,
            PRT,
            PRY,
            PSE,
            PYF,
            QAT,
            REU,
            ROU,
            RUS,
            RWA,
            SAU,
            SEN,
            SGP,
            SHN,
            SLB,
            SLE,
            SLV,
            SMR,
            SOM,
            SPM,
            SRB,
            SSD,
            STP,
            SUR,
            SVK,
            SVN,
            SWE,
            SWZ,
            SXM,
            SYC,
            TCA,
            TCD,
            TGO,
            THA,
            TJK,
            TKM,
            TLS,
            TON,
            TTO,
            TUN,
            TUR,
            TUV,
            TWN,
            TZA,
            UGA,
            UKR,
            UMI,
            URY,
            USA,
            UZB,
            VAT,
            VCT,
            VEN,
            VGB,
            VIR,
            VNM,
            VUT,
            WLF,
            WSM,
            YEM,
            ZAF,
            ZMB,
            ZWE,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCustomerReviewsSort
        {
            createdDate,
            [EnumMember(Value = "-createdDate")]
            createdDateDescending,
            rating,
            [EnumMember(Value = "-rating")]
            ratingDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCustomerReviewsFieldsCustomerReviews
        {
            body,
            createdDate,
            rating,
            response,
            reviewerNickname,
            territory,
            title,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsCustomerReviewsFieldsCustomerReviewResponses
        {
            lastModifiedDate,
            responseBody,
            review,
            state,
        }




        // /v1/apps/{id}/customerReviews
        public Task<CustomerReviewsResponse> GetAppsCustomerReviews(string id, string[]? filterRating = default, GetAppsCustomerReviewsFilterTerritory[]? filterTerritory = default, bool? existsPublishedResponse = default, GetAppsCustomerReviewsSort[]? sort = default, GetAppsCustomerReviewsFieldsCustomerReviews[]? fieldsCustomerReviews = default, GetAppsCustomerReviewsFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/apps/{id}/customerReviews";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterRating != null)
                uriBuilder.AddParameter("filter[rating]", string.Join(",", filterRating));
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (existsPublishedResponse.HasValue)
                uriBuilder.AddParameter("exists[publishedResponse]", existsPublishedResponse.Value.ToString());
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsCustomerReviews != null)
                uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
            if (fieldsCustomerReviewResponses != null)
                uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CustomerReviewsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsEndUserLicenseAgreementFieldsEndUserLicenseAgreements
        {
            agreementText,
            app,
            territories,
        }


        // /v1/apps/{id}/endUserLicenseAgreement
        public Task<EndUserLicenseAgreementResponse> GetAppsEndUserLicenseAgreement(string id, GetAppsEndUserLicenseAgreementFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default)
        {
            string path = "/v1/apps/{id}/endUserLicenseAgreement";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsEndUserLicenseAgreements != null)
                uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<EndUserLicenseAgreementResponse>(message);
        }

        public class GameCenterEnabledVersionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class IconAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Platform
                    {
                        IOS,
                        MAC_OS,
                        TV_OS,
                    }
                    public Platform? platform { get; set; }
                    public string? versionString { get; set; }
                    public IconAsset? iconAsset { get; set; }
                }

                public class Relationships
                {
                    public class CompatibleVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CompatibleVersions? compatibleVersions { get; set; }
                    public App? app { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "gameCenterEnabledVersions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsGameCenterEnabledVersionsFilterPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsGameCenterEnabledVersionsSort
        {
            versionString,
            [EnumMember(Value = "-versionString")]
            versionStringDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsGameCenterEnabledVersionsFieldsGameCenterEnabledVersions
        {
            app,
            compatibleVersions,
            iconAsset,
            platform,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsGameCenterEnabledVersionsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsGameCenterEnabledVersionsInclude
        {
            app,
            compatibleVersions,
        }


        // /v1/apps/{id}/gameCenterEnabledVersions
        public Task<GameCenterEnabledVersionsResponse> GetAppsGameCenterEnabledVersions(string id, GetAppsGameCenterEnabledVersionsFilterPlatform[]? filterPlatform = default, string[]? filterVersionString = default, string[]? filterId = default, GetAppsGameCenterEnabledVersionsSort[]? sort = default, GetAppsGameCenterEnabledVersionsFieldsGameCenterEnabledVersions[]? fieldsGameCenterEnabledVersions = default, GetAppsGameCenterEnabledVersionsFieldsApps[]? fieldsApps = default, int? limit = default, int? limitCompatibleVersions = default, GetAppsGameCenterEnabledVersionsInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/gameCenterEnabledVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterVersionString != null)
                uriBuilder.AddParameter("filter[versionString]", string.Join(",", filterVersionString));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsGameCenterEnabledVersions != null)
                uriBuilder.AddParameter("fields[gameCenterEnabledVersions]", string.Join(",", fieldsGameCenterEnabledVersions));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitCompatibleVersions.HasValue)
                uriBuilder.AddParameter("limit[compatibleVersions]", limitCompatibleVersions.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GameCenterEnabledVersionsResponse>(message);
        }

        public class InAppPurchasesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? referenceName { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        AUTOMATICALLY_RENEWABLE_SUBSCRIPTION,
                        NON_CONSUMABLE,
                        CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                        FREE_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        CREATED,
                        DEVELOPER_SIGNED_OFF,
                        DEVELOPER_ACTION_NEEDED,
                        DELETION_IN_PROGRESS,
                        APPROVED,
                        DELETED,
                        REMOVED_FROM_SALE,
                        DEVELOPER_REMOVED_FROM_SALE,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        REPLACED,
                        REJECTED,
                        WAITING_FOR_SCREENSHOT,
                        PREPARE_FOR_SUBMISSION,
                        MISSING_METADATA,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        PENDING_DEVELOPER_RELEASE,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class Apps
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Apps? apps { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? bundleId { get; set; }
                    public string? sku { get; set; }
                    public string? primaryLocale { get; set; }
                    public bool? isOrEverWasMadeForKids { get; set; }
                    public string? subscriptionStatusUrl { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersion
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersion? subscriptionStatusUrlVersion { get; set; }
                    public string? subscriptionStatusUrlForSandbox { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionStatusUrlVersionForSandbox
                    {
                        V1,
                        V2,
                        v1,
                        v2,
                    }
                    public SubscriptionStatusUrlVersionForSandbox? subscriptionStatusUrlVersionForSandbox { get; set; }
                    public bool? availableInNewTerritories { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ContentRightsDeclaration
                    {
                        DOES_NOT_USE_THIRD_PARTY_CONTENT,
                        USES_THIRD_PARTY_CONTENT,
                    }
                    public ContentRightsDeclaration? contentRightsDeclaration { get; set; }
                }

                public class Relationships
                {
                    public class CiProduct
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PreReleaseVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "preReleaseVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaAppLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class BetaLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class BetaAppReviewDetail
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppReviewDetails";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppInfos
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appInfos";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppClips
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appClips";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class EndUserLicenseAgreement
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "endUserLicenseAgreements";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PreOrder
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPreOrders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AvailableTerritories
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroups
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class GameCenterEnabledVersions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "gameCenterEnabledVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppCustomProductPages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class InAppPurchasesV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchases
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppEvents
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class ReviewSubmissions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "reviewSubmissions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGracePeriod
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGracePeriods";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public CiProduct? ciProduct { get; set; }
                    public BetaGroups? betaGroups { get; set; }
                    public AppStoreVersions? appStoreVersions { get; set; }
                    public PreReleaseVersions? preReleaseVersions { get; set; }
                    public BetaAppLocalizations? betaAppLocalizations { get; set; }
                    public Builds? builds { get; set; }
                    public BetaLicenseAgreement? betaLicenseAgreement { get; set; }
                    public BetaAppReviewDetail? betaAppReviewDetail { get; set; }
                    public AppInfos? appInfos { get; set; }
                    public AppClips? appClips { get; set; }
                    public EndUserLicenseAgreement? endUserLicenseAgreement { get; set; }
                    public PreOrder? preOrder { get; set; }
                    public Prices? prices { get; set; }
                    public AvailableTerritories? availableTerritories { get; set; }
                    public InAppPurchases? inAppPurchases { get; set; }
                    public SubscriptionGroups? subscriptionGroups { get; set; }
                    public GameCenterEnabledVersions? gameCenterEnabledVersions { get; set; }
                    public AppCustomProductPages? appCustomProductPages { get; set; }
                    public InAppPurchasesV2? inAppPurchasesV2 { get; set; }
                    public PromotedPurchases? promotedPurchases { get; set; }
                    public AppEvents? appEvents { get; set; }
                    public ReviewSubmissions? reviewSubmissions { get; set; }
                    public SubscriptionGracePeriod? subscriptionGracePeriod { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesFilterInAppPurchaseType
        {
            AUTOMATICALLY_RENEWABLE_SUBSCRIPTION,
            NON_CONSUMABLE,
            CONSUMABLE,
            NON_RENEWING_SUBSCRIPTION,
            FREE_SUBSCRIPTION,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesSort
        {
            inAppPurchaseType,
            [EnumMember(Value = "-inAppPurchaseType")]
            inAppPurchaseTypeDescending,
            productId,
            [EnumMember(Value = "-productId")]
            productIdDescending,
            referenceName,
            [EnumMember(Value = "-referenceName")]
            referenceNameDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesFieldsInAppPurchases
        {
            apps,
            inAppPurchaseType,
            productId,
            referenceName,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }





        // /v1/apps/{id}/inAppPurchases
        public Task<InAppPurchasesResponse> GetAppsInAppPurchases(string id, GetAppsInAppPurchasesFilterInAppPurchaseType[]? filterInAppPurchaseType = default, string[]? filterCanBeSubmitted = default, GetAppsInAppPurchasesSort[]? sort = default, GetAppsInAppPurchasesFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetAppsInAppPurchasesFieldsApps[]? fieldsApps = default, int? limit = default, int? limitApps = default, string[]? include = default)
        {
            string path = "/v1/apps/{id}/inAppPurchases";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterInAppPurchaseType != null)
                uriBuilder.AddParameter("filter[inAppPurchaseType]", string.Join(",", filterInAppPurchaseType));
            if (filterCanBeSubmitted != null)
                uriBuilder.AddParameter("filter[canBeSubmitted]", string.Join(",", filterCanBeSubmitted));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitApps.HasValue)
                uriBuilder.AddParameter("limit[apps]", limitApps.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchasesResponse>(message);
        }

        public class InAppPurchasesV2Response
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        CONSUMABLE,
                        NON_CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? contentHosting { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Content
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseContents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IapPriceSchedule
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePriceSchedules";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseLocalizations? inAppPurchaseLocalizations { get; set; }
                    public PricePoints? pricePoints { get; set; }
                    public Content? content { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                    public IapPriceSchedule? iapPriceSchedule { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FilterInAppPurchaseType
        {
            CONSUMABLE,
            NON_CONSUMABLE,
            NON_RENEWING_SUBSCRIPTION,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FilterState
        {
            MISSING_METADATA,
            WAITING_FOR_UPLOAD,
            PROCESSING_CONTENT,
            READY_TO_SUBMIT,
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            DEVELOPER_ACTION_NEEDED,
            PENDING_BINARY_APPROVAL,
            APPROVED,
            DEVELOPER_REMOVED_FROM_SALE,
            REMOVED_FROM_SALE,
            REJECTED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2Sort
        {
            inAppPurchaseType,
            [EnumMember(Value = "-inAppPurchaseType")]
            inAppPurchaseTypeDescending,
            name,
            [EnumMember(Value = "-name")]
            nameDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FieldsInAppPurchaseAppStoreReviewScreenshots
        {
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            inAppPurchaseV2,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FieldsInAppPurchasePricePoints
        {
            customerPrice,
            inAppPurchaseV2,
            priceTier,
            proceeds,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FieldsInAppPurchaseLocalizations
        {
            description,
            inAppPurchaseV2,
            locale,
            name,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FieldsInAppPurchasePriceSchedules
        {
            inAppPurchase,
            manualPrices,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2FieldsInAppPurchaseContents
        {
            fileName,
            fileSize,
            inAppPurchaseV2,
            lastModifiedDate,
            url,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsInAppPurchasesV2Include
        {
            appStoreReviewScreenshot,
            content,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            pricePoints,
            promotedPurchase,
        }


        // /v1/apps/{id}/inAppPurchasesV2
        public Task<InAppPurchasesV2Response> GetAppsInAppPurchasesV2(string id, GetAppsInAppPurchasesV2FilterInAppPurchaseType[]? filterInAppPurchaseType = default, string[]? filterName = default, string[]? filterProductId = default, GetAppsInAppPurchasesV2FilterState[]? filterState = default, GetAppsInAppPurchasesV2Sort[]? sort = default, GetAppsInAppPurchasesV2FieldsInAppPurchaseAppStoreReviewScreenshots[]? fieldsInAppPurchaseAppStoreReviewScreenshots = default, GetAppsInAppPurchasesV2FieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, GetAppsInAppPurchasesV2FieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetAppsInAppPurchasesV2FieldsInAppPurchaseLocalizations[]? fieldsInAppPurchaseLocalizations = default, GetAppsInAppPurchasesV2FieldsInAppPurchases[]? fieldsInAppPurchases = default, GetAppsInAppPurchasesV2FieldsInAppPurchasePriceSchedules[]? fieldsInAppPurchasePriceSchedules = default, GetAppsInAppPurchasesV2FieldsInAppPurchaseContents[]? fieldsInAppPurchaseContents = default, int? limit = default, int? limitInAppPurchaseLocalizations = default, int? limitPricePoints = default, GetAppsInAppPurchasesV2Include[]? include = default)
        {
            string path = "/v1/apps/{id}/inAppPurchasesV2";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterInAppPurchaseType != null)
                uriBuilder.AddParameter("filter[inAppPurchaseType]", string.Join(",", filterInAppPurchaseType));
            if (filterName != null)
                uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
            if (filterProductId != null)
                uriBuilder.AddParameter("filter[productId]", string.Join(",", filterProductId));
            if (filterState != null)
                uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
                uriBuilder.AddParameter("fields[inAppPurchaseAppStoreReviewScreenshots]", string.Join(",", fieldsInAppPurchaseAppStoreReviewScreenshots));
            if (fieldsInAppPurchasePricePoints != null)
                uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsInAppPurchaseLocalizations != null)
                uriBuilder.AddParameter("fields[inAppPurchaseLocalizations]", string.Join(",", fieldsInAppPurchaseLocalizations));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsInAppPurchasePriceSchedules != null)
                uriBuilder.AddParameter("fields[inAppPurchasePriceSchedules]", string.Join(",", fieldsInAppPurchasePriceSchedules));
            if (fieldsInAppPurchaseContents != null)
                uriBuilder.AddParameter("fields[inAppPurchaseContents]", string.Join(",", fieldsInAppPurchaseContents));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitInAppPurchaseLocalizations.HasValue)
                uriBuilder.AddParameter("limit[inAppPurchaseLocalizations]", limitInAppPurchaseLocalizations.Value.ToString());
            if (limitPricePoints.HasValue)
                uriBuilder.AddParameter("limit[pricePoints]", limitPricePoints.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchasesV2Response>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPerfPowerMetricsFilterMetricType
        {
            DISK,
            HANG,
            BATTERY,
            LAUNCH,
            MEMORY,
            ANIMATION,
            TERMINATION,
        }



        // /v1/apps/{id}/perfPowerMetrics
        public Task GetAppsPerfPowerMetrics(string id, string[]? filterDeviceType = default, GetAppsPerfPowerMetricsFilterMetricType[]? filterMetricType = default, string[]? filterPlatform = default)
        {
            string path = "/v1/apps/{id}/perfPowerMetrics";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterDeviceType != null)
                uriBuilder.AddParameter("filter[deviceType]", string.Join(",", filterDeviceType));
            if (filterMetricType != null)
                uriBuilder.AddParameter("filter[metricType]", string.Join(",", filterMetricType));
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPreOrderFieldsAppPreOrders
        {
            app,
            appReleaseDate,
            preOrderAvailableDate,
        }


        // /v1/apps/{id}/preOrder
        public Task<AppPreOrderResponse> GetAppsPreOrder(string id, GetAppsPreOrderFieldsAppPreOrders[]? fieldsAppPreOrders = default)
        {
            string path = "/v1/apps/{id}/preOrder";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPreOrders != null)
                uriBuilder.AddParameter("fields[appPreOrders]", string.Join(",", fieldsAppPreOrders));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPreOrderResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPreReleaseVersionsFieldsPreReleaseVersions
        {
            app,
            builds,
            platform,
            version,
        }



        // /v1/apps/{id}/preReleaseVersions
        public Task<PreReleaseVersionsResponse> GetAppsPreReleaseVersions(string id, GetAppsPreReleaseVersionsFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, int? limit = default)
        {
            string path = "/v1/apps/{id}/preReleaseVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PreReleaseVersionsResponse>(message);
        }

        public class AppPricePointsV2Response
        {
            public class Data
            {
                public class Attributes
                {
                    public string? customerPrice { get; set; }
                    public string? proceeds { get; set; }
                }

                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PriceTier
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPriceTiers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public PriceTier? priceTier { get; set; }
                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPricePoints";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPricePointsFieldsAppPricePoints
        {
            app,
            customerPrice,
            priceTier,
            proceeds,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPricePointsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPricePointsInclude
        {
            app,
            priceTier,
            territory,
        }


        // /v1/apps/{id}/pricePoints
        public Task<AppPricePointsV2Response> GetAppsPricePoints(string id, string[]? filterPriceTier = default, string[]? filterTerritory = default, string[]? fieldsAppPriceTiers = default, GetAppsPricePointsFieldsAppPricePoints[]? fieldsAppPricePoints = default, GetAppsPricePointsFieldsApps[]? fieldsApps = default, string[]? fieldsTerritories = default, int? limit = default, GetAppsPricePointsInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/pricePoints";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPriceTier != null)
                uriBuilder.AddParameter("filter[priceTier]", string.Join(",", filterPriceTier));
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsAppPriceTiers != null)
                uriBuilder.AddParameter("fields[appPriceTiers]", string.Join(",", fieldsAppPriceTiers));
            if (fieldsAppPricePoints != null)
                uriBuilder.AddParameter("fields[appPricePoints]", string.Join(",", fieldsAppPricePoints));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPricePointsV2Response>(message);
        }

        public class AppPricesResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class App
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "apps";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PriceTier
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appPriceTiers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public App? app { get; set; }
                    public PriceTier? priceTier { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appPrices";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPricesFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPricesFieldsAppPrices
        {
            app,
            priceTier,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPricesInclude
        {
            app,
            priceTier,
        }


        // /v1/apps/{id}/prices
        public Task<AppPricesResponse> GetAppsPrices(string id, string[]? fieldsAppPriceTiers = default, GetAppsPricesFieldsApps[]? fieldsApps = default, GetAppsPricesFieldsAppPrices[]? fieldsAppPrices = default, int? limit = default, GetAppsPricesInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/prices";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppPriceTiers != null)
                uriBuilder.AddParameter("fields[appPriceTiers]", string.Join(",", fieldsAppPriceTiers));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsAppPrices != null)
                uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppPricesResponse>(message);
        }

        public class GetAppsPromotedPurchasesResponse
        {
            public class Data
            {
                public string type { get; set; } = "promotedPurchases";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/apps/{id}/relationships/promotedPurchases
        public Task<GetAppsPromotedPurchasesResponse> GetAppsPromotedPurchases(string id, int? limit = default)
        {
            string path = "/v1/apps/{id}/relationships/promotedPurchases";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetAppsPromotedPurchasesResponse>(message);
        }

        public class PatchAppsPromotedPurchasesRequest
        {
            public class Data
            {
                public string type { get; set; } = "promotedPurchases";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/apps/{id}/relationships/promotedPurchases
        public Task PatchAppsPromotedPurchases(string id, PatchAppsPromotedPurchasesRequest request)
        {
            string path = "/v1/apps/{id}/relationships/promotedPurchases";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class PromotedPurchasesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public bool? visibleForAllUsers { get; set; }
                    public bool? enabled { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        APPROVED,
                        IN_REVIEW,
                        PREPARE_FOR_SUBMISSION,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotionImages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchaseImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                    public Subscription? subscription { get; set; }
                    public PromotionImages? promotionImages { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "promotedPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPromotedPurchasesFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPromotedPurchasesFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPromotedPurchasesFieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPromotedPurchasesFieldsPromotedPurchaseImages
        {
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            promotedPurchase,
            sourceFileChecksum,
            state,
            uploadOperations,
            uploaded,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsPromotedPurchasesInclude
        {
            inAppPurchaseV2,
            promotionImages,
            subscription,
        }


        // /v1/apps/{id}/promotedPurchases
        public Task<PromotedPurchasesResponse> GetAppsPromotedPurchases(string id, GetAppsPromotedPurchasesFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetAppsPromotedPurchasesFieldsSubscriptions[]? fieldsSubscriptions = default, GetAppsPromotedPurchasesFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetAppsPromotedPurchasesFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, int? limit = default, int? limitPromotionImages = default, GetAppsPromotedPurchasesInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/promotedPurchases";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsPromotedPurchaseImages != null)
                uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitPromotionImages.HasValue)
                uriBuilder.AddParameter("limit[promotionImages]", limitPromotionImages.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PromotedPurchasesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsReviewSubmissionsFilterPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsReviewSubmissionsFilterState
        {
            READY_FOR_REVIEW,
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            UNRESOLVED_ISSUES,
            CANCELING,
            COMPLETING,
            COMPLETE,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsReviewSubmissionsFieldsReviewSubmissionItems
        {
            appCustomProductPageVersion,
            appEvent,
            appStoreVersion,
            appStoreVersionExperiment,
            removed,
            resolved,
            reviewSubmission,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsReviewSubmissionsFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsReviewSubmissionsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsReviewSubmissionsFieldsReviewSubmissions
        {
            app,
            appStoreVersionForReview,
            canceled,
            items,
            platform,
            state,
            submitted,
            submittedDate,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsReviewSubmissionsInclude
        {
            app,
            appStoreVersionForReview,
            items,
        }


        // /v1/apps/{id}/reviewSubmissions
        public Task<ReviewSubmissionsResponse> GetAppsReviewSubmissions(string id, GetAppsReviewSubmissionsFilterPlatform[]? filterPlatform = default, GetAppsReviewSubmissionsFilterState[]? filterState = default, GetAppsReviewSubmissionsFieldsReviewSubmissionItems[]? fieldsReviewSubmissionItems = default, GetAppsReviewSubmissionsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetAppsReviewSubmissionsFieldsApps[]? fieldsApps = default, GetAppsReviewSubmissionsFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, int? limit = default, int? limitItems = default, GetAppsReviewSubmissionsInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/reviewSubmissions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterState != null)
                uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
            if (fieldsReviewSubmissionItems != null)
                uriBuilder.AddParameter("fields[reviewSubmissionItems]", string.Join(",", fieldsReviewSubmissionItems));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsReviewSubmissions != null)
                uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitItems.HasValue)
                uriBuilder.AddParameter("limit[items]", limitItems.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ReviewSubmissionsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsSubscriptionGracePeriodFieldsSubscriptionGracePeriods
        {
            app,
            optIn,
        }


        // /v1/apps/{id}/subscriptionGracePeriod
        public Task<SubscriptionGracePeriodResponse> GetAppsSubscriptionGracePeriod(string id, GetAppsSubscriptionGracePeriodFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default)
        {
            string path = "/v1/apps/{id}/subscriptionGracePeriod";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionGracePeriods != null)
                uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionGracePeriodResponse>(message);
        }

        public class SubscriptionGroupsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? referenceName { get; set; }
                }

                public class Relationships
                {
                    public class Subscriptions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroupLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroupLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscriptions? subscriptions { get; set; }
                    public SubscriptionGroupLocalizations? subscriptionGroupLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionGroups";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsSubscriptionGroupsFilterSubscriptionsState
        {
            MISSING_METADATA,
            READY_TO_SUBMIT,
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            DEVELOPER_ACTION_NEEDED,
            PENDING_BINARY_APPROVAL,
            APPROVED,
            DEVELOPER_REMOVED_FROM_SALE,
            REMOVED_FROM_SALE,
            REJECTED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsSubscriptionGroupsSort
        {
            referenceName,
            [EnumMember(Value = "-referenceName")]
            referenceNameDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsSubscriptionGroupsFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsSubscriptionGroupsFieldsSubscriptionGroups
        {
            app,
            referenceName,
            subscriptionGroupLocalizations,
            subscriptions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsSubscriptionGroupsFieldsSubscriptionGroupLocalizations
        {
            customAppName,
            locale,
            name,
            state,
            subscriptionGroup,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetAppsSubscriptionGroupsInclude
        {
            subscriptionGroupLocalizations,
            subscriptions,
        }


        // /v1/apps/{id}/subscriptionGroups
        public Task<SubscriptionGroupsResponse> GetAppsSubscriptionGroups(string id, string[]? filterReferenceName = default, GetAppsSubscriptionGroupsFilterSubscriptionsState[]? filterSubscriptionsState = default, GetAppsSubscriptionGroupsSort[]? sort = default, GetAppsSubscriptionGroupsFieldsSubscriptions[]? fieldsSubscriptions = default, GetAppsSubscriptionGroupsFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, GetAppsSubscriptionGroupsFieldsSubscriptionGroupLocalizations[]? fieldsSubscriptionGroupLocalizations = default, int? limit = default, int? limitSubscriptions = default, int? limitSubscriptionGroupLocalizations = default, GetAppsSubscriptionGroupsInclude[]? include = default)
        {
            string path = "/v1/apps/{id}/subscriptionGroups";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterReferenceName != null)
                uriBuilder.AddParameter("filter[referenceName]", string.Join(",", filterReferenceName));
            if (filterSubscriptionsState != null)
                uriBuilder.AddParameter("filter[subscriptions.state]", string.Join(",", filterSubscriptionsState));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsSubscriptionGroups != null)
                uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
            if (fieldsSubscriptionGroupLocalizations != null)
                uriBuilder.AddParameter("fields[subscriptionGroupLocalizations]", string.Join(",", fieldsSubscriptionGroupLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitSubscriptions.HasValue)
                uriBuilder.AddParameter("limit[subscriptions]", limitSubscriptions.Value.ToString());
            if (limitSubscriptionGroupLocalizations.HasValue)
                uriBuilder.AddParameter("limit[subscriptionGroupLocalizations]", limitSubscriptionGroupLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionGroupsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppLocalizationsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/betaAppLocalizations/{id}/app
        public Task<AppResponse> GetBetaAppLocalizationsApp(string id, GetBetaAppLocalizationsAppFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaAppLocalizations/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppReviewDetailsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/betaAppReviewDetails/{id}/app
        public Task<AppResponse> GetBetaAppReviewDetailsApp(string id, GetBetaAppReviewDetailsAppFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaAppReviewDetails/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaAppReviewSubmissionsBuildFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        // /v1/betaAppReviewSubmissions/{id}/build
        public Task<BuildResponse> GetBetaAppReviewSubmissionsBuild(string id, GetBetaAppReviewSubmissionsBuildFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/betaAppReviewSubmissions/{id}/build";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaBuildLocalizationsBuildFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        // /v1/betaBuildLocalizations/{id}/build
        public Task<BuildResponse> GetBetaBuildLocalizationsBuild(string id, GetBetaBuildLocalizationsBuildFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/betaBuildLocalizations/{id}/build";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/betaGroups/{id}/app
        public Task<AppResponse> GetBetaGroupsApp(string id, GetBetaGroupsAppFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaGroups/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        public class GetBetaGroupsBetaTestersResponse
        {
            public class Data
            {
                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/betaGroups/{id}/relationships/betaTesters
        public Task<GetBetaGroupsBetaTestersResponse> GetBetaGroupsBetaTesters(string id, int? limit = default)
        {
            string path = "/v1/betaGroups/{id}/relationships/betaTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetBetaGroupsBetaTestersResponse>(message);
        }

        public class PostBetaGroupsBetaTestersRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaGroups/{id}/relationships/betaTesters
        public Task PostBetaGroupsBetaTesters(string id, PostBetaGroupsBetaTestersRequest request)
        {
            string path = "/v1/betaGroups/{id}/relationships/betaTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class DeleteBetaGroupsBetaTestersRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaGroups/{id}/relationships/betaTesters
        public Task DeleteBetaGroupsBetaTesters(string id, DeleteBetaGroupsBetaTestersRequest request)
        {
            string path = "/v1/betaGroups/{id}/relationships/betaTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsBetaTestersFieldsBetaTesters
        {
            apps,
            betaGroups,
            builds,
            email,
            firstName,
            inviteType,
            lastName,
        }



        // /v1/betaGroups/{id}/betaTesters
        public Task<BetaTestersResponse> GetBetaGroupsBetaTesters(string id, GetBetaGroupsBetaTestersFieldsBetaTesters[]? fieldsBetaTesters = default, int? limit = default)
        {
            string path = "/v1/betaGroups/{id}/betaTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaTestersResponse>(message);
        }

        public class GetBetaGroupsBuildsResponse
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/betaGroups/{id}/relationships/builds
        public Task<GetBetaGroupsBuildsResponse> GetBetaGroupsBuilds(string id, int? limit = default)
        {
            string path = "/v1/betaGroups/{id}/relationships/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetBetaGroupsBuildsResponse>(message);
        }

        public class PostBetaGroupsBuildsRequest
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaGroups/{id}/relationships/builds
        public Task PostBetaGroupsBuilds(string id, PostBetaGroupsBuildsRequest request)
        {
            string path = "/v1/betaGroups/{id}/relationships/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class DeleteBetaGroupsBuildsRequest
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaGroups/{id}/relationships/builds
        public Task DeleteBetaGroupsBuilds(string id, DeleteBetaGroupsBuildsRequest request)
        {
            string path = "/v1/betaGroups/{id}/relationships/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaGroupsBuildsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



        // /v1/betaGroups/{id}/builds
        public Task<BuildsResponse> GetBetaGroupsBuilds(string id, GetBetaGroupsBuildsFieldsBuilds[]? fieldsBuilds = default, int? limit = default)
        {
            string path = "/v1/betaGroups/{id}/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaLicenseAgreementsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/betaLicenseAgreements/{id}/app
        public Task<AppResponse> GetBetaLicenseAgreementsApp(string id, GetBetaLicenseAgreementsAppFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/betaLicenseAgreements/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        public class GetBetaTestersAppsResponse
        {
            public class Data
            {
                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/betaTesters/{id}/relationships/apps
        public Task<GetBetaTestersAppsResponse> GetBetaTestersApps(string id, int? limit = default)
        {
            string path = "/v1/betaTesters/{id}/relationships/apps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetBetaTestersAppsResponse>(message);
        }

        public class DeleteBetaTestersAppsRequest
        {
            public class Data
            {
                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaTesters/{id}/relationships/apps
        public Task DeleteBetaTestersApps(string id, DeleteBetaTestersAppsRequest request)
        {
            string path = "/v1/betaTesters/{id}/relationships/apps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersAppsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }



        // /v1/betaTesters/{id}/apps
        public Task<AppsResponse> GetBetaTestersApps(string id, GetBetaTestersAppsFieldsApps[]? fieldsApps = default, int? limit = default)
        {
            string path = "/v1/betaTesters/{id}/apps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppsResponse>(message);
        }

        public class GetBetaTestersBetaGroupsResponse
        {
            public class Data
            {
                public string type { get; set; } = "betaGroups";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/betaTesters/{id}/relationships/betaGroups
        public Task<GetBetaTestersBetaGroupsResponse> GetBetaTestersBetaGroups(string id, int? limit = default)
        {
            string path = "/v1/betaTesters/{id}/relationships/betaGroups";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetBetaTestersBetaGroupsResponse>(message);
        }

        public class PostBetaTestersBetaGroupsRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaGroups";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaTesters/{id}/relationships/betaGroups
        public Task PostBetaTestersBetaGroups(string id, PostBetaTestersBetaGroupsRequest request)
        {
            string path = "/v1/betaTesters/{id}/relationships/betaGroups";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class DeleteBetaTestersBetaGroupsRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaGroups";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaTesters/{id}/relationships/betaGroups
        public Task DeleteBetaTestersBetaGroups(string id, DeleteBetaTestersBetaGroupsRequest request)
        {
            string path = "/v1/betaTesters/{id}/relationships/betaGroups";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersBetaGroupsFieldsBetaGroups
        {
            app,
            betaTesters,
            builds,
            createdDate,
            feedbackEnabled,
            hasAccessToAllBuilds,
            iosBuildsAvailableForAppleSiliconMac,
            isInternalGroup,
            name,
            publicLink,
            publicLinkEnabled,
            publicLinkId,
            publicLinkLimit,
            publicLinkLimitEnabled,
        }



        // /v1/betaTesters/{id}/betaGroups
        public Task<BetaGroupsResponse> GetBetaTestersBetaGroups(string id, GetBetaTestersBetaGroupsFieldsBetaGroups[]? fieldsBetaGroups = default, int? limit = default)
        {
            string path = "/v1/betaTesters/{id}/betaGroups";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaGroupsResponse>(message);
        }

        public class GetBetaTestersBuildsResponse
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/betaTesters/{id}/relationships/builds
        public Task<GetBetaTestersBuildsResponse> GetBetaTestersBuilds(string id, int? limit = default)
        {
            string path = "/v1/betaTesters/{id}/relationships/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetBetaTestersBuildsResponse>(message);
        }

        public class PostBetaTestersBuildsRequest
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaTesters/{id}/relationships/builds
        public Task PostBetaTestersBuilds(string id, PostBetaTestersBuildsRequest request)
        {
            string path = "/v1/betaTesters/{id}/relationships/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class DeleteBetaTestersBuildsRequest
        {
            public class Data
            {
                public string type { get; set; } = "builds";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/betaTesters/{id}/relationships/builds
        public Task DeleteBetaTestersBuilds(string id, DeleteBetaTestersBuildsRequest request)
        {
            string path = "/v1/betaTesters/{id}/relationships/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBetaTestersBuildsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



        // /v1/betaTesters/{id}/builds
        public Task<BuildsResponse> GetBetaTestersBuilds(string id, GetBetaTestersBuildsFieldsBuilds[]? fieldsBuilds = default, int? limit = default)
        {
            string path = "/v1/betaTesters/{id}/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildBetaDetailsBuildFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        // /v1/buildBetaDetails/{id}/build
        public Task<BuildResponse> GetBuildBetaDetailsBuild(string id, GetBuildBetaDetailsBuildFieldsBuilds[]? fieldsBuilds = default)
        {
            string path = "/v1/buildBetaDetails/{id}/build";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildResponse>(message);
        }

        public class AppClipDomainStatusResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class Domains
                    {
                        public string? domain { get; set; }
                        public bool? isValid { get; set; }
                        public string? lastUpdatedDate { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum ErrorCode
                        {
                            BAD_HTTP_RESPONSE,
                            BAD_JSON_CONTENT,
                            BAD_PKCS7_SIGNATURE,
                            CANNOT_REACH_AASA_FILE,
                            DNS_ERROR,
                            INSECURE_REDIRECTS_FORBIDDEN,
                            INVALID_ENTITLEMENT_MISSING_SECTION,
                            INVALID_ENTITLEMENT_SYNTAX_ERROR,
                            INVALID_ENTITLEMENT_UNHANDLED_SECTION,
                            INVALID_ENTITLEMENT_UNKNOWN_ID,
                            NETWORK_ERROR,
                            NETWORK_ERROR_TEMPORARY,
                            OTHER_ERROR,
                            TIMEOUT,
                            TLS_ERROR,
                            UNEXPECTED_ERROR,
                        }
                        public ErrorCode? errorCode { get; set; }
                    }

                    public Domains[]? domains { get; set; }
                    public string? lastUpdatedDate { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "appClipDomainStatuses";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildBundlesAppClipDomainCacheStatusFieldsAppClipDomainStatuses
        {
            domains,
            lastUpdatedDate,
        }


        // /v1/buildBundles/{id}/appClipDomainCacheStatus
        public Task<AppClipDomainStatusResponse> GetBuildBundlesAppClipDomainCacheStatus(string id, GetBuildBundlesAppClipDomainCacheStatusFieldsAppClipDomainStatuses[]? fieldsAppClipDomainStatuses = default)
        {
            string path = "/v1/buildBundles/{id}/appClipDomainCacheStatus";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipDomainStatuses != null)
                uriBuilder.AddParameter("fields[appClipDomainStatuses]", string.Join(",", fieldsAppClipDomainStatuses));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipDomainStatusResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildBundlesAppClipDomainDebugStatusFieldsAppClipDomainStatuses
        {
            domains,
            lastUpdatedDate,
        }


        // /v1/buildBundles/{id}/appClipDomainDebugStatus
        public Task<AppClipDomainStatusResponse> GetBuildBundlesAppClipDomainDebugStatus(string id, GetBuildBundlesAppClipDomainDebugStatusFieldsAppClipDomainStatuses[]? fieldsAppClipDomainStatuses = default)
        {
            string path = "/v1/buildBundles/{id}/appClipDomainDebugStatus";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppClipDomainStatuses != null)
                uriBuilder.AddParameter("fields[appClipDomainStatuses]", string.Join(",", fieldsAppClipDomainStatuses));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppClipDomainStatusResponse>(message);
        }

        public class BetaAppClipInvocationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? url { get; set; }
                }

                public class Relationships
                {
                    public class BetaAppClipInvocationLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "betaAppClipInvocationLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public BetaAppClipInvocationLocalizations? betaAppClipInvocationLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppClipInvocations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? title { get; set; }
                    public string? locale { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "betaAppClipInvocationLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildBundlesBetaAppClipInvocationsFieldsBetaAppClipInvocations
        {
            betaAppClipInvocationLocalizations,
            buildBundle,
            url,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildBundlesBetaAppClipInvocationsFieldsBetaAppClipInvocationLocalizations
        {
            betaAppClipInvocation,
            locale,
            title,
        }





        // /v1/buildBundles/{id}/betaAppClipInvocations
        public Task<BetaAppClipInvocationsResponse> GetBuildBundlesBetaAppClipInvocations(string id, GetBuildBundlesBetaAppClipInvocationsFieldsBetaAppClipInvocations[]? fieldsBetaAppClipInvocations = default, GetBuildBundlesBetaAppClipInvocationsFieldsBetaAppClipInvocationLocalizations[]? fieldsBetaAppClipInvocationLocalizations = default, int? limit = default, int? limitBetaAppClipInvocationLocalizations = default, string[]? include = default)
        {
            string path = "/v1/buildBundles/{id}/betaAppClipInvocations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaAppClipInvocations != null)
                uriBuilder.AddParameter("fields[betaAppClipInvocations]", string.Join(",", fieldsBetaAppClipInvocations));
            if (fieldsBetaAppClipInvocationLocalizations != null)
                uriBuilder.AddParameter("fields[betaAppClipInvocationLocalizations]", string.Join(",", fieldsBetaAppClipInvocationLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitBetaAppClipInvocationLocalizations.HasValue)
                uriBuilder.AddParameter("limit[betaAppClipInvocationLocalizations]", limitBetaAppClipInvocationLocalizations.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppClipInvocationsResponse>(message);
        }

        public class BuildBundleFileSizesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? deviceModel { get; set; }
                    public string? osVersion { get; set; }
                    public int? downloadBytes { get; set; }
                    public int? installBytes { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "buildBundleFileSizes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildBundlesBuildBundleFileSizesFieldsBuildBundleFileSizes
        {
            deviceModel,
            downloadBytes,
            installBytes,
            osVersion,
        }



        // /v1/buildBundles/{id}/buildBundleFileSizes
        public Task<BuildBundleFileSizesResponse> GetBuildBundlesBuildBundleFileSizes(string id, GetBuildBundlesBuildBundleFileSizesFieldsBuildBundleFileSizes[]? fieldsBuildBundleFileSizes = default, int? limit = default)
        {
            string path = "/v1/buildBundles/{id}/buildBundleFileSizes";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuildBundleFileSizes != null)
                uriBuilder.AddParameter("fields[buildBundleFileSizes]", string.Join(",", fieldsBuildBundleFileSizes));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildBundleFileSizesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/builds/{id}/app
        public Task<AppResponse> GetBuildsApp(string id, GetBuildsAppFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/builds/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        public class GetBuildsAppEncryptionDeclarationResponse
        {
            public class Data
            {
                public string type { get; set; } = "appEncryptionDeclarations";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
            public Links links { get; set; } = new Links();
        }

        // /v1/builds/{id}/relationships/appEncryptionDeclaration
        public Task<GetBuildsAppEncryptionDeclarationResponse> GetBuildsAppEncryptionDeclaration(string id)
        {
            string path = "/v1/builds/{id}/relationships/appEncryptionDeclaration";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetBuildsAppEncryptionDeclarationResponse>(message);
        }

        public class PatchBuildsAppEncryptionDeclarationRequest
        {
            public class Data
            {
                public string type { get; set; } = "appEncryptionDeclarations";
                public string id { get; set; } = "";
            }

            public Data data { get; set; } = new Data();
        }

        // /v1/builds/{id}/relationships/appEncryptionDeclaration
        public Task PatchBuildsAppEncryptionDeclaration(string id, PatchBuildsAppEncryptionDeclarationRequest request)
        {
            string path = "/v1/builds/{id}/relationships/appEncryptionDeclaration";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppEncryptionDeclarationFieldsAppEncryptionDeclarations
        {
            app,
            appEncryptionDeclarationState,
            availableOnFrenchStore,
            builds,
            codeValue,
            containsProprietaryCryptography,
            containsThirdPartyCryptography,
            documentName,
            documentType,
            documentUrl,
            exempt,
            platform,
            uploadedDate,
            usesEncryption,
        }


        // /v1/builds/{id}/appEncryptionDeclaration
        public Task<AppEncryptionDeclarationResponse> GetBuildsAppEncryptionDeclaration(string id, GetBuildsAppEncryptionDeclarationFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default)
        {
            string path = "/v1/builds/{id}/appEncryptionDeclaration";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppEncryptionDeclarations != null)
                uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppEncryptionDeclarationResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsAppStoreVersionExperiments
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
            endDate,
            name,
            reviewRequired,
            startDate,
            started,
            state,
            trafficProportion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsAgeRatingDeclarations
        {
            alcoholTobaccoOrDrugUseOrReferences,
            contests,
            gambling,
            gamblingAndContests,
            gamblingSimulated,
            horrorOrFearThemes,
            kidsAgeBand,
            matureOrSuggestiveThemes,
            medicalOrTreatmentInformation,
            profanityOrCrudeHumor,
            seventeenPlus,
            sexualContentGraphicAndNudity,
            sexualContentOrNudity,
            unrestrictedWebAccess,
            violenceCartoonOrFantasy,
            violenceRealistic,
            violenceRealisticProlongedGraphicOrSadistic,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsAppStoreReviewDetails
        {
            appStoreReviewAttachments,
            appStoreVersion,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsRoutingAppCoverages
        {
            appStoreVersion,
            assetDeliveryState,
            fileName,
            fileSize,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsAppClipDefaultExperiences
        {
            action,
            appClip,
            appClipAppStoreReviewDetail,
            appClipDefaultExperienceLocalizations,
            appClipDefaultExperienceTemplate,
            releaseWithAppStoreVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsAppStoreVersionPhasedReleases
        {
            appStoreVersion,
            currentDayNumber,
            phasedReleaseState,
            startDate,
            totalPauseDuration,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionFieldsAppStoreVersionLocalizations
        {
            appPreviewSets,
            appScreenshotSets,
            appStoreVersion,
            description,
            keywords,
            locale,
            marketingUrl,
            promotionalText,
            supportUrl,
            whatsNew,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsAppStoreVersionInclude
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            routingAppCoverage,
        }


        // /v1/builds/{id}/appStoreVersion
        public Task<AppStoreVersionResponse> GetBuildsAppStoreVersion(string id, GetBuildsAppStoreVersionFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, GetBuildsAppStoreVersionFieldsAgeRatingDeclarations[]? fieldsAgeRatingDeclarations = default, string[]? fieldsAppStoreVersionSubmissions = default, GetBuildsAppStoreVersionFieldsAppStoreReviewDetails[]? fieldsAppStoreReviewDetails = default, GetBuildsAppStoreVersionFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetBuildsAppStoreVersionFieldsApps[]? fieldsApps = default, GetBuildsAppStoreVersionFieldsRoutingAppCoverages[]? fieldsRoutingAppCoverages = default, GetBuildsAppStoreVersionFieldsAppClipDefaultExperiences[]? fieldsAppClipDefaultExperiences = default, GetBuildsAppStoreVersionFieldsAppStoreVersionPhasedReleases[]? fieldsAppStoreVersionPhasedReleases = default, GetBuildsAppStoreVersionFieldsBuilds[]? fieldsBuilds = default, GetBuildsAppStoreVersionFieldsAppStoreVersionLocalizations[]? fieldsAppStoreVersionLocalizations = default, int? limitAppStoreVersionLocalizations = default, int? limitAppStoreVersionExperiments = default, GetBuildsAppStoreVersionInclude[]? include = default)
        {
            string path = "/v1/builds/{id}/appStoreVersion";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionExperiments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
            if (fieldsAgeRatingDeclarations != null)
                uriBuilder.AddParameter("fields[ageRatingDeclarations]", string.Join(",", fieldsAgeRatingDeclarations));
            if (fieldsAppStoreVersionSubmissions != null)
                uriBuilder.AddParameter("fields[appStoreVersionSubmissions]", string.Join(",", fieldsAppStoreVersionSubmissions));
            if (fieldsAppStoreReviewDetails != null)
                uriBuilder.AddParameter("fields[appStoreReviewDetails]", string.Join(",", fieldsAppStoreReviewDetails));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsRoutingAppCoverages != null)
                uriBuilder.AddParameter("fields[routingAppCoverages]", string.Join(",", fieldsRoutingAppCoverages));
            if (fieldsAppClipDefaultExperiences != null)
                uriBuilder.AddParameter("fields[appClipDefaultExperiences]", string.Join(",", fieldsAppClipDefaultExperiences));
            if (fieldsAppStoreVersionPhasedReleases != null)
                uriBuilder.AddParameter("fields[appStoreVersionPhasedReleases]", string.Join(",", fieldsAppStoreVersionPhasedReleases));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsAppStoreVersionLocalizations != null)
                uriBuilder.AddParameter("fields[appStoreVersionLocalizations]", string.Join(",", fieldsAppStoreVersionLocalizations));
            if (limitAppStoreVersionLocalizations.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionLocalizations]", limitAppStoreVersionLocalizations.Value.ToString());
            if (limitAppStoreVersionExperiments.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersionExperiments]", limitAppStoreVersionExperiments.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppStoreVersionResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsBetaAppReviewSubmissionFieldsBetaAppReviewSubmissions
        {
            betaReviewState,
            build,
            submittedDate,
        }


        // /v1/builds/{id}/betaAppReviewSubmission
        public Task<BetaAppReviewSubmissionResponse> GetBuildsBetaAppReviewSubmission(string id, GetBuildsBetaAppReviewSubmissionFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default)
        {
            string path = "/v1/builds/{id}/betaAppReviewSubmission";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaAppReviewSubmissions != null)
                uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaAppReviewSubmissionResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsBetaBuildLocalizationsFieldsBetaBuildLocalizations
        {
            build,
            locale,
            whatsNew,
        }



        // /v1/builds/{id}/betaBuildLocalizations
        public Task<BetaBuildLocalizationsResponse> GetBuildsBetaBuildLocalizations(string id, GetBuildsBetaBuildLocalizationsFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, int? limit = default)
        {
            string path = "/v1/builds/{id}/betaBuildLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaBuildLocalizations != null)
                uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaBuildLocalizationsResponse>(message);
        }

        public class PostBuildsBetaGroupsRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaGroups";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/builds/{id}/relationships/betaGroups
        public Task PostBuildsBetaGroups(string id, PostBuildsBetaGroupsRequest request)
        {
            string path = "/v1/builds/{id}/relationships/betaGroups";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class DeleteBuildsBetaGroupsRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaGroups";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/builds/{id}/relationships/betaGroups
        public Task DeleteBuildsBetaGroups(string id, DeleteBuildsBetaGroupsRequest request)
        {
            string path = "/v1/builds/{id}/relationships/betaGroups";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsBuildBetaDetailFieldsBuildBetaDetails
        {
            autoNotifyEnabled,
            build,
            externalBuildState,
            internalBuildState,
        }


        // /v1/builds/{id}/buildBetaDetail
        public Task<BuildBetaDetailResponse> GetBuildsBuildBetaDetail(string id, GetBuildsBuildBetaDetailFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default)
        {
            string path = "/v1/builds/{id}/buildBetaDetail";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuildBetaDetails != null)
                uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildBetaDetailResponse>(message);
        }

        public class DiagnosticSignaturesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum DiagnosticType
                    {
                        DISK_WRITES,
                        HANGS,
                    }
                    public DiagnosticType? diagnosticType { get; set; }
                    public string? signature { get; set; }
                    public double? weight { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "diagnosticSignatures";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsDiagnosticSignaturesFilterDiagnosticType
        {
            DISK_WRITES,
            HANGS,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsDiagnosticSignaturesFieldsDiagnosticSignatures
        {
            diagnosticType,
            logs,
            signature,
            weight,
        }



        // /v1/builds/{id}/diagnosticSignatures
        public Task<DiagnosticSignaturesResponse> GetBuildsDiagnosticSignatures(string id, GetBuildsDiagnosticSignaturesFilterDiagnosticType[]? filterDiagnosticType = default, GetBuildsDiagnosticSignaturesFieldsDiagnosticSignatures[]? fieldsDiagnosticSignatures = default, int? limit = default)
        {
            string path = "/v1/builds/{id}/diagnosticSignatures";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterDiagnosticType != null)
                uriBuilder.AddParameter("filter[diagnosticType]", string.Join(",", filterDiagnosticType));
            if (fieldsDiagnosticSignatures != null)
                uriBuilder.AddParameter("fields[diagnosticSignatures]", string.Join(",", fieldsDiagnosticSignatures));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<DiagnosticSignaturesResponse>(message);
        }

        public class BuildIconsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class IconAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public string? name { get; set; }
                    public IconAsset? iconAsset { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum IconType
                    {
                        APP_STORE,
                        MESSAGES_APP_STORE,
                        WATCH_APP_STORE,
                        TV_OS_HOME_SCREEN,
                        TV_OS_TOP_SHELF,
                        ALTERNATE_EXPERIMENT,
                    }
                    public IconType? iconType { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "buildIcons";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsIconsFieldsBuildIcons
        {
            iconAsset,
            iconType,
            name,
        }



        // /v1/builds/{id}/icons
        public Task<BuildIconsResponse> GetBuildsIcons(string id, GetBuildsIconsFieldsBuildIcons[]? fieldsBuildIcons = default, int? limit = default)
        {
            string path = "/v1/builds/{id}/icons";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuildIcons != null)
                uriBuilder.AddParameter("fields[buildIcons]", string.Join(",", fieldsBuildIcons));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildIconsResponse>(message);
        }

        public class GetBuildsIndividualTestersResponse
        {
            public class Data
            {
                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/builds/{id}/relationships/individualTesters
        public Task<GetBuildsIndividualTestersResponse> GetBuildsIndividualTesters(string id, int? limit = default)
        {
            string path = "/v1/builds/{id}/relationships/individualTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetBuildsIndividualTestersResponse>(message);
        }

        public class PostBuildsIndividualTestersRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/builds/{id}/relationships/individualTesters
        public Task PostBuildsIndividualTesters(string id, PostBuildsIndividualTestersRequest request)
        {
            string path = "/v1/builds/{id}/relationships/individualTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class DeleteBuildsIndividualTestersRequest
        {
            public class Data
            {
                public string type { get; set; } = "betaTesters";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/builds/{id}/relationships/individualTesters
        public Task DeleteBuildsIndividualTesters(string id, DeleteBuildsIndividualTestersRequest request)
        {
            string path = "/v1/builds/{id}/relationships/individualTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsIndividualTestersFieldsBetaTesters
        {
            apps,
            betaGroups,
            builds,
            email,
            firstName,
            inviteType,
            lastName,
        }



        // /v1/builds/{id}/individualTesters
        public Task<BetaTestersResponse> GetBuildsIndividualTesters(string id, GetBuildsIndividualTestersFieldsBetaTesters[]? fieldsBetaTesters = default, int? limit = default)
        {
            string path = "/v1/builds/{id}/individualTesters";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BetaTestersResponse>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsPerfPowerMetricsFilterMetricType
        {
            DISK,
            HANG,
            BATTERY,
            LAUNCH,
            MEMORY,
            ANIMATION,
            TERMINATION,
        }



        // /v1/builds/{id}/perfPowerMetrics
        public Task GetBuildsPerfPowerMetrics(string id, string[]? filterDeviceType = default, GetBuildsPerfPowerMetricsFilterMetricType[]? filterMetricType = default, string[]? filterPlatform = default)
        {
            string path = "/v1/builds/{id}/perfPowerMetrics";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterDeviceType != null)
                uriBuilder.AddParameter("filter[deviceType]", string.Join(",", filterDeviceType));
            if (filterMetricType != null)
                uriBuilder.AddParameter("filter[metricType]", string.Join(",", filterMetricType));
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBuildsPreReleaseVersionFieldsPreReleaseVersions
        {
            app,
            builds,
            platform,
            version,
        }


        // /v1/builds/{id}/preReleaseVersion
        public Task<PrereleaseVersionResponse> GetBuildsPreReleaseVersion(string id, GetBuildsPreReleaseVersionFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default)
        {
            string path = "/v1/builds/{id}/preReleaseVersion";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PrereleaseVersionResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/bundleIds/{id}/app
        public Task<AppResponse> GetBundleIdsApp(string id, GetBundleIdsAppFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/bundleIds/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        public class BundleIdCapabilitiesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class Settings
                    {
                        public class Options
                        {
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Key
                            {
                                XCODE_5,
                                XCODE_6,
                                COMPLETE_PROTECTION,
                                PROTECTED_UNLESS_OPEN,
                                PROTECTED_UNTIL_FIRST_USER_AUTH,
                                PRIMARY_APP_CONSENT,
                            }
                            public Key? key { get; set; }
                            public string? name { get; set; }
                            public string? description { get; set; }
                            public bool? enabledByDefault { get; set; }
                            public bool? enabled { get; set; }
                            public bool? supportsWildcard { get; set; }
                        }

                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Key
                        {
                            ICLOUD_VERSION,
                            DATA_PROTECTION_PERMISSION_LEVEL,
                            APPLE_ID_AUTH_APP_CONSENT,
                        }
                        public Key? key { get; set; }
                        public string? name { get; set; }
                        public string? description { get; set; }
                        public bool? enabledByDefault { get; set; }
                        public bool? visible { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum AllowedInstances
                        {
                            ENTRY,
                            SINGLE,
                            MULTIPLE,
                        }
                        public AllowedInstances? allowedInstances { get; set; }
                        public int? minInstances { get; set; }
                        public Options[]? options { get; set; }
                    }

                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CapabilityType
                    {
                        ICLOUD,
                        IN_APP_PURCHASE,
                        GAME_CENTER,
                        PUSH_NOTIFICATIONS,
                        WALLET,
                        INTER_APP_AUDIO,
                        MAPS,
                        ASSOCIATED_DOMAINS,
                        PERSONAL_VPN,
                        APP_GROUPS,
                        HEALTHKIT,
                        HOMEKIT,
                        WIRELESS_ACCESSORY_CONFIGURATION,
                        APPLE_PAY,
                        DATA_PROTECTION,
                        SIRIKIT,
                        NETWORK_EXTENSIONS,
                        MULTIPATH,
                        HOT_SPOT,
                        NFC_TAG_READING,
                        CLASSKIT,
                        AUTOFILL_CREDENTIAL_PROVIDER,
                        ACCESS_WIFI_INFORMATION,
                        NETWORK_CUSTOM_PROTOCOL,
                        COREMEDIA_HLS_LOW_LATENCY,
                        SYSTEM_EXTENSION_INSTALL,
                        USER_MANAGEMENT,
                        APPLE_ID_AUTH,
                    }
                    public CapabilityType? capabilityType { get; set; }
                    public Settings[]? settings { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "bundleIdCapabilities";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsBundleIdCapabilitiesFieldsBundleIdCapabilities
        {
            bundleId,
            capabilityType,
            settings,
        }



        // /v1/bundleIds/{id}/bundleIdCapabilities
        public Task<BundleIdCapabilitiesResponse> GetBundleIdsBundleIdCapabilities(string id, GetBundleIdsBundleIdCapabilitiesFieldsBundleIdCapabilities[]? fieldsBundleIdCapabilities = default, int? limit = default)
        {
            string path = "/v1/bundleIds/{id}/bundleIdCapabilities";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBundleIdCapabilities != null)
                uriBuilder.AddParameter("fields[bundleIdCapabilities]", string.Join(",", fieldsBundleIdCapabilities));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BundleIdCapabilitiesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetBundleIdsProfilesFieldsProfiles
        {
            bundleId,
            certificates,
            createdDate,
            devices,
            expirationDate,
            name,
            platform,
            profileContent,
            profileState,
            profileType,
            uuid,
        }



        // /v1/bundleIds/{id}/profiles
        public Task<ProfilesResponse> GetBundleIdsProfiles(string id, GetBundleIdsProfilesFieldsProfiles[]? fieldsProfiles = default, int? limit = default)
        {
            string path = "/v1/bundleIds/{id}/profiles";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsProfiles != null)
                uriBuilder.AddParameter("fields[profiles]", string.Join(",", fieldsProfiles));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ProfilesResponse>(message);
        }

        public class CiArtifactsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum FileType
                    {
                        ARCHIVE,
                        ARCHIVE_EXPORT,
                        LOG_BUNDLE,
                        RESULT_BUNDLE,
                        TEST_PRODUCTS,
                        XCODEBUILD_PRODUCTS,
                    }
                    public FileType? fileType { get; set; }
                    public string? fileName { get; set; }
                    public int? fileSize { get; set; }
                    public string? downloadUrl { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciArtifacts";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsArtifactsFieldsCiArtifacts
        {
            downloadUrl,
            fileName,
            fileSize,
            fileType,
        }



        // /v1/ciBuildActions/{id}/artifacts
        public Task<CiArtifactsResponse> GetCiBuildActionsArtifacts(string id, GetCiBuildActionsArtifactsFieldsCiArtifacts[]? fieldsCiArtifacts = default, int? limit = default)
        {
            string path = "/v1/ciBuildActions/{id}/artifacts";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiArtifacts != null)
                uriBuilder.AddParameter("fields[ciArtifacts]", string.Join(",", fieldsCiArtifacts));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiArtifactsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsBuildRunFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsBuildRunFieldsCiBuildRuns
        {
            actions,
            buildRun,
            builds,
            cancelReason,
            clean,
            completionStatus,
            createdDate,
            destinationBranch,
            destinationCommit,
            executionProgress,
            finishedDate,
            isPullRequestBuild,
            issueCounts,
            number,
            product,
            pullRequest,
            sourceBranchOrTag,
            sourceCommit,
            startReason,
            startedDate,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsBuildRunFieldsCiWorkflows
        {
            actions,
            branchStartCondition,
            buildRuns,
            clean,
            containerFilePath,
            description,
            isEnabled,
            isLockedForEditing,
            lastModifiedDate,
            macOsVersion,
            name,
            product,
            pullRequestStartCondition,
            repository,
            scheduledStartCondition,
            tagStartCondition,
            xcodeVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsBuildRunFieldsScmPullRequests
        {
            destinationBranchName,
            destinationRepositoryName,
            destinationRepositoryOwner,
            isClosed,
            isCrossRepository,
            number,
            repository,
            sourceBranchName,
            sourceRepositoryName,
            sourceRepositoryOwner,
            title,
            webUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsBuildRunFieldsCiProducts
        {
            additionalRepositories,
            app,
            buildRuns,
            bundleId,
            createdDate,
            name,
            primaryRepositories,
            productType,
            workflows,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsBuildRunFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsBuildRunInclude
        {
            builds,
            destinationBranch,
            product,
            pullRequest,
            sourceBranchOrTag,
            workflow,
        }


        // /v1/ciBuildActions/{id}/buildRun
        public Task<CiBuildRunResponse> GetCiBuildActionsBuildRun(string id, GetCiBuildActionsBuildRunFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetCiBuildActionsBuildRunFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiBuildActionsBuildRunFieldsCiWorkflows[]? fieldsCiWorkflows = default, GetCiBuildActionsBuildRunFieldsScmPullRequests[]? fieldsScmPullRequests = default, GetCiBuildActionsBuildRunFieldsCiProducts[]? fieldsCiProducts = default, GetCiBuildActionsBuildRunFieldsBuilds[]? fieldsBuilds = default, int? limitBuilds = default, GetCiBuildActionsBuildRunInclude[]? include = default)
        {
            string path = "/v1/ciBuildActions/{id}/buildRun";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (fieldsCiWorkflows != null)
                uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
            if (fieldsScmPullRequests != null)
                uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiBuildRunResponse>(message);
        }

        public class CiIssuesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class FileSource
                    {
                        public string? path { get; set; }
                        public int? lineNumber { get; set; }
                    }

                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum IssueType
                    {
                        ANALYZER_WARNING,
                        ERROR,
                        TEST_FAILURE,
                        WARNING,
                    }
                    public IssueType? issueType { get; set; }
                    public string? message { get; set; }
                    public FileSource? fileSource { get; set; }
                    public string? category { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciIssues";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsIssuesFieldsCiIssues
        {
            category,
            fileSource,
            issueType,
            message,
        }



        // /v1/ciBuildActions/{id}/issues
        public Task<CiIssuesResponse> GetCiBuildActionsIssues(string id, GetCiBuildActionsIssuesFieldsCiIssues[]? fieldsCiIssues = default, int? limit = default)
        {
            string path = "/v1/ciBuildActions/{id}/issues";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiIssues != null)
                uriBuilder.AddParameter("fields[ciIssues]", string.Join(",", fieldsCiIssues));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiIssuesResponse>(message);
        }

        public class CiTestResultsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class FileSource
                    {
                        public string? path { get; set; }
                        public int? lineNumber { get; set; }
                    }

                    public class DestinationTestResults
                    {
                        public string? uuid { get; set; }
                        public string? deviceName { get; set; }
                        public string? osVersion { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Status
                        {
                            SUCCESS,
                            FAILURE,
                            MIXED,
                            SKIPPED,
                            EXPECTED_FAILURE,
                        }
                        public Status? status { get; set; }
                        public double? duration { get; set; }
                    }

                    public string? className { get; set; }
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Status
                    {
                        SUCCESS,
                        FAILURE,
                        MIXED,
                        SKIPPED,
                        EXPECTED_FAILURE,
                    }
                    public Status? status { get; set; }
                    public FileSource? fileSource { get; set; }
                    public string? message { get; set; }
                    public DestinationTestResults[]? destinationTestResults { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciTestResults";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildActionsTestResultsFieldsCiTestResults
        {
            className,
            destinationTestResults,
            fileSource,
            message,
            name,
            status,
        }



        // /v1/ciBuildActions/{id}/testResults
        public Task<CiTestResultsResponse> GetCiBuildActionsTestResults(string id, GetCiBuildActionsTestResultsFieldsCiTestResults[]? fieldsCiTestResults = default, int? limit = default)
        {
            string path = "/v1/ciBuildActions/{id}/testResults";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiTestResults != null)
                uriBuilder.AddParameter("fields[ciTestResults]", string.Join(",", fieldsCiTestResults));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiTestResultsResponse>(message);
        }

        public class CiBuildActionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class IssueCounts
                    {
                        public int? analyzerWarnings { get; set; }
                        public int? errors { get; set; }
                        public int? testFailures { get; set; }
                        public int? warnings { get; set; }
                    }

                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ActionType
                    {
                        BUILD,
                        ANALYZE,
                        TEST,
                        ARCHIVE,
                    }
                    public ActionType? actionType { get; set; }
                    public string? startedDate { get; set; }
                    public string? finishedDate { get; set; }
                    public IssueCounts? issueCounts { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ExecutionProgress
                    {
                        PENDING,
                        RUNNING,
                        COMPLETE,
                    }
                    public ExecutionProgress? executionProgress { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CompletionStatus
                    {
                        SUCCEEDED,
                        FAILED,
                        ERRORED,
                        CANCELED,
                        SKIPPED,
                    }
                    public CompletionStatus? completionStatus { get; set; }
                    public bool? isRequiredToPass { get; set; }
                }

                public class Relationships
                {
                    public class BuildRun
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciBuildRuns";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public BuildRun? buildRun { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciBuildActions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public class SourceCommit
                    {
                        public class Author
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public class Committer
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public string? commitSha { get; set; }
                        public string? message { get; set; }
                        public Author? author { get; set; }
                        public Committer? committer { get; set; }
                        public string? webUrl { get; set; }
                    }

                    public class DestinationCommit
                    {
                        public class Author
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public class Committer
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public string? commitSha { get; set; }
                        public string? message { get; set; }
                        public Author? author { get; set; }
                        public Committer? committer { get; set; }
                        public string? webUrl { get; set; }
                    }

                    public class IssueCounts
                    {
                        public int? analyzerWarnings { get; set; }
                        public int? errors { get; set; }
                        public int? testFailures { get; set; }
                        public int? warnings { get; set; }
                    }

                    public int? number { get; set; }
                    public string? createdDate { get; set; }
                    public string? startedDate { get; set; }
                    public string? finishedDate { get; set; }
                    public SourceCommit? sourceCommit { get; set; }
                    public DestinationCommit? destinationCommit { get; set; }
                    public bool? isPullRequestBuild { get; set; }
                    public IssueCounts? issueCounts { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ExecutionProgress
                    {
                        PENDING,
                        RUNNING,
                        COMPLETE,
                    }
                    public ExecutionProgress? executionProgress { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CompletionStatus
                    {
                        SUCCEEDED,
                        FAILED,
                        ERRORED,
                        CANCELED,
                        SKIPPED,
                    }
                    public CompletionStatus? completionStatus { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum StartReason
                    {
                        GIT_REF_CHANGE,
                        MANUAL,
                        MANUAL_REBUILD,
                        PULL_REQUEST_OPEN,
                        PULL_REQUEST_UPDATE,
                        SCHEDULE,
                    }
                    public StartReason? startReason { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CancelReason
                    {
                        AUTOMATICALLY_BY_NEWER_BUILD,
                        MANUALLY_BY_USER,
                    }
                    public CancelReason? cancelReason { get; set; }
                }

                public class Relationships
                {
                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Workflow
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciWorkflows";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Product
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SourceBranchOrTag
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DestinationBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PullRequest
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmPullRequests";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Builds? builds { get; set; }
                    public Workflow? workflow { get; set; }
                    public Product? product { get; set; }
                    public SourceBranchOrTag? sourceBranchOrTag { get; set; }
                    public DestinationBranch? destinationBranch { get; set; }
                    public PullRequest? pullRequest { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciBuildRuns";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsActionsFieldsCiBuildRuns
        {
            actions,
            buildRun,
            builds,
            cancelReason,
            clean,
            completionStatus,
            createdDate,
            destinationBranch,
            destinationCommit,
            executionProgress,
            finishedDate,
            isPullRequestBuild,
            issueCounts,
            number,
            product,
            pullRequest,
            sourceBranchOrTag,
            sourceCommit,
            startReason,
            startedDate,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsActionsFieldsCiBuildActions
        {
            actionType,
            artifacts,
            buildRun,
            completionStatus,
            executionProgress,
            finishedDate,
            isRequiredToPass,
            issueCounts,
            issues,
            name,
            startedDate,
            testResults,
        }




        // /v1/ciBuildRuns/{id}/actions
        public Task<CiBuildActionsResponse> GetCiBuildRunsActions(string id, GetCiBuildRunsActionsFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiBuildRunsActionsFieldsCiBuildActions[]? fieldsCiBuildActions = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/ciBuildRuns/{id}/actions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (fieldsCiBuildActions != null)
                uriBuilder.AddParameter("fields[ciBuildActions]", string.Join(",", fieldsCiBuildActions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiBuildActionsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFilterBetaAppReviewSubmissionBetaReviewState
        {
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            REJECTED,
            APPROVED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFilterBuildAudienceType
        {
            INTERNAL_ONLY,
            APP_STORE_ELIGIBLE,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFilterPreReleaseVersionPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFilterProcessingState
        {
            PROCESSING,
            FAILED,
            INVALID,
            VALID,
        }









        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsSort
        {
            preReleaseVersion,
            [EnumMember(Value = "-preReleaseVersion")]
            preReleaseVersionDescending,
            uploadedDate,
            [EnumMember(Value = "-uploadedDate")]
            uploadedDateDescending,
            version,
            [EnumMember(Value = "-version")]
            versionDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsBuildBundles
        {
            appClipDomainCacheStatus,
            appClipDomainDebugStatus,
            betaAppClipInvocations,
            buildBundleFileSizes,
            bundleId,
            bundleType,
            dSYMUrl,
            deviceProtocols,
            entitlements,
            fileName,
            hasOnDemandResources,
            hasPrerenderedIcon,
            hasSirikit,
            includesSymbols,
            isIosBuildMacAppStoreCompatible,
            locales,
            platformBuild,
            requiredCapabilities,
            sdkBuild,
            supportedArchitectures,
            usesLocationServices,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsBuildIcons
        {
            iconAsset,
            iconType,
            name,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsBetaAppReviewSubmissions
        {
            betaReviewState,
            build,
            submittedDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsBuildBetaDetails
        {
            autoNotifyEnabled,
            build,
            externalBuildState,
            internalBuildState,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsBetaTesters
        {
            apps,
            betaGroups,
            builds,
            email,
            firstName,
            inviteType,
            lastName,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsPreReleaseVersions
        {
            app,
            builds,
            platform,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsBetaBuildLocalizations
        {
            build,
            locale,
            whatsNew,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsAppEncryptionDeclarations
        {
            app,
            appEncryptionDeclarationState,
            availableOnFrenchStore,
            builds,
            codeValue,
            containsProprietaryCryptography,
            containsThirdPartyCryptography,
            documentName,
            documentType,
            documentUrl,
            exempt,
            platform,
            uploadedDate,
            usesEncryption,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsFieldsBetaGroups
        {
            app,
            betaTesters,
            builds,
            createdDate,
            feedbackEnabled,
            hasAccessToAllBuilds,
            iosBuildsAvailableForAppleSiliconMac,
            isInternalGroup,
            name,
            publicLink,
            publicLinkEnabled,
            publicLinkId,
            publicLinkLimit,
            publicLinkLimitEnabled,
        }








        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiBuildRunsBuildsInclude
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildBetaDetail,
            buildBundles,
            icons,
            individualTesters,
            preReleaseVersion,
        }


        // /v1/ciBuildRuns/{id}/builds
        public Task<BuildsResponse> GetCiBuildRunsBuilds(string id, GetCiBuildRunsBuildsFilterBetaAppReviewSubmissionBetaReviewState[]? filterBetaAppReviewSubmissionBetaReviewState = default, GetCiBuildRunsBuildsFilterBuildAudienceType[]? filterBuildAudienceType = default, string[]? filterExpired = default, GetCiBuildRunsBuildsFilterPreReleaseVersionPlatform[]? filterPreReleaseVersionPlatform = default, string[]? filterPreReleaseVersionVersion = default, GetCiBuildRunsBuildsFilterProcessingState[]? filterProcessingState = default, string[]? filterUsesNonExemptEncryption = default, string[]? filterVersion = default, string[]? filterApp = default, string[]? filterAppStoreVersion = default, string[]? filterBetaGroups = default, string[]? filterPreReleaseVersion = default, string[]? filterId = default, GetCiBuildRunsBuildsSort[]? sort = default, GetCiBuildRunsBuildsFieldsBuildBundles[]? fieldsBuildBundles = default, GetCiBuildRunsBuildsFieldsBuildIcons[]? fieldsBuildIcons = default, GetCiBuildRunsBuildsFieldsBetaAppReviewSubmissions[]? fieldsBetaAppReviewSubmissions = default, GetCiBuildRunsBuildsFieldsBuildBetaDetails[]? fieldsBuildBetaDetails = default, GetCiBuildRunsBuildsFieldsBetaTesters[]? fieldsBetaTesters = default, GetCiBuildRunsBuildsFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, GetCiBuildRunsBuildsFieldsBetaBuildLocalizations[]? fieldsBetaBuildLocalizations = default, GetCiBuildRunsBuildsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetCiBuildRunsBuildsFieldsAppEncryptionDeclarations[]? fieldsAppEncryptionDeclarations = default, GetCiBuildRunsBuildsFieldsApps[]? fieldsApps = default, GetCiBuildRunsBuildsFieldsBuilds[]? fieldsBuilds = default, GetCiBuildRunsBuildsFieldsBetaGroups[]? fieldsBetaGroups = default, int? limit = default, int? limitIndividualTesters = default, int? limitBetaGroups = default, int? limitBetaBuildLocalizations = default, int? limitIcons = default, int? limitBuildBundles = default, GetCiBuildRunsBuildsInclude[]? include = default)
        {
            string path = "/v1/ciBuildRuns/{id}/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterBetaAppReviewSubmissionBetaReviewState != null)
                uriBuilder.AddParameter("filter[betaAppReviewSubmission.betaReviewState]", string.Join(",", filterBetaAppReviewSubmissionBetaReviewState));
            if (filterBuildAudienceType != null)
                uriBuilder.AddParameter("filter[buildAudienceType]", string.Join(",", filterBuildAudienceType));
            if (filterExpired != null)
                uriBuilder.AddParameter("filter[expired]", string.Join(",", filterExpired));
            if (filterPreReleaseVersionPlatform != null)
                uriBuilder.AddParameter("filter[preReleaseVersion.platform]", string.Join(",", filterPreReleaseVersionPlatform));
            if (filterPreReleaseVersionVersion != null)
                uriBuilder.AddParameter("filter[preReleaseVersion.version]", string.Join(",", filterPreReleaseVersionVersion));
            if (filterProcessingState != null)
                uriBuilder.AddParameter("filter[processingState]", string.Join(",", filterProcessingState));
            if (filterUsesNonExemptEncryption != null)
                uriBuilder.AddParameter("filter[usesNonExemptEncryption]", string.Join(",", filterUsesNonExemptEncryption));
            if (filterVersion != null)
                uriBuilder.AddParameter("filter[version]", string.Join(",", filterVersion));
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (filterAppStoreVersion != null)
                uriBuilder.AddParameter("filter[appStoreVersion]", string.Join(",", filterAppStoreVersion));
            if (filterBetaGroups != null)
                uriBuilder.AddParameter("filter[betaGroups]", string.Join(",", filterBetaGroups));
            if (filterPreReleaseVersion != null)
                uriBuilder.AddParameter("filter[preReleaseVersion]", string.Join(",", filterPreReleaseVersion));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsBuildBundles != null)
                uriBuilder.AddParameter("fields[buildBundles]", string.Join(",", fieldsBuildBundles));
            if (fieldsBuildIcons != null)
                uriBuilder.AddParameter("fields[buildIcons]", string.Join(",", fieldsBuildIcons));
            if (fieldsBetaAppReviewSubmissions != null)
                uriBuilder.AddParameter("fields[betaAppReviewSubmissions]", string.Join(",", fieldsBetaAppReviewSubmissions));
            if (fieldsBuildBetaDetails != null)
                uriBuilder.AddParameter("fields[buildBetaDetails]", string.Join(",", fieldsBuildBetaDetails));
            if (fieldsBetaTesters != null)
                uriBuilder.AddParameter("fields[betaTesters]", string.Join(",", fieldsBetaTesters));
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (fieldsBetaBuildLocalizations != null)
                uriBuilder.AddParameter("fields[betaBuildLocalizations]", string.Join(",", fieldsBetaBuildLocalizations));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppEncryptionDeclarations != null)
                uriBuilder.AddParameter("fields[appEncryptionDeclarations]", string.Join(",", fieldsAppEncryptionDeclarations));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitIndividualTesters.HasValue)
                uriBuilder.AddParameter("limit[individualTesters]", limitIndividualTesters.Value.ToString());
            if (limitBetaGroups.HasValue)
                uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
            if (limitBetaBuildLocalizations.HasValue)
                uriBuilder.AddParameter("limit[betaBuildLocalizations]", limitBetaBuildLocalizations.Value.ToString());
            if (limitIcons.HasValue)
                uriBuilder.AddParameter("limit[icons]", limitIcons.Value.ToString());
            if (limitBuildBundles.HasValue)
                uriBuilder.AddParameter("limit[buildBundles]", limitBuildBundles.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiMacOsVersionsXcodeVersionsFieldsCiXcodeVersions
        {
            macOsVersions,
            name,
            testDestinations,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiMacOsVersionsXcodeVersionsFieldsCiMacOsVersions
        {
            name,
            version,
            xcodeVersions,
        }





        // /v1/ciMacOsVersions/{id}/xcodeVersions
        public Task<CiXcodeVersionsResponse> GetCiMacOsVersionsXcodeVersions(string id, GetCiMacOsVersionsXcodeVersionsFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, GetCiMacOsVersionsXcodeVersionsFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, int? limit = default, int? limitMacOsVersions = default, string[]? include = default)
        {
            string path = "/v1/ciMacOsVersions/{id}/xcodeVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiXcodeVersions != null)
                uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
            if (fieldsCiMacOsVersions != null)
                uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitMacOsVersions.HasValue)
                uriBuilder.AddParameter("limit[macOsVersions]", limitMacOsVersions.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiXcodeVersionsResponse>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAdditionalRepositoriesFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAdditionalRepositoriesFieldsScmProviders
        {
            repositories,
            scmProviderType,
            url,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAdditionalRepositoriesFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAdditionalRepositoriesInclude
        {
            defaultBranch,
            scmProvider,
        }


        // /v1/ciProducts/{id}/additionalRepositories
        public Task<ScmRepositoriesResponse> GetCiProductsAdditionalRepositories(string id, string[]? filterId = default, GetCiProductsAdditionalRepositoriesFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetCiProductsAdditionalRepositoriesFieldsScmProviders[]? fieldsScmProviders = default, GetCiProductsAdditionalRepositoriesFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, GetCiProductsAdditionalRepositoriesInclude[]? include = default)
        {
            string path = "/v1/ciProducts/{id}/additionalRepositories";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsScmProviders != null)
                uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmRepositoriesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsBetaLicenseAgreements
        {
            agreementText,
            app,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsBetaAppReviewDetails
        {
            app,
            contactEmail,
            contactFirstName,
            contactLastName,
            contactPhone,
            demoAccountName,
            demoAccountPassword,
            demoAccountRequired,
            notes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsAppClips
        {
            app,
            appClipAdvancedExperiences,
            appClipDefaultExperiences,
            bundleId,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsBetaAppLocalizations
        {
            app,
            description,
            feedbackEmail,
            locale,
            marketingUrl,
            privacyPolicyUrl,
            tvOsPrivacyPolicy,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsAppInfos
        {
            ageRatingDeclaration,
            app,
            appInfoLocalizations,
            appStoreAgeRating,
            appStoreState,
            brazilAgeRating,
            kidsAgeBand,
            primaryCategory,
            primarySubcategoryOne,
            primarySubcategoryTwo,
            secondaryCategory,
            secondarySubcategoryOne,
            secondarySubcategoryTwo,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsPreReleaseVersions
        {
            app,
            builds,
            platform,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsInAppPurchases
        {
            apps,
            inAppPurchaseType,
            productId,
            referenceName,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsCiProducts
        {
            additionalRepositories,
            app,
            buildRuns,
            bundleId,
            createdDate,
            name,
            primaryRepositories,
            productType,
            workflows,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsSubscriptionGroups
        {
            app,
            referenceName,
            subscriptionGroupLocalizations,
            subscriptions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsReviewSubmissions
        {
            app,
            appStoreVersionForReview,
            canceled,
            items,
            platform,
            state,
            submitted,
            submittedDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsBetaGroups
        {
            app,
            betaTesters,
            builds,
            createdDate,
            feedbackEnabled,
            hasAccessToAllBuilds,
            iosBuildsAvailableForAppleSiliconMac,
            isInternalGroup,
            name,
            publicLink,
            publicLinkEnabled,
            publicLinkId,
            publicLinkLimit,
            publicLinkLimitEnabled,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsAppPreOrders
        {
            app,
            appReleaseDate,
            preOrderAvailableDate,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsAppPrices
        {
            app,
            priceTier,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsGameCenterEnabledVersions
        {
            app,
            compatibleVersions,
            iconAsset,
            platform,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsSubscriptionGracePeriods
        {
            app,
            optIn,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsEndUserLicenseAgreements
        {
            agreementText,
            app,
            territories,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsAppCustomProductPages
        {
            app,
            appCustomProductPageVersions,
            appStoreVersionTemplate,
            customProductPageTemplate,
            name,
            url,
            visible,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsAppEvents
        {
            app,
            archivedTerritorySchedules,
            badge,
            deepLink,
            eventState,
            localizations,
            primaryLocale,
            priority,
            purchaseRequirement,
            purpose,
            referenceName,
            territorySchedules,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



















        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsAppInclude
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            builds,
            ciProduct,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            preOrder,
            preReleaseVersions,
            prices,
            promotedPurchases,
            reviewSubmissions,
            subscriptionGracePeriod,
            subscriptionGroups,
        }


        // /v1/ciProducts/{id}/app
        public Task<AppResponse> GetCiProductsApp(string id, GetCiProductsAppFieldsBetaLicenseAgreements[]? fieldsBetaLicenseAgreements = default, GetCiProductsAppFieldsBetaAppReviewDetails[]? fieldsBetaAppReviewDetails = default, GetCiProductsAppFieldsAppClips[]? fieldsAppClips = default, GetCiProductsAppFieldsBetaAppLocalizations[]? fieldsBetaAppLocalizations = default, GetCiProductsAppFieldsAppInfos[]? fieldsAppInfos = default, GetCiProductsAppFieldsPreReleaseVersions[]? fieldsPreReleaseVersions = default, GetCiProductsAppFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetCiProductsAppFieldsCiProducts[]? fieldsCiProducts = default, GetCiProductsAppFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, GetCiProductsAppFieldsReviewSubmissions[]? fieldsReviewSubmissions = default, GetCiProductsAppFieldsBetaGroups[]? fieldsBetaGroups = default, GetCiProductsAppFieldsAppPreOrders[]? fieldsAppPreOrders = default, GetCiProductsAppFieldsAppPrices[]? fieldsAppPrices = default, GetCiProductsAppFieldsGameCenterEnabledVersions[]? fieldsGameCenterEnabledVersions = default, GetCiProductsAppFieldsSubscriptionGracePeriods[]? fieldsSubscriptionGracePeriods = default, GetCiProductsAppFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetCiProductsAppFieldsEndUserLicenseAgreements[]? fieldsEndUserLicenseAgreements = default, GetCiProductsAppFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetCiProductsAppFieldsAppCustomProductPages[]? fieldsAppCustomProductPages = default, GetCiProductsAppFieldsApps[]? fieldsApps = default, GetCiProductsAppFieldsAppEvents[]? fieldsAppEvents = default, string[]? fieldsTerritories = default, GetCiProductsAppFieldsBuilds[]? fieldsBuilds = default, int? limitBetaGroups = default, int? limitAppStoreVersions = default, int? limitPreReleaseVersions = default, int? limitBetaAppLocalizations = default, int? limitBuilds = default, int? limitAppInfos = default, int? limitAppClips = default, int? limitPrices = default, int? limitAvailableTerritories = default, int? limitInAppPurchases = default, int? limitSubscriptionGroups = default, int? limitGameCenterEnabledVersions = default, int? limitAppCustomProductPages = default, int? limitInAppPurchasesV2 = default, int? limitPromotedPurchases = default, int? limitAppEvents = default, int? limitReviewSubmissions = default, GetCiProductsAppInclude[]? include = default)
        {
            string path = "/v1/ciProducts/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBetaLicenseAgreements != null)
                uriBuilder.AddParameter("fields[betaLicenseAgreements]", string.Join(",", fieldsBetaLicenseAgreements));
            if (fieldsBetaAppReviewDetails != null)
                uriBuilder.AddParameter("fields[betaAppReviewDetails]", string.Join(",", fieldsBetaAppReviewDetails));
            if (fieldsAppClips != null)
                uriBuilder.AddParameter("fields[appClips]", string.Join(",", fieldsAppClips));
            if (fieldsBetaAppLocalizations != null)
                uriBuilder.AddParameter("fields[betaAppLocalizations]", string.Join(",", fieldsBetaAppLocalizations));
            if (fieldsAppInfos != null)
                uriBuilder.AddParameter("fields[appInfos]", string.Join(",", fieldsAppInfos));
            if (fieldsPreReleaseVersions != null)
                uriBuilder.AddParameter("fields[preReleaseVersions]", string.Join(",", fieldsPreReleaseVersions));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (fieldsSubscriptionGroups != null)
                uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
            if (fieldsReviewSubmissions != null)
                uriBuilder.AddParameter("fields[reviewSubmissions]", string.Join(",", fieldsReviewSubmissions));
            if (fieldsBetaGroups != null)
                uriBuilder.AddParameter("fields[betaGroups]", string.Join(",", fieldsBetaGroups));
            if (fieldsAppPreOrders != null)
                uriBuilder.AddParameter("fields[appPreOrders]", string.Join(",", fieldsAppPreOrders));
            if (fieldsAppPrices != null)
                uriBuilder.AddParameter("fields[appPrices]", string.Join(",", fieldsAppPrices));
            if (fieldsGameCenterEnabledVersions != null)
                uriBuilder.AddParameter("fields[gameCenterEnabledVersions]", string.Join(",", fieldsGameCenterEnabledVersions));
            if (fieldsSubscriptionGracePeriods != null)
                uriBuilder.AddParameter("fields[subscriptionGracePeriods]", string.Join(",", fieldsSubscriptionGracePeriods));
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsEndUserLicenseAgreements != null)
                uriBuilder.AddParameter("fields[endUserLicenseAgreements]", string.Join(",", fieldsEndUserLicenseAgreements));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppCustomProductPages != null)
                uriBuilder.AddParameter("fields[appCustomProductPages]", string.Join(",", fieldsAppCustomProductPages));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (fieldsAppEvents != null)
                uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limitBetaGroups.HasValue)
                uriBuilder.AddParameter("limit[betaGroups]", limitBetaGroups.Value.ToString());
            if (limitAppStoreVersions.HasValue)
                uriBuilder.AddParameter("limit[appStoreVersions]", limitAppStoreVersions.Value.ToString());
            if (limitPreReleaseVersions.HasValue)
                uriBuilder.AddParameter("limit[preReleaseVersions]", limitPreReleaseVersions.Value.ToString());
            if (limitBetaAppLocalizations.HasValue)
                uriBuilder.AddParameter("limit[betaAppLocalizations]", limitBetaAppLocalizations.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
            if (limitAppInfos.HasValue)
                uriBuilder.AddParameter("limit[appInfos]", limitAppInfos.Value.ToString());
            if (limitAppClips.HasValue)
                uriBuilder.AddParameter("limit[appClips]", limitAppClips.Value.ToString());
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
            if (limitAvailableTerritories.HasValue)
                uriBuilder.AddParameter("limit[availableTerritories]", limitAvailableTerritories.Value.ToString());
            if (limitInAppPurchases.HasValue)
                uriBuilder.AddParameter("limit[inAppPurchases]", limitInAppPurchases.Value.ToString());
            if (limitSubscriptionGroups.HasValue)
                uriBuilder.AddParameter("limit[subscriptionGroups]", limitSubscriptionGroups.Value.ToString());
            if (limitGameCenterEnabledVersions.HasValue)
                uriBuilder.AddParameter("limit[gameCenterEnabledVersions]", limitGameCenterEnabledVersions.Value.ToString());
            if (limitAppCustomProductPages.HasValue)
                uriBuilder.AddParameter("limit[appCustomProductPages]", limitAppCustomProductPages.Value.ToString());
            if (limitInAppPurchasesV2.HasValue)
                uriBuilder.AddParameter("limit[inAppPurchasesV2]", limitInAppPurchasesV2.Value.ToString());
            if (limitPromotedPurchases.HasValue)
                uriBuilder.AddParameter("limit[promotedPurchases]", limitPromotedPurchases.Value.ToString());
            if (limitAppEvents.HasValue)
                uriBuilder.AddParameter("limit[appEvents]", limitAppEvents.Value.ToString());
            if (limitReviewSubmissions.HasValue)
                uriBuilder.AddParameter("limit[reviewSubmissions]", limitReviewSubmissions.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        public class CiBuildRunsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class SourceCommit
                    {
                        public class Author
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public class Committer
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public string? commitSha { get; set; }
                        public string? message { get; set; }
                        public Author? author { get; set; }
                        public Committer? committer { get; set; }
                        public string? webUrl { get; set; }
                    }

                    public class DestinationCommit
                    {
                        public class Author
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public class Committer
                        {
                            public string? displayName { get; set; }
                            public string? avatarUrl { get; set; }
                        }

                        public string? commitSha { get; set; }
                        public string? message { get; set; }
                        public Author? author { get; set; }
                        public Committer? committer { get; set; }
                        public string? webUrl { get; set; }
                    }

                    public class IssueCounts
                    {
                        public int? analyzerWarnings { get; set; }
                        public int? errors { get; set; }
                        public int? testFailures { get; set; }
                        public int? warnings { get; set; }
                    }

                    public int? number { get; set; }
                    public string? createdDate { get; set; }
                    public string? startedDate { get; set; }
                    public string? finishedDate { get; set; }
                    public SourceCommit? sourceCommit { get; set; }
                    public DestinationCommit? destinationCommit { get; set; }
                    public bool? isPullRequestBuild { get; set; }
                    public IssueCounts? issueCounts { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum ExecutionProgress
                    {
                        PENDING,
                        RUNNING,
                        COMPLETE,
                    }
                    public ExecutionProgress? executionProgress { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CompletionStatus
                    {
                        SUCCEEDED,
                        FAILED,
                        ERRORED,
                        CANCELED,
                        SKIPPED,
                    }
                    public CompletionStatus? completionStatus { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum StartReason
                    {
                        GIT_REF_CHANGE,
                        MANUAL,
                        MANUAL_REBUILD,
                        PULL_REQUEST_OPEN,
                        PULL_REQUEST_UPDATE,
                        SCHEDULE,
                    }
                    public StartReason? startReason { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CancelReason
                    {
                        AUTOMATICALLY_BY_NEWER_BUILD,
                        MANUALLY_BY_USER,
                    }
                    public CancelReason? cancelReason { get; set; }
                }

                public class Relationships
                {
                    public class Builds
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "builds";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Workflow
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciWorkflows";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Product
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SourceBranchOrTag
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DestinationBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PullRequest
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmPullRequests";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Builds? builds { get; set; }
                    public Workflow? workflow { get; set; }
                    public Product? product { get; set; }
                    public SourceBranchOrTag? sourceBranchOrTag { get; set; }
                    public DestinationBranch? destinationBranch { get; set; }
                    public PullRequest? pullRequest { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciBuildRuns";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsBuildRunsFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsBuildRunsFieldsCiBuildRuns
        {
            actions,
            buildRun,
            builds,
            cancelReason,
            clean,
            completionStatus,
            createdDate,
            destinationBranch,
            destinationCommit,
            executionProgress,
            finishedDate,
            isPullRequestBuild,
            issueCounts,
            number,
            product,
            pullRequest,
            sourceBranchOrTag,
            sourceCommit,
            startReason,
            startedDate,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsBuildRunsFieldsCiWorkflows
        {
            actions,
            branchStartCondition,
            buildRuns,
            clean,
            containerFilePath,
            description,
            isEnabled,
            isLockedForEditing,
            lastModifiedDate,
            macOsVersion,
            name,
            product,
            pullRequestStartCondition,
            repository,
            scheduledStartCondition,
            tagStartCondition,
            xcodeVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsBuildRunsFieldsScmPullRequests
        {
            destinationBranchName,
            destinationRepositoryName,
            destinationRepositoryOwner,
            isClosed,
            isCrossRepository,
            number,
            repository,
            sourceBranchName,
            sourceRepositoryName,
            sourceRepositoryOwner,
            title,
            webUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsBuildRunsFieldsCiProducts
        {
            additionalRepositories,
            app,
            buildRuns,
            bundleId,
            createdDate,
            name,
            primaryRepositories,
            productType,
            workflows,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsBuildRunsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsBuildRunsInclude
        {
            builds,
            destinationBranch,
            product,
            pullRequest,
            sourceBranchOrTag,
            workflow,
        }


        // /v1/ciProducts/{id}/buildRuns
        public Task<CiBuildRunsResponse> GetCiProductsBuildRuns(string id, string[]? filterBuilds = default, GetCiProductsBuildRunsFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetCiProductsBuildRunsFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiProductsBuildRunsFieldsCiWorkflows[]? fieldsCiWorkflows = default, GetCiProductsBuildRunsFieldsScmPullRequests[]? fieldsScmPullRequests = default, GetCiProductsBuildRunsFieldsCiProducts[]? fieldsCiProducts = default, GetCiProductsBuildRunsFieldsBuilds[]? fieldsBuilds = default, int? limit = default, int? limitBuilds = default, GetCiProductsBuildRunsInclude[]? include = default)
        {
            string path = "/v1/ciProducts/{id}/buildRuns";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterBuilds != null)
                uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (fieldsCiWorkflows != null)
                uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
            if (fieldsScmPullRequests != null)
                uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiBuildRunsResponse>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsPrimaryRepositoriesFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsPrimaryRepositoriesFieldsScmProviders
        {
            repositories,
            scmProviderType,
            url,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsPrimaryRepositoriesFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsPrimaryRepositoriesInclude
        {
            defaultBranch,
            scmProvider,
        }


        // /v1/ciProducts/{id}/primaryRepositories
        public Task<ScmRepositoriesResponse> GetCiProductsPrimaryRepositories(string id, string[]? filterId = default, GetCiProductsPrimaryRepositoriesFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetCiProductsPrimaryRepositoriesFieldsScmProviders[]? fieldsScmProviders = default, GetCiProductsPrimaryRepositoriesFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, GetCiProductsPrimaryRepositoriesInclude[]? include = default)
        {
            string path = "/v1/ciProducts/{id}/primaryRepositories";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsScmProviders != null)
                uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmRepositoriesResponse>(message);
        }

        public class CiWorkflowsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class BranchStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class TagStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class PullRequestStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class Destination
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class FilesAndFoldersRule
                        {
                            public class Matchers
                            {
                                public string? directory { get; set; }
                                public string? fileExtension { get; set; }
                                public string? fileName { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Mode
                            {
                                START_IF_ANY_FILE_MATCHES,
                                DO_NOT_START_IF_ALL_FILES_MATCH,
                            }
                            public Mode? mode { get; set; }
                            public Matchers[]? matchers { get; set; }
                        }

                        public Source? source { get; set; }
                        public Destination? destination { get; set; }
                        public FilesAndFoldersRule? filesAndFoldersRule { get; set; }
                        public bool? autoCancel { get; set; }
                    }

                    public class ScheduledStartCondition
                    {
                        public class Source
                        {
                            public class Patterns
                            {
                                public string? pattern { get; set; }
                                public bool? isPrefix { get; set; }
                            }

                            public bool? isAllMatch { get; set; }
                            public Patterns[]? patterns { get; set; }
                        }

                        public class Schedule
                        {
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Frequency
                            {
                                WEEKLY,
                                DAILY,
                                HOURLY,
                            }
                            public Frequency? frequency { get; set; }
                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Days
                            {
                                SUNDAY,
                                MONDAY,
                                TUESDAY,
                                WEDNESDAY,
                                THURSDAY,
                                FRIDAY,
                                SATURDAY,
                            }

                            public Days[]? days { get; set; }
                            public int? hour { get; set; }
                            public int? minute { get; set; }
                            public string? timezone { get; set; }
                        }

                        public Source? source { get; set; }
                        public Schedule? schedule { get; set; }
                    }

                    public class Actions
                    {
                        public class TestConfiguration
                        {
                            public class TestDestinations
                            {
                                public string? deviceTypeName { get; set; }
                                public string? deviceTypeIdentifier { get; set; }
                                public string? runtimeName { get; set; }
                                public string? runtimeIdentifier { get; set; }
                                [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                                public enum Kind
                                {
                                    SIMULATOR,
                                    MAC,
                                }
                                public Kind? kind { get; set; }
                            }

                            [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                            public enum Kind
                            {
                                USE_SCHEME_SETTINGS,
                                SPECIFIC_TEST_PLANS,
                            }
                            public Kind? kind { get; set; }
                            public string? testPlanName { get; set; }
                            public TestDestinations[]? testDestinations { get; set; }
                        }

                        public string? name { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum ActionType
                        {
                            BUILD,
                            ANALYZE,
                            TEST,
                            ARCHIVE,
                        }
                        public ActionType? actionType { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Destination
                        {
                            ANY_IOS_DEVICE,
                            ANY_IOS_SIMULATOR,
                            ANY_TVOS_DEVICE,
                            ANY_TVOS_SIMULATOR,
                            ANY_WATCHOS_DEVICE,
                            ANY_WATCHOS_SIMULATOR,
                            ANY_MAC,
                            ANY_MAC_CATALYST,
                        }
                        public Destination? destination { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum BuildDistributionAudience
                        {
                            INTERNAL_ONLY,
                            APP_STORE_ELIGIBLE,
                        }
                        public BuildDistributionAudience? buildDistributionAudience { get; set; }
                        public TestConfiguration? testConfiguration { get; set; }
                        public string? scheme { get; set; }
                        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                        public enum Platform
                        {
                            MACOS,
                            IOS,
                            TVOS,
                            WATCHOS,
                        }
                        public Platform? platform { get; set; }
                        public bool? isRequiredToPass { get; set; }
                    }

                    public string? name { get; set; }
                    public string? description { get; set; }
                    public BranchStartCondition? branchStartCondition { get; set; }
                    public TagStartCondition? tagStartCondition { get; set; }
                    public PullRequestStartCondition? pullRequestStartCondition { get; set; }
                    public ScheduledStartCondition? scheduledStartCondition { get; set; }
                    public Actions[]? actions { get; set; }
                    public bool? isEnabled { get; set; }
                    public bool? isLockedForEditing { get; set; }
                    public bool? clean { get; set; }
                    public string? containerFilePath { get; set; }
                    public string? lastModifiedDate { get; set; }
                }

                public class Relationships
                {
                    public class Product
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciProducts";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Repository
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class XcodeVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciXcodeVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class MacOsVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "ciMacOsVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Product? product { get; set; }
                    public Repository? repository { get; set; }
                    public XcodeVersion? xcodeVersion { get; set; }
                    public MacOsVersion? macOsVersion { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "ciWorkflows";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsWorkflowsFieldsCiXcodeVersions
        {
            macOsVersions,
            name,
            testDestinations,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsWorkflowsFieldsCiWorkflows
        {
            actions,
            branchStartCondition,
            buildRuns,
            clean,
            containerFilePath,
            description,
            isEnabled,
            isLockedForEditing,
            lastModifiedDate,
            macOsVersion,
            name,
            product,
            pullRequestStartCondition,
            repository,
            scheduledStartCondition,
            tagStartCondition,
            xcodeVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsWorkflowsFieldsCiMacOsVersions
        {
            name,
            version,
            xcodeVersions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsWorkflowsFieldsCiProducts
        {
            additionalRepositories,
            app,
            buildRuns,
            bundleId,
            createdDate,
            name,
            primaryRepositories,
            productType,
            workflows,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsWorkflowsFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiProductsWorkflowsInclude
        {
            macOsVersion,
            product,
            repository,
            xcodeVersion,
        }


        // /v1/ciProducts/{id}/workflows
        public Task<CiWorkflowsResponse> GetCiProductsWorkflows(string id, GetCiProductsWorkflowsFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, GetCiProductsWorkflowsFieldsCiWorkflows[]? fieldsCiWorkflows = default, GetCiProductsWorkflowsFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, GetCiProductsWorkflowsFieldsCiProducts[]? fieldsCiProducts = default, GetCiProductsWorkflowsFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, GetCiProductsWorkflowsInclude[]? include = default)
        {
            string path = "/v1/ciProducts/{id}/workflows";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiXcodeVersions != null)
                uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
            if (fieldsCiWorkflows != null)
                uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
            if (fieldsCiMacOsVersions != null)
                uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiWorkflowsResponse>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsBuildRunsFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsBuildRunsFieldsCiBuildRuns
        {
            actions,
            buildRun,
            builds,
            cancelReason,
            clean,
            completionStatus,
            createdDate,
            destinationBranch,
            destinationCommit,
            executionProgress,
            finishedDate,
            isPullRequestBuild,
            issueCounts,
            number,
            product,
            pullRequest,
            sourceBranchOrTag,
            sourceCommit,
            startReason,
            startedDate,
            workflow,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsBuildRunsFieldsCiWorkflows
        {
            actions,
            branchStartCondition,
            buildRuns,
            clean,
            containerFilePath,
            description,
            isEnabled,
            isLockedForEditing,
            lastModifiedDate,
            macOsVersion,
            name,
            product,
            pullRequestStartCondition,
            repository,
            scheduledStartCondition,
            tagStartCondition,
            xcodeVersion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsBuildRunsFieldsScmPullRequests
        {
            destinationBranchName,
            destinationRepositoryName,
            destinationRepositoryOwner,
            isClosed,
            isCrossRepository,
            number,
            repository,
            sourceBranchName,
            sourceRepositoryName,
            sourceRepositoryOwner,
            title,
            webUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsBuildRunsFieldsCiProducts
        {
            additionalRepositories,
            app,
            buildRuns,
            bundleId,
            createdDate,
            name,
            primaryRepositories,
            productType,
            workflows,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsBuildRunsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsBuildRunsInclude
        {
            builds,
            destinationBranch,
            product,
            pullRequest,
            sourceBranchOrTag,
            workflow,
        }


        // /v1/ciWorkflows/{id}/buildRuns
        public Task<CiBuildRunsResponse> GetCiWorkflowsBuildRuns(string id, string[]? filterBuilds = default, GetCiWorkflowsBuildRunsFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetCiWorkflowsBuildRunsFieldsCiBuildRuns[]? fieldsCiBuildRuns = default, GetCiWorkflowsBuildRunsFieldsCiWorkflows[]? fieldsCiWorkflows = default, GetCiWorkflowsBuildRunsFieldsScmPullRequests[]? fieldsScmPullRequests = default, GetCiWorkflowsBuildRunsFieldsCiProducts[]? fieldsCiProducts = default, GetCiWorkflowsBuildRunsFieldsBuilds[]? fieldsBuilds = default, int? limit = default, int? limitBuilds = default, GetCiWorkflowsBuildRunsInclude[]? include = default)
        {
            string path = "/v1/ciWorkflows/{id}/buildRuns";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterBuilds != null)
                uriBuilder.AddParameter("filter[builds]", string.Join(",", filterBuilds));
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsCiBuildRuns != null)
                uriBuilder.AddParameter("fields[ciBuildRuns]", string.Join(",", fieldsCiBuildRuns));
            if (fieldsCiWorkflows != null)
                uriBuilder.AddParameter("fields[ciWorkflows]", string.Join(",", fieldsCiWorkflows));
            if (fieldsScmPullRequests != null)
                uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
            if (fieldsCiProducts != null)
                uriBuilder.AddParameter("fields[ciProducts]", string.Join(",", fieldsCiProducts));
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitBuilds.HasValue)
                uriBuilder.AddParameter("limit[builds]", limitBuilds.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiBuildRunsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsRepositoryFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsRepositoryFieldsScmProviders
        {
            repositories,
            scmProviderType,
            url,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsRepositoryFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiWorkflowsRepositoryInclude
        {
            defaultBranch,
            scmProvider,
        }


        // /v1/ciWorkflows/{id}/repository
        public Task<ScmRepositoryResponse> GetCiWorkflowsRepository(string id, GetCiWorkflowsRepositoryFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetCiWorkflowsRepositoryFieldsScmProviders[]? fieldsScmProviders = default, GetCiWorkflowsRepositoryFieldsScmRepositories[]? fieldsScmRepositories = default, GetCiWorkflowsRepositoryInclude[]? include = default)
        {
            string path = "/v1/ciWorkflows/{id}/repository";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsScmProviders != null)
                uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmRepositoryResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiXcodeVersionsMacOsVersionsFieldsCiXcodeVersions
        {
            macOsVersions,
            name,
            testDestinations,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCiXcodeVersionsMacOsVersionsFieldsCiMacOsVersions
        {
            name,
            version,
            xcodeVersions,
        }





        // /v1/ciXcodeVersions/{id}/macOsVersions
        public Task<CiMacOsVersionsResponse> GetCiXcodeVersionsMacOsVersions(string id, GetCiXcodeVersionsMacOsVersionsFieldsCiXcodeVersions[]? fieldsCiXcodeVersions = default, GetCiXcodeVersionsMacOsVersionsFieldsCiMacOsVersions[]? fieldsCiMacOsVersions = default, int? limit = default, int? limitXcodeVersions = default, string[]? include = default)
        {
            string path = "/v1/ciXcodeVersions/{id}/macOsVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCiXcodeVersions != null)
                uriBuilder.AddParameter("fields[ciXcodeVersions]", string.Join(",", fieldsCiXcodeVersions));
            if (fieldsCiMacOsVersions != null)
                uriBuilder.AddParameter("fields[ciMacOsVersions]", string.Join(",", fieldsCiMacOsVersions));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitXcodeVersions.HasValue)
                uriBuilder.AddParameter("limit[xcodeVersions]", limitXcodeVersions.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CiMacOsVersionsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCustomerReviewsResponseFieldsCustomerReviews
        {
            body,
            createdDate,
            rating,
            response,
            reviewerNickname,
            territory,
            title,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetCustomerReviewsResponseFieldsCustomerReviewResponses
        {
            lastModifiedDate,
            responseBody,
            review,
            state,
        }



        // /v1/customerReviews/{id}/response
        public Task<CustomerReviewResponseV1Response> GetCustomerReviewsResponse(string id, GetCustomerReviewsResponseFieldsCustomerReviews[]? fieldsCustomerReviews = default, GetCustomerReviewsResponseFieldsCustomerReviewResponses[]? fieldsCustomerReviewResponses = default, string[]? include = default)
        {
            string path = "/v1/customerReviews/{id}/response";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCustomerReviews != null)
                uriBuilder.AddParameter("fields[customerReviews]", string.Join(",", fieldsCustomerReviews));
            if (fieldsCustomerReviewResponses != null)
                uriBuilder.AddParameter("fields[customerReviewResponses]", string.Join(",", fieldsCustomerReviewResponses));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CustomerReviewResponseV1Response>(message);
        }


        // /v1/diagnosticSignatures/{id}/logs
        public Task GetDiagnosticSignaturesLogs(string id, int? limit = default)
        {
            string path = "/v1/diagnosticSignatures/{id}/logs";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }



        // /v1/endUserLicenseAgreements/{id}/territories
        public Task<TerritoriesResponse> GetEndUserLicenseAgreementsTerritories(string id, string[]? fieldsTerritories = default, int? limit = default)
        {
            string path = "/v1/endUserLicenseAgreements/{id}/territories";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<TerritoriesResponse>(message);
        }

        public class GetGameCenterEnabledVersionsCompatibleVersionsResponse
        {
            public class Data
            {
                public string type { get; set; } = "gameCenterEnabledVersions";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
        public Task<GetGameCenterEnabledVersionsCompatibleVersionsResponse> GetGameCenterEnabledVersionsCompatibleVersions(string id, int? limit = default)
        {
            string path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetGameCenterEnabledVersionsCompatibleVersionsResponse>(message);
        }

        public class PostGameCenterEnabledVersionsCompatibleVersionsRequest
        {
            public class Data
            {
                public string type { get; set; } = "gameCenterEnabledVersions";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
        public Task PostGameCenterEnabledVersionsCompatibleVersions(string id, PostGameCenterEnabledVersionsCompatibleVersionsRequest request)
        {
            string path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class PatchGameCenterEnabledVersionsCompatibleVersionsRequest
        {
            public class Data
            {
                public string type { get; set; } = "gameCenterEnabledVersions";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
        public Task PatchGameCenterEnabledVersionsCompatibleVersions(string id, PatchGameCenterEnabledVersionsCompatibleVersionsRequest request)
        {
            string path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class DeleteGameCenterEnabledVersionsCompatibleVersionsRequest
        {
            public class Data
            {
                public string type { get; set; } = "gameCenterEnabledVersions";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
        public Task DeleteGameCenterEnabledVersionsCompatibleVersions(string id, DeleteGameCenterEnabledVersionsCompatibleVersionsRequest request)
        {
            string path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetGameCenterEnabledVersionsCompatibleVersionsFilterPlatform
        {
            IOS,
            MAC_OS,
            TV_OS,
        }





        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetGameCenterEnabledVersionsCompatibleVersionsSort
        {
            versionString,
            [EnumMember(Value = "-versionString")]
            versionStringDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetGameCenterEnabledVersionsCompatibleVersionsFieldsGameCenterEnabledVersions
        {
            app,
            compatibleVersions,
            iconAsset,
            platform,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetGameCenterEnabledVersionsCompatibleVersionsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetGameCenterEnabledVersionsCompatibleVersionsInclude
        {
            app,
            compatibleVersions,
        }


        // /v1/gameCenterEnabledVersions/{id}/compatibleVersions
        public Task<GameCenterEnabledVersionsResponse> GetGameCenterEnabledVersionsCompatibleVersions(string id, GetGameCenterEnabledVersionsCompatibleVersionsFilterPlatform[]? filterPlatform = default, string[]? filterVersionString = default, string[]? filterApp = default, string[]? filterId = default, GetGameCenterEnabledVersionsCompatibleVersionsSort[]? sort = default, GetGameCenterEnabledVersionsCompatibleVersionsFieldsGameCenterEnabledVersions[]? fieldsGameCenterEnabledVersions = default, GetGameCenterEnabledVersionsCompatibleVersionsFieldsApps[]? fieldsApps = default, int? limit = default, int? limitCompatibleVersions = default, GetGameCenterEnabledVersionsCompatibleVersionsInclude[]? include = default)
        {
            string path = "/v1/gameCenterEnabledVersions/{id}/compatibleVersions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPlatform != null)
                uriBuilder.AddParameter("filter[platform]", string.Join(",", filterPlatform));
            if (filterVersionString != null)
                uriBuilder.AddParameter("filter[versionString]", string.Join(",", filterVersionString));
            if (filterApp != null)
                uriBuilder.AddParameter("filter[app]", string.Join(",", filterApp));
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsGameCenterEnabledVersions != null)
                uriBuilder.AddParameter("fields[gameCenterEnabledVersions]", string.Join(",", fieldsGameCenterEnabledVersions));
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitCompatibleVersions.HasValue)
                uriBuilder.AddParameter("limit[compatibleVersions]", limitCompatibleVersions.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GameCenterEnabledVersionsResponse>(message);
        }

        public class InAppPurchasePricesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? startDate { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchasePricePoint
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchasePricePoint? inAppPurchasePricePoint { get; set; }
                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchasePrices";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasePriceSchedulesManualPricesFieldsInAppPurchasePricePoints
        {
            customerPrice,
            inAppPurchaseV2,
            priceTier,
            proceeds,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasePriceSchedulesManualPricesFieldsInAppPurchasePrices
        {
            inAppPurchasePricePoint,
            inAppPurchaseV2,
            startDate,
            territory,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasePriceSchedulesManualPricesInclude
        {
            inAppPurchasePricePoint,
            territory,
        }


        // /v1/inAppPurchasePriceSchedules/{id}/manualPrices
        public Task<InAppPurchasePricesResponse> GetInAppPurchasePriceSchedulesManualPrices(string id, string[]? filterTerritory = default, GetInAppPurchasePriceSchedulesManualPricesFieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, GetInAppPurchasePriceSchedulesManualPricesFieldsInAppPurchasePrices[]? fieldsInAppPurchasePrices = default, string[]? fieldsTerritories = default, int? limit = default, GetInAppPurchasePriceSchedulesManualPricesInclude[]? include = default)
        {
            string path = "/v1/inAppPurchasePriceSchedules/{id}/manualPrices";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsInAppPurchasePricePoints != null)
                uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
            if (fieldsInAppPurchasePrices != null)
                uriBuilder.AddParameter("fields[inAppPurchasePrices]", string.Join(",", fieldsInAppPurchasePrices));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchasePricesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesAppStoreReviewScreenshotFieldsInAppPurchaseAppStoreReviewScreenshots
        {
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            inAppPurchaseV2,
            sourceFileChecksum,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesAppStoreReviewScreenshotFieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }



        // /v2/inAppPurchases/{id}/appStoreReviewScreenshot
        public Task<InAppPurchaseAppStoreReviewScreenshotResponse> GetInAppPurchasesAppStoreReviewScreenshot(string id, GetInAppPurchasesAppStoreReviewScreenshotFieldsInAppPurchaseAppStoreReviewScreenshots[]? fieldsInAppPurchaseAppStoreReviewScreenshots = default, GetInAppPurchasesAppStoreReviewScreenshotFieldsInAppPurchases[]? fieldsInAppPurchases = default, string[]? include = default)
        {
            string path = "/v2/inAppPurchases/{id}/appStoreReviewScreenshot";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchaseAppStoreReviewScreenshots != null)
                uriBuilder.AddParameter("fields[inAppPurchaseAppStoreReviewScreenshots]", string.Join(",", fieldsInAppPurchaseAppStoreReviewScreenshots));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchaseAppStoreReviewScreenshotResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesContentFieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesContentFieldsInAppPurchaseContents
        {
            fileName,
            fileSize,
            inAppPurchaseV2,
            lastModifiedDate,
            url,
        }



        // /v2/inAppPurchases/{id}/content
        public Task<InAppPurchaseContentResponse> GetInAppPurchasesContent(string id, GetInAppPurchasesContentFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetInAppPurchasesContentFieldsInAppPurchaseContents[]? fieldsInAppPurchaseContents = default, string[]? include = default)
        {
            string path = "/v2/inAppPurchases/{id}/content";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsInAppPurchaseContents != null)
                uriBuilder.AddParameter("fields[inAppPurchaseContents]", string.Join(",", fieldsInAppPurchaseContents));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchaseContentResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesIapPriceScheduleFieldsInAppPurchasePrices
        {
            inAppPurchasePricePoint,
            inAppPurchaseV2,
            startDate,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesIapPriceScheduleFieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesIapPriceScheduleFieldsInAppPurchasePriceSchedules
        {
            inAppPurchase,
            manualPrices,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesIapPriceScheduleInclude
        {
            inAppPurchase,
            manualPrices,
        }


        // /v2/inAppPurchases/{id}/iapPriceSchedule
        public Task<InAppPurchasePriceScheduleResponse> GetInAppPurchasesIapPriceSchedule(string id, GetInAppPurchasesIapPriceScheduleFieldsInAppPurchasePrices[]? fieldsInAppPurchasePrices = default, GetInAppPurchasesIapPriceScheduleFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetInAppPurchasesIapPriceScheduleFieldsInAppPurchasePriceSchedules[]? fieldsInAppPurchasePriceSchedules = default, int? limitManualPrices = default, GetInAppPurchasesIapPriceScheduleInclude[]? include = default)
        {
            string path = "/v2/inAppPurchases/{id}/iapPriceSchedule";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchasePrices != null)
                uriBuilder.AddParameter("fields[inAppPurchasePrices]", string.Join(",", fieldsInAppPurchasePrices));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsInAppPurchasePriceSchedules != null)
                uriBuilder.AddParameter("fields[inAppPurchasePriceSchedules]", string.Join(",", fieldsInAppPurchasePriceSchedules));
            if (limitManualPrices.HasValue)
                uriBuilder.AddParameter("limit[manualPrices]", limitManualPrices.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchasePriceScheduleResponse>(message);
        }

        public class InAppPurchaseLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? locale { get; set; }
                    public string? description { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        WAITING_FOR_REVIEW,
                        APPROVED,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchaseLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum InAppPurchaseType
                    {
                        CONSUMABLE,
                        NON_CONSUMABLE,
                        NON_RENEWING_SUBSCRIPTION,
                    }
                    public InAppPurchaseType? inAppPurchaseType { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        WAITING_FOR_UPLOAD,
                        PROCESSING_CONTENT,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    public string? reviewNote { get; set; }
                    public bool? familySharable { get; set; }
                    public bool? contentHosting { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PricePoints
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Content
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseContents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchaseAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IapPriceSchedule
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchasePriceSchedules";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public InAppPurchaseLocalizations? inAppPurchaseLocalizations { get; set; }
                    public PricePoints? pricePoints { get; set; }
                    public Content? content { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                    public IapPriceSchedule? iapPriceSchedule { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesInAppPurchaseLocalizationsFieldsInAppPurchaseLocalizations
        {
            description,
            inAppPurchaseV2,
            locale,
            name,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesInAppPurchaseLocalizationsFieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }




        // /v2/inAppPurchases/{id}/inAppPurchaseLocalizations
        public Task<InAppPurchaseLocalizationsResponse> GetInAppPurchasesInAppPurchaseLocalizations(string id, GetInAppPurchasesInAppPurchaseLocalizationsFieldsInAppPurchaseLocalizations[]? fieldsInAppPurchaseLocalizations = default, GetInAppPurchasesInAppPurchaseLocalizationsFieldsInAppPurchases[]? fieldsInAppPurchases = default, int? limit = default, string[]? include = default)
        {
            string path = "/v2/inAppPurchases/{id}/inAppPurchaseLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsInAppPurchaseLocalizations != null)
                uriBuilder.AddParameter("fields[inAppPurchaseLocalizations]", string.Join(",", fieldsInAppPurchaseLocalizations));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchaseLocalizationsResponse>(message);
        }

        public class InAppPurchasePricePointsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? customerPrice { get; set; }
                    public string? proceeds { get; set; }
                    public string? priceTier { get; set; }
                }

                public class Relationships
                {
                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "inAppPurchasePricePoints";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? currency { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "territories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesPricePointsFieldsInAppPurchasePricePoints
        {
            customerPrice,
            inAppPurchaseV2,
            priceTier,
            proceeds,
            territory,
        }





        // /v2/inAppPurchases/{id}/pricePoints
        public Task<InAppPurchasePricePointsResponse> GetInAppPurchasesPricePoints(string id, string[]? filterPriceTier = default, string[]? filterTerritory = default, GetInAppPurchasesPricePointsFieldsInAppPurchasePricePoints[]? fieldsInAppPurchasePricePoints = default, string[]? fieldsTerritories = default, int? limit = default, string[]? include = default)
        {
            string path = "/v2/inAppPurchases/{id}/pricePoints";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterPriceTier != null)
                uriBuilder.AddParameter("filter[priceTier]", string.Join(",", filterPriceTier));
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsInAppPurchasePricePoints != null)
                uriBuilder.AddParameter("fields[inAppPurchasePricePoints]", string.Join(",", fieldsInAppPurchasePricePoints));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<InAppPurchasePricePointsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesPromotedPurchaseFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesPromotedPurchaseFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesPromotedPurchaseFieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesPromotedPurchaseFieldsPromotedPurchaseImages
        {
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            promotedPurchase,
            sourceFileChecksum,
            state,
            uploadOperations,
            uploaded,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetInAppPurchasesPromotedPurchaseInclude
        {
            inAppPurchaseV2,
            promotionImages,
            subscription,
        }


        // /v2/inAppPurchases/{id}/promotedPurchase
        public Task<PromotedPurchaseResponse> GetInAppPurchasesPromotedPurchase(string id, GetInAppPurchasesPromotedPurchaseFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetInAppPurchasesPromotedPurchaseFieldsSubscriptions[]? fieldsSubscriptions = default, GetInAppPurchasesPromotedPurchaseFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetInAppPurchasesPromotedPurchaseFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, int? limitPromotionImages = default, GetInAppPurchasesPromotedPurchaseInclude[]? include = default)
        {
            string path = "/v2/inAppPurchases/{id}/promotedPurchase";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsPromotedPurchaseImages != null)
                uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
            if (limitPromotionImages.HasValue)
                uriBuilder.AddParameter("limit[promotionImages]", limitPromotionImages.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PromotedPurchaseResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsAppFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }


        // /v1/preReleaseVersions/{id}/app
        public Task<AppResponse> GetPreReleaseVersionsApp(string id, GetPreReleaseVersionsAppFieldsApps[]? fieldsApps = default)
        {
            string path = "/v1/preReleaseVersions/{id}/app";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPreReleaseVersionsBuildsFieldsBuilds
        {
            app,
            appEncryptionDeclaration,
            appStoreVersion,
            betaAppReviewSubmission,
            betaBuildLocalizations,
            betaGroups,
            buildAudienceType,
            buildBetaDetail,
            buildBundles,
            computedMinMacOsVersion,
            diagnosticSignatures,
            expirationDate,
            expired,
            iconAssetToken,
            icons,
            individualTesters,
            lsMinimumSystemVersion,
            minOsVersion,
            perfPowerMetrics,
            preReleaseVersion,
            processingState,
            uploadedDate,
            usesNonExemptEncryption,
            version,
        }



        // /v1/preReleaseVersions/{id}/builds
        public Task<BuildsResponse> GetPreReleaseVersionsBuilds(string id, GetPreReleaseVersionsBuildsFieldsBuilds[]? fieldsBuilds = default, int? limit = default)
        {
            string path = "/v1/preReleaseVersions/{id}/builds";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBuilds != null)
                uriBuilder.AddParameter("fields[builds]", string.Join(",", fieldsBuilds));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BuildsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesBundleIdFieldsBundleIds
        {
            app,
            bundleIdCapabilities,
            identifier,
            name,
            platform,
            profiles,
            seedId,
        }


        // /v1/profiles/{id}/bundleId
        public Task<BundleIdResponse> GetProfilesBundleId(string id, GetProfilesBundleIdFieldsBundleIds[]? fieldsBundleIds = default)
        {
            string path = "/v1/profiles/{id}/bundleId";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsBundleIds != null)
                uriBuilder.AddParameter("fields[bundleIds]", string.Join(",", fieldsBundleIds));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<BundleIdResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesCertificatesFieldsCertificates
        {
            certificateContent,
            certificateType,
            csrContent,
            displayName,
            expirationDate,
            name,
            platform,
            serialNumber,
        }



        // /v1/profiles/{id}/certificates
        public Task<CertificatesResponse> GetProfilesCertificates(string id, GetProfilesCertificatesFieldsCertificates[]? fieldsCertificates = default, int? limit = default)
        {
            string path = "/v1/profiles/{id}/certificates";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsCertificates != null)
                uriBuilder.AddParameter("fields[certificates]", string.Join(",", fieldsCertificates));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<CertificatesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetProfilesDevicesFieldsDevices
        {
            addedDate,
            deviceClass,
            model,
            name,
            platform,
            status,
            udid,
        }



        // /v1/profiles/{id}/devices
        public Task<DevicesResponse> GetProfilesDevices(string id, GetProfilesDevicesFieldsDevices[]? fieldsDevices = default, int? limit = default)
        {
            string path = "/v1/profiles/{id}/devices";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsDevices != null)
                uriBuilder.AddParameter("fields[devices]", string.Join(",", fieldsDevices));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<DevicesResponse>(message);
        }

        public class PromotedPurchaseImagesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public class ImageAsset
                    {
                        public string? templateUrl { get; set; }
                        public int? width { get; set; }
                        public int? height { get; set; }
                    }

                    public class UploadOperations
                    {
                        public class RequestHeaders
                        {
                            public string? name { get; set; }
                            public string? value { get; set; }
                        }

                        public string? method { get; set; }
                        public string? url { get; set; }
                        public int? length { get; set; }
                        public int? offset { get; set; }
                        public RequestHeaders[]? requestHeaders { get; set; }
                    }

                    public int? fileSize { get; set; }
                    public string? fileName { get; set; }
                    public string? sourceFileChecksum { get; set; }
                    public string? assetToken { get; set; }
                    public ImageAsset? imageAsset { get; set; }
                    public string? assetType { get; set; }
                    public UploadOperations[]? uploadOperations { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        AWAITING_UPLOAD,
                        UPLOAD_COMPLETE,
                        FAILED,
                        PREPARE_FOR_SUBMISSION,
                        WAITING_FOR_REVIEW,
                        APPROVED,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public PromotedPurchase? promotedPurchase { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "promotedPurchaseImages";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public bool? visibleForAllUsers { get; set; }
                    public bool? enabled { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        APPROVED,
                        IN_REVIEW,
                        PREPARE_FOR_SUBMISSION,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class InAppPurchaseV2
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "inAppPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class PromotionImages
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchaseImages";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public InAppPurchaseV2? inAppPurchaseV2 { get; set; }
                    public Subscription? subscription { get; set; }
                    public PromotionImages? promotionImages { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "promotedPurchases";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPromotedPurchasesPromotionImagesFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetPromotedPurchasesPromotionImagesFieldsPromotedPurchaseImages
        {
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            promotedPurchase,
            sourceFileChecksum,
            state,
            uploadOperations,
            uploaded,
        }




        // /v1/promotedPurchases/{id}/promotionImages
        public Task<PromotedPurchaseImagesResponse> GetPromotedPurchasesPromotionImages(string id, GetPromotedPurchasesPromotionImagesFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetPromotedPurchasesPromotionImagesFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/promotedPurchases/{id}/promotionImages";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsPromotedPurchaseImages != null)
                uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PromotedPurchaseImagesResponse>(message);
        }

        public class ReviewSubmissionItemsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        READY_FOR_REVIEW,
                        ACCEPTED,
                        APPROVED,
                        REJECTED,
                        REMOVED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class AppStoreVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppCustomProductPageVersion
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appCustomProductPageVersions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppStoreVersionExperiment
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appStoreVersionExperiments";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class AppEvent
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "appEvents";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public AppStoreVersion? appStoreVersion { get; set; }
                    public AppCustomProductPageVersion? appCustomProductPageVersion { get; set; }
                    public AppStoreVersionExperiment? appStoreVersionExperiment { get; set; }
                    public AppEvent? appEvent { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "reviewSubmissionItems";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsItemsFieldsAppStoreVersionExperiments
        {
            appStoreVersion,
            appStoreVersionExperimentTreatments,
            endDate,
            name,
            reviewRequired,
            startDate,
            started,
            state,
            trafficProportion,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsItemsFieldsReviewSubmissionItems
        {
            appCustomProductPageVersion,
            appEvent,
            appStoreVersion,
            appStoreVersionExperiment,
            removed,
            resolved,
            reviewSubmission,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsItemsFieldsAppStoreVersions
        {
            ageRatingDeclaration,
            app,
            appClipDefaultExperience,
            appStoreReviewDetail,
            appStoreState,
            appStoreVersionExperiments,
            appStoreVersionLocalizations,
            appStoreVersionPhasedRelease,
            appStoreVersionSubmission,
            build,
            copyright,
            createdDate,
            customerReviews,
            downloadable,
            earliestReleaseDate,
            platform,
            releaseType,
            routingAppCoverage,
            versionString,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsItemsFieldsAppCustomProductPageVersions
        {
            appCustomProductPage,
            appCustomProductPageLocalizations,
            state,
            version,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsItemsFieldsAppEvents
        {
            app,
            archivedTerritorySchedules,
            badge,
            deepLink,
            eventState,
            localizations,
            primaryLocale,
            priority,
            purchaseRequirement,
            purpose,
            referenceName,
            territorySchedules,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetReviewSubmissionsItemsInclude
        {
            appCustomProductPageVersion,
            appEvent,
            appStoreVersion,
            appStoreVersionExperiment,
        }


        // /v1/reviewSubmissions/{id}/items
        public Task<ReviewSubmissionItemsResponse> GetReviewSubmissionsItems(string id, GetReviewSubmissionsItemsFieldsAppStoreVersionExperiments[]? fieldsAppStoreVersionExperiments = default, GetReviewSubmissionsItemsFieldsReviewSubmissionItems[]? fieldsReviewSubmissionItems = default, GetReviewSubmissionsItemsFieldsAppStoreVersions[]? fieldsAppStoreVersions = default, GetReviewSubmissionsItemsFieldsAppCustomProductPageVersions[]? fieldsAppCustomProductPageVersions = default, GetReviewSubmissionsItemsFieldsAppEvents[]? fieldsAppEvents = default, int? limit = default, GetReviewSubmissionsItemsInclude[]? include = default)
        {
            string path = "/v1/reviewSubmissions/{id}/items";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsAppStoreVersionExperiments != null)
                uriBuilder.AddParameter("fields[appStoreVersionExperiments]", string.Join(",", fieldsAppStoreVersionExperiments));
            if (fieldsReviewSubmissionItems != null)
                uriBuilder.AddParameter("fields[reviewSubmissionItems]", string.Join(",", fieldsReviewSubmissionItems));
            if (fieldsAppStoreVersions != null)
                uriBuilder.AddParameter("fields[appStoreVersions]", string.Join(",", fieldsAppStoreVersions));
            if (fieldsAppCustomProductPageVersions != null)
                uriBuilder.AddParameter("fields[appCustomProductPageVersions]", string.Join(",", fieldsAppCustomProductPageVersions));
            if (fieldsAppEvents != null)
                uriBuilder.AddParameter("fields[appEvents]", string.Join(",", fieldsAppEvents));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ReviewSubmissionItemsResponse>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmProvidersRepositoriesFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmProvidersRepositoriesFieldsScmProviders
        {
            repositories,
            scmProviderType,
            url,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmProvidersRepositoriesFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmProvidersRepositoriesInclude
        {
            defaultBranch,
            scmProvider,
        }


        // /v1/scmProviders/{id}/repositories
        public Task<ScmRepositoriesResponse> GetScmProvidersRepositories(string id, string[]? filterId = default, GetScmProvidersRepositoriesFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetScmProvidersRepositoriesFieldsScmProviders[]? fieldsScmProviders = default, GetScmProvidersRepositoriesFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, GetScmProvidersRepositoriesInclude[]? include = default)
        {
            string path = "/v1/scmProviders/{id}/repositories";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterId != null)
                uriBuilder.AddParameter("filter[id]", string.Join(",", filterId));
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsScmProviders != null)
                uriBuilder.AddParameter("fields[scmProviders]", string.Join(",", fieldsScmProviders));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmRepositoriesResponse>(message);
        }

        public class ScmGitReferencesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? canonicalName { get; set; }
                    public bool? isDeleted { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Kind
                    {
                        BRANCH,
                        TAG,
                    }
                    public Kind? kind { get; set; }
                }

                public class Relationships
                {
                    public class Repository
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Repository? repository { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmGitReferences";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? lastAccessedDate { get; set; }
                    public string? httpCloneUrl { get; set; }
                    public string? sshCloneUrl { get; set; }
                    public string? ownerName { get; set; }
                    public string? repositoryName { get; set; }
                }

                public class Relationships
                {
                    public class ScmProvider
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmProviders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DefaultBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public ScmProvider? scmProvider { get; set; }
                    public DefaultBranch? defaultBranch { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmRepositories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmRepositoriesGitReferencesFieldsScmGitReferences
        {
            canonicalName,
            isDeleted,
            kind,
            name,
            repository,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmRepositoriesGitReferencesFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }




        // /v1/scmRepositories/{id}/gitReferences
        public Task<ScmGitReferencesResponse> GetScmRepositoriesGitReferences(string id, GetScmRepositoriesGitReferencesFieldsScmGitReferences[]? fieldsScmGitReferences = default, GetScmRepositoriesGitReferencesFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/scmRepositories/{id}/gitReferences";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmGitReferences != null)
                uriBuilder.AddParameter("fields[scmGitReferences]", string.Join(",", fieldsScmGitReferences));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmGitReferencesResponse>(message);
        }

        public class ScmPullRequestsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? title { get; set; }
                    public int? number { get; set; }
                    public string? webUrl { get; set; }
                    public string? sourceRepositoryOwner { get; set; }
                    public string? sourceRepositoryName { get; set; }
                    public string? sourceBranchName { get; set; }
                    public string? destinationRepositoryOwner { get; set; }
                    public string? destinationRepositoryName { get; set; }
                    public string? destinationBranchName { get; set; }
                    public bool? isClosed { get; set; }
                    public bool? isCrossRepository { get; set; }
                }

                public class Relationships
                {
                    public class Repository
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmRepositories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Repository? repository { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmPullRequests";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? lastAccessedDate { get; set; }
                    public string? httpCloneUrl { get; set; }
                    public string? sshCloneUrl { get; set; }
                    public string? ownerName { get; set; }
                    public string? repositoryName { get; set; }
                }

                public class Relationships
                {
                    public class ScmProvider
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmProviders";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class DefaultBranch
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "scmGitReferences";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public ScmProvider? scmProvider { get; set; }
                    public DefaultBranch? defaultBranch { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "scmRepositories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmRepositoriesPullRequestsFieldsScmPullRequests
        {
            destinationBranchName,
            destinationRepositoryName,
            destinationRepositoryOwner,
            isClosed,
            isCrossRepository,
            number,
            repository,
            sourceBranchName,
            sourceRepositoryName,
            sourceRepositoryOwner,
            title,
            webUrl,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetScmRepositoriesPullRequestsFieldsScmRepositories
        {
            defaultBranch,
            gitReferences,
            httpCloneUrl,
            lastAccessedDate,
            ownerName,
            pullRequests,
            repositoryName,
            scmProvider,
            sshCloneUrl,
        }




        // /v1/scmRepositories/{id}/pullRequests
        public Task<ScmPullRequestsResponse> GetScmRepositoriesPullRequests(string id, GetScmRepositoriesPullRequestsFieldsScmPullRequests[]? fieldsScmPullRequests = default, GetScmRepositoriesPullRequestsFieldsScmRepositories[]? fieldsScmRepositories = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/scmRepositories/{id}/pullRequests";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsScmPullRequests != null)
                uriBuilder.AddParameter("fields[scmPullRequests]", string.Join(",", fieldsScmPullRequests));
            if (fieldsScmRepositories != null)
                uriBuilder.AddParameter("fields[scmRepositories]", string.Join(",", fieldsScmRepositories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<ScmPullRequestsResponse>(message);
        }

        public class SubscriptionGroupLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? customAppName { get; set; }
                    public string? locale { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        WAITING_FOR_REVIEW,
                        APPROVED,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class SubscriptionGroup
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public SubscriptionGroup? subscriptionGroup { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionGroupLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? referenceName { get; set; }
                }

                public class Relationships
                {
                    public class Subscriptions
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class SubscriptionGroupLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroupLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscriptions? subscriptions { get; set; }
                    public SubscriptionGroupLocalizations? subscriptionGroupLocalizations { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionGroups";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionGroupLocalizationsFieldsSubscriptionGroups
        {
            app,
            referenceName,
            subscriptionGroupLocalizations,
            subscriptions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionGroupLocalizationsFieldsSubscriptionGroupLocalizations
        {
            customAppName,
            locale,
            name,
            state,
            subscriptionGroup,
        }




        // /v1/subscriptionGroups/{id}/subscriptionGroupLocalizations
        public Task<SubscriptionGroupLocalizationsResponse> GetSubscriptionGroupsSubscriptionGroupLocalizations(string id, GetSubscriptionGroupsSubscriptionGroupLocalizationsFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, GetSubscriptionGroupsSubscriptionGroupLocalizationsFieldsSubscriptionGroupLocalizations[]? fieldsSubscriptionGroupLocalizations = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionGroups != null)
                uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
            if (fieldsSubscriptionGroupLocalizations != null)
                uriBuilder.AddParameter("fields[subscriptionGroupLocalizations]", string.Join(",", fieldsSubscriptionGroupLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionGroupLocalizationsResponse>(message);
        }

        public class SubscriptionsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    public bool? familySharable { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionPeriod
                    {
                        ONE_WEEK,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public SubscriptionPeriod? subscriptionPeriod { get; set; }
                    public string? reviewNote { get; set; }
                    public int? groupLevel { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class SubscriptionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Group
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IntroductoryOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionIntroductoryOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotionalOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class OfferCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public SubscriptionLocalizations? subscriptionLocalizations { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public Group? group { get; set; }
                    public IntroductoryOffers? introductoryOffers { get; set; }
                    public PromotionalOffers? promotionalOffers { get; set; }
                    public OfferCodes? offerCodes { get; set; }
                    public Prices? prices { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFilterState
        {
            MISSING_METADATA,
            READY_TO_SUBMIT,
            WAITING_FOR_REVIEW,
            IN_REVIEW,
            DEVELOPER_ACTION_NEEDED,
            PENDING_BINARY_APPROVAL,
            APPROVED,
            DEVELOPER_REMOVED_FROM_SALE,
            REMOVED_FROM_SALE,
            REJECTED,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsSort
        {
            name,
            [EnumMember(Value = "-name")]
            nameDescending,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsSubscriptionPromotionalOffers
        {
            duration,
            name,
            numberOfPeriods,
            offerCode,
            offerMode,
            prices,
            subscription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsSubscriptionOfferCodes
        {
            active,
            customCodes,
            customerEligibilities,
            duration,
            name,
            numberOfPeriods,
            offerEligibility,
            offerMode,
            oneTimeUseCodes,
            prices,
            subscription,
            totalNumberOfCodes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsSubscriptionAppStoreReviewScreenshots
        {
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            subscription,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsSubscriptionGroups
        {
            app,
            referenceName,
            subscriptionGroupLocalizations,
            subscriptions,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsSubscriptionIntroductoryOffers
        {
            duration,
            endDate,
            numberOfPeriods,
            offerMode,
            startDate,
            subscription,
            subscriptionPricePoint,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsSubscriptionPrices
        {
            preserveCurrentPrice,
            preserved,
            startDate,
            subscription,
            subscriptionPricePoint,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsFieldsSubscriptionLocalizations
        {
            description,
            locale,
            name,
            state,
            subscription,
        }








        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionGroupsSubscriptionsInclude
        {
            appStoreReviewScreenshot,
            group,
            introductoryOffers,
            offerCodes,
            prices,
            promotedPurchase,
            promotionalOffers,
            subscriptionLocalizations,
        }


        // /v1/subscriptionGroups/{id}/subscriptions
        public Task<SubscriptionsResponse> GetSubscriptionGroupsSubscriptions(string id, string[]? filterName = default, string[]? filterProductId = default, GetSubscriptionGroupsSubscriptionsFilterState[]? filterState = default, GetSubscriptionGroupsSubscriptionsSort[]? sort = default, GetSubscriptionGroupsSubscriptionsFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetSubscriptionGroupsSubscriptionsFieldsSubscriptionPromotionalOffers[]? fieldsSubscriptionPromotionalOffers = default, GetSubscriptionGroupsSubscriptionsFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, GetSubscriptionGroupsSubscriptionsFieldsSubscriptionAppStoreReviewScreenshots[]? fieldsSubscriptionAppStoreReviewScreenshots = default, GetSubscriptionGroupsSubscriptionsFieldsSubscriptions[]? fieldsSubscriptions = default, GetSubscriptionGroupsSubscriptionsFieldsSubscriptionGroups[]? fieldsSubscriptionGroups = default, GetSubscriptionGroupsSubscriptionsFieldsSubscriptionIntroductoryOffers[]? fieldsSubscriptionIntroductoryOffers = default, GetSubscriptionGroupsSubscriptionsFieldsSubscriptionPrices[]? fieldsSubscriptionPrices = default, GetSubscriptionGroupsSubscriptionsFieldsSubscriptionLocalizations[]? fieldsSubscriptionLocalizations = default, int? limit = default, int? limitSubscriptionLocalizations = default, int? limitIntroductoryOffers = default, int? limitPromotionalOffers = default, int? limitOfferCodes = default, int? limitPrices = default, GetSubscriptionGroupsSubscriptionsInclude[]? include = default)
        {
            string path = "/v1/subscriptionGroups/{id}/subscriptions";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterName != null)
                uriBuilder.AddParameter("filter[name]", string.Join(",", filterName));
            if (filterProductId != null)
                uriBuilder.AddParameter("filter[productId]", string.Join(",", filterProductId));
            if (filterState != null)
                uriBuilder.AddParameter("filter[state]", string.Join(",", filterState));
            if (sort != null)
                uriBuilder.AddParameter("sort", string.Join(",", sort));
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsSubscriptionPromotionalOffers != null)
                uriBuilder.AddParameter("fields[subscriptionPromotionalOffers]", string.Join(",", fieldsSubscriptionPromotionalOffers));
            if (fieldsSubscriptionOfferCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
                uriBuilder.AddParameter("fields[subscriptionAppStoreReviewScreenshots]", string.Join(",", fieldsSubscriptionAppStoreReviewScreenshots));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsSubscriptionGroups != null)
                uriBuilder.AddParameter("fields[subscriptionGroups]", string.Join(",", fieldsSubscriptionGroups));
            if (fieldsSubscriptionIntroductoryOffers != null)
                uriBuilder.AddParameter("fields[subscriptionIntroductoryOffers]", string.Join(",", fieldsSubscriptionIntroductoryOffers));
            if (fieldsSubscriptionPrices != null)
                uriBuilder.AddParameter("fields[subscriptionPrices]", string.Join(",", fieldsSubscriptionPrices));
            if (fieldsSubscriptionLocalizations != null)
                uriBuilder.AddParameter("fields[subscriptionLocalizations]", string.Join(",", fieldsSubscriptionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitSubscriptionLocalizations.HasValue)
                uriBuilder.AddParameter("limit[subscriptionLocalizations]", limitSubscriptionLocalizations.Value.ToString());
            if (limitIntroductoryOffers.HasValue)
                uriBuilder.AddParameter("limit[introductoryOffers]", limitIntroductoryOffers.Value.ToString());
            if (limitPromotionalOffers.HasValue)
                uriBuilder.AddParameter("limit[promotionalOffers]", limitPromotionalOffers.Value.ToString());
            if (limitOfferCodes.HasValue)
                uriBuilder.AddParameter("limit[offerCodes]", limitOfferCodes.Value.ToString());
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionsResponse>(message);
        }

        // /v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values
        public Task GetSubscriptionOfferCodeOneTimeUseCodesValues(string id)
        {
            string path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync(message);
        }

        public class SubscriptionOfferCodeCustomCodesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? customCode { get; set; }
                    public int? numberOfCodes { get; set; }
                    public string? createdDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class OfferCode
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public OfferCode? offerCode { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CustomerEligibilities
                    {
                        NEW,
                        EXISTING,
                        EXPIRED,
                    }

                    public CustomerEligibilities[]? customerEligibilities { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferEligibility
                    {
                        STACK_WITH_INTRO_OFFERS,
                        REPLACE_INTRO_OFFERS,
                    }
                    public OfferEligibility? offerEligibility { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                    public int? totalNumberOfCodes { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class OneTimeUseCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class CustomCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodePrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public OneTimeUseCodes? oneTimeUseCodes { get; set; }
                    public CustomCodes? customCodes { get; set; }
                    public Prices? prices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesCustomCodesFieldsSubscriptionOfferCodeCustomCodes
        {
            active,
            createdDate,
            customCode,
            expirationDate,
            numberOfCodes,
            offerCode,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesCustomCodesFieldsSubscriptionOfferCodes
        {
            active,
            customCodes,
            customerEligibilities,
            duration,
            name,
            numberOfPeriods,
            offerEligibility,
            offerMode,
            oneTimeUseCodes,
            prices,
            subscription,
            totalNumberOfCodes,
        }




        // /v1/subscriptionOfferCodes/{id}/customCodes
        public Task<SubscriptionOfferCodeCustomCodesResponse> GetSubscriptionOfferCodesCustomCodes(string id, GetSubscriptionOfferCodesCustomCodesFieldsSubscriptionOfferCodeCustomCodes[]? fieldsSubscriptionOfferCodeCustomCodes = default, GetSubscriptionOfferCodesCustomCodesFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/subscriptionOfferCodes/{id}/customCodes";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeCustomCodes]", string.Join(",", fieldsSubscriptionOfferCodeCustomCodes));
            if (fieldsSubscriptionOfferCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionOfferCodeCustomCodesResponse>(message);
        }

        public class SubscriptionOfferCodeOneTimeUseCodesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public int? numberOfCodes { get; set; }
                    public string? createdDate { get; set; }
                    public string? expirationDate { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class OfferCode
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public OfferCode? offerCode { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CustomerEligibilities
                    {
                        NEW,
                        EXISTING,
                        EXPIRED,
                    }

                    public CustomerEligibilities[]? customerEligibilities { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferEligibility
                    {
                        STACK_WITH_INTRO_OFFERS,
                        REPLACE_INTRO_OFFERS,
                    }
                    public OfferEligibility? offerEligibility { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                    public int? totalNumberOfCodes { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class OneTimeUseCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class CustomCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodePrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public OneTimeUseCodes? oneTimeUseCodes { get; set; }
                    public CustomCodes? customCodes { get; set; }
                    public Prices? prices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesOneTimeUseCodesFieldsSubscriptionOfferCodes
        {
            active,
            customCodes,
            customerEligibilities,
            duration,
            name,
            numberOfPeriods,
            offerEligibility,
            offerMode,
            oneTimeUseCodes,
            prices,
            subscription,
            totalNumberOfCodes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesOneTimeUseCodesFieldsSubscriptionOfferCodeOneTimeUseCodes
        {
            active,
            createdDate,
            expirationDate,
            numberOfCodes,
            offerCode,
            values,
        }




        // /v1/subscriptionOfferCodes/{id}/oneTimeUseCodes
        public Task<SubscriptionOfferCodeOneTimeUseCodesResponse> GetSubscriptionOfferCodesOneTimeUseCodes(string id, GetSubscriptionOfferCodesOneTimeUseCodesFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, GetSubscriptionOfferCodesOneTimeUseCodesFieldsSubscriptionOfferCodeOneTimeUseCodes[]? fieldsSubscriptionOfferCodeOneTimeUseCodes = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionOfferCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodes]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionOfferCodeOneTimeUseCodesResponse>(message);
        }

        public class SubscriptionOfferCodePricesResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodePrices";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesPricesFieldsSubscriptionPricePoints
        {
            customerPrice,
            equalizations,
            proceeds,
            proceedsYear2,
            subscription,
            territory,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesPricesFieldsSubscriptionOfferCodePrices
        {
            subscriptionPricePoint,
            territory,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionOfferCodesPricesInclude
        {
            subscriptionPricePoint,
            territory,
        }


        // /v1/subscriptionOfferCodes/{id}/prices
        public Task<SubscriptionOfferCodePricesResponse> GetSubscriptionOfferCodesPrices(string id, string[]? filterTerritory = default, GetSubscriptionOfferCodesPricesFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, string[]? fieldsTerritories = default, GetSubscriptionOfferCodesPricesFieldsSubscriptionOfferCodePrices[]? fieldsSubscriptionOfferCodePrices = default, int? limit = default, GetSubscriptionOfferCodesPricesInclude[]? include = default)
        {
            string path = "/v1/subscriptionOfferCodes/{id}/prices";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsSubscriptionPricePoints != null)
                uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (fieldsSubscriptionOfferCodePrices != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodePrices]", string.Join(",", fieldsSubscriptionOfferCodePrices));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionOfferCodePricesResponse>(message);
        }

        public class SubscriptionPricePointsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? customerPrice { get; set; }
                    public string? proceeds { get; set; }
                    public string? proceedsYear2 { get; set; }
                }

                public class Relationships
                {
                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionPricePoints";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? currency { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "territories";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionPricePointsEqualizationsFieldsSubscriptionPricePoints
        {
            customerPrice,
            equalizations,
            proceeds,
            proceedsYear2,
            subscription,
            territory,
        }





        // /v1/subscriptionPricePoints/{id}/equalizations
        public Task<SubscriptionPricePointsResponse> GetSubscriptionPricePointsEqualizations(string id, string[]? filterSubscription = default, string[]? filterTerritory = default, GetSubscriptionPricePointsEqualizationsFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, string[]? fieldsTerritories = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/subscriptionPricePoints/{id}/equalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterSubscription != null)
                uriBuilder.AddParameter("filter[subscription]", string.Join(",", filterSubscription));
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsSubscriptionPricePoints != null)
                uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionPricePointsResponse>(message);
        }

        public class SubscriptionPromotionalOfferPricesResponse
        {
            public class Data
            {
                public class Relationships
                {
                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionPromotionalOfferPrices";
                public string id { get; set; } = "";
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionPromotionalOffersPricesFieldsSubscriptionPricePoints
        {
            customerPrice,
            equalizations,
            proceeds,
            proceedsYear2,
            subscription,
            territory,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionPromotionalOffersPricesFieldsSubscriptionPromotionalOfferPrices
        {
            subscriptionPricePoint,
            territory,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionPromotionalOffersPricesInclude
        {
            subscriptionPricePoint,
            territory,
        }


        // /v1/subscriptionPromotionalOffers/{id}/prices
        public Task<SubscriptionPromotionalOfferPricesResponse> GetSubscriptionPromotionalOffersPrices(string id, string[]? filterTerritory = default, GetSubscriptionPromotionalOffersPricesFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, string[]? fieldsTerritories = default, GetSubscriptionPromotionalOffersPricesFieldsSubscriptionPromotionalOfferPrices[]? fieldsSubscriptionPromotionalOfferPrices = default, int? limit = default, GetSubscriptionPromotionalOffersPricesInclude[]? include = default)
        {
            string path = "/v1/subscriptionPromotionalOffers/{id}/prices";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsSubscriptionPricePoints != null)
                uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (fieldsSubscriptionPromotionalOfferPrices != null)
                uriBuilder.AddParameter("fields[subscriptionPromotionalOfferPrices]", string.Join(",", fieldsSubscriptionPromotionalOfferPrices));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionPromotionalOfferPricesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsAppStoreReviewScreenshotFieldsSubscriptionAppStoreReviewScreenshots
        {
            assetDeliveryState,
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            sourceFileChecksum,
            subscription,
            uploadOperations,
            uploaded,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsAppStoreReviewScreenshotFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }



        // /v1/subscriptions/{id}/appStoreReviewScreenshot
        public Task<SubscriptionAppStoreReviewScreenshotResponse> GetSubscriptionsAppStoreReviewScreenshot(string id, GetSubscriptionsAppStoreReviewScreenshotFieldsSubscriptionAppStoreReviewScreenshots[]? fieldsSubscriptionAppStoreReviewScreenshots = default, GetSubscriptionsAppStoreReviewScreenshotFieldsSubscriptions[]? fieldsSubscriptions = default, string[]? include = default)
        {
            string path = "/v1/subscriptions/{id}/appStoreReviewScreenshot";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptionAppStoreReviewScreenshots != null)
                uriBuilder.AddParameter("fields[subscriptionAppStoreReviewScreenshots]", string.Join(",", fieldsSubscriptionAppStoreReviewScreenshots));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionAppStoreReviewScreenshotResponse>(message);
        }

        public class GetSubscriptionsIntroductoryOffersResponse
        {
            public class Data
            {
                public string type { get; set; } = "subscriptionIntroductoryOffers";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/subscriptions/{id}/relationships/introductoryOffers
        public Task<GetSubscriptionsIntroductoryOffersResponse> GetSubscriptionsIntroductoryOffers(string id, int? limit = default)
        {
            string path = "/v1/subscriptions/{id}/relationships/introductoryOffers";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetSubscriptionsIntroductoryOffersResponse>(message);
        }

        public class DeleteSubscriptionsIntroductoryOffersRequest
        {
            public class Data
            {
                public string type { get; set; } = "subscriptionIntroductoryOffers";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/subscriptions/{id}/relationships/introductoryOffers
        public Task DeleteSubscriptionsIntroductoryOffers(string id, DeleteSubscriptionsIntroductoryOffersRequest request)
        {
            string path = "/v1/subscriptions/{id}/relationships/introductoryOffers";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class SubscriptionIntroductoryOffersResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? startDate { get; set; }
                    public string? endDate { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionIntroductoryOffers";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsIntroductoryOffersFieldsSubscriptionPricePoints
        {
            customerPrice,
            equalizations,
            proceeds,
            proceedsYear2,
            subscription,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsIntroductoryOffersFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsIntroductoryOffersFieldsSubscriptionIntroductoryOffers
        {
            duration,
            endDate,
            numberOfPeriods,
            offerMode,
            startDate,
            subscription,
            subscriptionPricePoint,
            territory,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsIntroductoryOffersInclude
        {
            subscription,
            subscriptionPricePoint,
            territory,
        }


        // /v1/subscriptions/{id}/introductoryOffers
        public Task<SubscriptionIntroductoryOffersResponse> GetSubscriptionsIntroductoryOffers(string id, string[]? filterTerritory = default, GetSubscriptionsIntroductoryOffersFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, GetSubscriptionsIntroductoryOffersFieldsSubscriptions[]? fieldsSubscriptions = default, GetSubscriptionsIntroductoryOffersFieldsSubscriptionIntroductoryOffers[]? fieldsSubscriptionIntroductoryOffers = default, string[]? fieldsTerritories = default, int? limit = default, GetSubscriptionsIntroductoryOffersInclude[]? include = default)
        {
            string path = "/v1/subscriptions/{id}/introductoryOffers";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsSubscriptionPricePoints != null)
                uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsSubscriptionIntroductoryOffers != null)
                uriBuilder.AddParameter("fields[subscriptionIntroductoryOffers]", string.Join(",", fieldsSubscriptionIntroductoryOffers));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionIntroductoryOffersResponse>(message);
        }

        public class SubscriptionOfferCodesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum CustomerEligibilities
                    {
                        NEW,
                        EXISTING,
                        EXPIRED,
                    }

                    public CustomerEligibilities[]? customerEligibilities { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferEligibility
                    {
                        STACK_WITH_INTRO_OFFERS,
                        REPLACE_INTRO_OFFERS,
                    }
                    public OfferEligibility? offerEligibility { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                    public int? totalNumberOfCodes { get; set; }
                    public bool? active { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class OneTimeUseCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeOneTimeUseCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class CustomCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodeCustomCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodePrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public OneTimeUseCodes? oneTimeUseCodes { get; set; }
                    public CustomCodes? customCodes { get; set; }
                    public Prices? prices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionOfferCodes";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsOfferCodesFieldsSubscriptionOfferCodeCustomCodes
        {
            active,
            createdDate,
            customCode,
            expirationDate,
            numberOfCodes,
            offerCode,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsOfferCodesFieldsSubscriptionOfferCodes
        {
            active,
            customCodes,
            customerEligibilities,
            duration,
            name,
            numberOfPeriods,
            offerEligibility,
            offerMode,
            oneTimeUseCodes,
            prices,
            subscription,
            totalNumberOfCodes,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsOfferCodesFieldsSubscriptionOfferCodeOneTimeUseCodes
        {
            active,
            createdDate,
            expirationDate,
            numberOfCodes,
            offerCode,
            values,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsOfferCodesFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsOfferCodesFieldsSubscriptionOfferCodePrices
        {
            subscriptionPricePoint,
            territory,
        }






        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsOfferCodesInclude
        {
            customCodes,
            oneTimeUseCodes,
            prices,
            subscription,
        }


        // /v1/subscriptions/{id}/offerCodes
        public Task<SubscriptionOfferCodesResponse> GetSubscriptionsOfferCodes(string id, string[]? filterTerritory = default, GetSubscriptionsOfferCodesFieldsSubscriptionOfferCodeCustomCodes[]? fieldsSubscriptionOfferCodeCustomCodes = default, GetSubscriptionsOfferCodesFieldsSubscriptionOfferCodes[]? fieldsSubscriptionOfferCodes = default, GetSubscriptionsOfferCodesFieldsSubscriptionOfferCodeOneTimeUseCodes[]? fieldsSubscriptionOfferCodeOneTimeUseCodes = default, GetSubscriptionsOfferCodesFieldsSubscriptions[]? fieldsSubscriptions = default, GetSubscriptionsOfferCodesFieldsSubscriptionOfferCodePrices[]? fieldsSubscriptionOfferCodePrices = default, int? limit = default, int? limitOneTimeUseCodes = default, int? limitCustomCodes = default, int? limitPrices = default, GetSubscriptionsOfferCodesInclude[]? include = default)
        {
            string path = "/v1/subscriptions/{id}/offerCodes";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsSubscriptionOfferCodeCustomCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeCustomCodes]", string.Join(",", fieldsSubscriptionOfferCodeCustomCodes));
            if (fieldsSubscriptionOfferCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodes]", string.Join(",", fieldsSubscriptionOfferCodes));
            if (fieldsSubscriptionOfferCodeOneTimeUseCodes != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodeOneTimeUseCodes]", string.Join(",", fieldsSubscriptionOfferCodeOneTimeUseCodes));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsSubscriptionOfferCodePrices != null)
                uriBuilder.AddParameter("fields[subscriptionOfferCodePrices]", string.Join(",", fieldsSubscriptionOfferCodePrices));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitOneTimeUseCodes.HasValue)
                uriBuilder.AddParameter("limit[oneTimeUseCodes]", limitOneTimeUseCodes.Value.ToString());
            if (limitCustomCodes.HasValue)
                uriBuilder.AddParameter("limit[customCodes]", limitCustomCodes.Value.ToString());
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionOfferCodesResponse>(message);
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPricePointsFieldsSubscriptionPricePoints
        {
            customerPrice,
            equalizations,
            proceeds,
            proceedsYear2,
            subscription,
            territory,
        }





        // /v1/subscriptions/{id}/pricePoints
        public Task<SubscriptionPricePointsResponse> GetSubscriptionsPricePoints(string id, string[]? filterTerritory = default, GetSubscriptionsPricePointsFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, string[]? fieldsTerritories = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/subscriptions/{id}/pricePoints";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsSubscriptionPricePoints != null)
                uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionPricePointsResponse>(message);
        }

        public class GetSubscriptionsPricesResponse
        {
            public class Data
            {
                public string type { get; set; } = "subscriptionPrices";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/subscriptions/{id}/relationships/prices
        public Task<GetSubscriptionsPricesResponse> GetSubscriptionsPrices(string id, int? limit = default)
        {
            string path = "/v1/subscriptions/{id}/relationships/prices";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetSubscriptionsPricesResponse>(message);
        }

        public class DeleteSubscriptionsPricesRequest
        {
            public class Data
            {
                public string type { get; set; } = "subscriptionPrices";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/subscriptions/{id}/relationships/prices
        public Task DeleteSubscriptionsPrices(string id, DeleteSubscriptionsPricesRequest request)
        {
            string path = "/v1/subscriptions/{id}/relationships/prices";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class SubscriptionPricesResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? startDate { get; set; }
                    public bool? preserved { get; set; }
                }

                public class Relationships
                {
                    public class Territory
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "territories";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class SubscriptionPricePoint
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPricePoints";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Territory? territory { get; set; }
                    public SubscriptionPricePoint? subscriptionPricePoint { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionPrices";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPricesFieldsSubscriptionPricePoints
        {
            customerPrice,
            equalizations,
            proceeds,
            proceedsYear2,
            subscription,
            territory,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPricesFieldsSubscriptionPrices
        {
            preserveCurrentPrice,
            preserved,
            startDate,
            subscription,
            subscriptionPricePoint,
            territory,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPricesInclude
        {
            subscriptionPricePoint,
            territory,
        }


        // /v1/subscriptions/{id}/prices
        public Task<SubscriptionPricesResponse> GetSubscriptionsPrices(string id, string[]? filterSubscriptionPricePoint = default, string[]? filterTerritory = default, GetSubscriptionsPricesFieldsSubscriptionPricePoints[]? fieldsSubscriptionPricePoints = default, GetSubscriptionsPricesFieldsSubscriptionPrices[]? fieldsSubscriptionPrices = default, string[]? fieldsTerritories = default, int? limit = default, GetSubscriptionsPricesInclude[]? include = default)
        {
            string path = "/v1/subscriptions/{id}/prices";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterSubscriptionPricePoint != null)
                uriBuilder.AddParameter("filter[subscriptionPricePoint]", string.Join(",", filterSubscriptionPricePoint));
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsSubscriptionPricePoints != null)
                uriBuilder.AddParameter("fields[subscriptionPricePoints]", string.Join(",", fieldsSubscriptionPricePoints));
            if (fieldsSubscriptionPrices != null)
                uriBuilder.AddParameter("fields[subscriptionPrices]", string.Join(",", fieldsSubscriptionPrices));
            if (fieldsTerritories != null)
                uriBuilder.AddParameter("fields[territories]", string.Join(",", fieldsTerritories));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionPricesResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotedPurchaseFieldsPromotedPurchases
        {
            app,
            enabled,
            inAppPurchaseV2,
            promotionImages,
            state,
            subscription,
            visibleForAllUsers,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotedPurchaseFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotedPurchaseFieldsInAppPurchases
        {
            app,
            appStoreReviewScreenshot,
            availableInAllTerritories,
            content,
            contentHosting,
            familySharable,
            iapPriceSchedule,
            inAppPurchaseLocalizations,
            inAppPurchaseType,
            name,
            pricePoints,
            productId,
            promotedPurchase,
            reviewNote,
            state,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotedPurchaseFieldsPromotedPurchaseImages
        {
            assetToken,
            assetType,
            fileName,
            fileSize,
            imageAsset,
            promotedPurchase,
            sourceFileChecksum,
            state,
            uploadOperations,
            uploaded,
        }



        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotedPurchaseInclude
        {
            inAppPurchaseV2,
            promotionImages,
            subscription,
        }


        // /v1/subscriptions/{id}/promotedPurchase
        public Task<PromotedPurchaseResponse> GetSubscriptionsPromotedPurchase(string id, GetSubscriptionsPromotedPurchaseFieldsPromotedPurchases[]? fieldsPromotedPurchases = default, GetSubscriptionsPromotedPurchaseFieldsSubscriptions[]? fieldsSubscriptions = default, GetSubscriptionsPromotedPurchaseFieldsInAppPurchases[]? fieldsInAppPurchases = default, GetSubscriptionsPromotedPurchaseFieldsPromotedPurchaseImages[]? fieldsPromotedPurchaseImages = default, int? limitPromotionImages = default, GetSubscriptionsPromotedPurchaseInclude[]? include = default)
        {
            string path = "/v1/subscriptions/{id}/promotedPurchase";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsPromotedPurchases != null)
                uriBuilder.AddParameter("fields[promotedPurchases]", string.Join(",", fieldsPromotedPurchases));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsInAppPurchases != null)
                uriBuilder.AddParameter("fields[inAppPurchases]", string.Join(",", fieldsInAppPurchases));
            if (fieldsPromotedPurchaseImages != null)
                uriBuilder.AddParameter("fields[promotedPurchaseImages]", string.Join(",", fieldsPromotedPurchaseImages));
            if (limitPromotionImages.HasValue)
                uriBuilder.AddParameter("limit[promotionImages]", limitPromotionImages.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<PromotedPurchaseResponse>(message);
        }

        public class SubscriptionPromotionalOffersResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? offerCode { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum Duration
                    {
                        ONE_DAY,
                        THREE_DAYS,
                        ONE_WEEK,
                        TWO_WEEKS,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public Duration? duration { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum OfferMode
                    {
                        PAY_AS_YOU_GO,
                        PAY_UP_FRONT,
                        FREE_TRIAL,
                    }
                    public OfferMode? offerMode { get; set; }
                    public int? numberOfPeriods { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOfferPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                    public Prices? prices { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionPromotionalOffers";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public object[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotionalOffersFieldsSubscriptionPromotionalOffers
        {
            duration,
            name,
            numberOfPeriods,
            offerCode,
            offerMode,
            prices,
            subscription,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotionalOffersFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotionalOffersFieldsSubscriptionPromotionalOfferPrices
        {
            subscriptionPricePoint,
            territory,
        }




        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsPromotionalOffersInclude
        {
            prices,
            subscription,
        }


        // /v1/subscriptions/{id}/promotionalOffers
        public Task<SubscriptionPromotionalOffersResponse> GetSubscriptionsPromotionalOffers(string id, string[]? filterTerritory = default, GetSubscriptionsPromotionalOffersFieldsSubscriptionPromotionalOffers[]? fieldsSubscriptionPromotionalOffers = default, GetSubscriptionsPromotionalOffersFieldsSubscriptions[]? fieldsSubscriptions = default, GetSubscriptionsPromotionalOffersFieldsSubscriptionPromotionalOfferPrices[]? fieldsSubscriptionPromotionalOfferPrices = default, int? limit = default, int? limitPrices = default, GetSubscriptionsPromotionalOffersInclude[]? include = default)
        {
            string path = "/v1/subscriptions/{id}/promotionalOffers";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (filterTerritory != null)
                uriBuilder.AddParameter("filter[territory]", string.Join(",", filterTerritory));
            if (fieldsSubscriptionPromotionalOffers != null)
                uriBuilder.AddParameter("fields[subscriptionPromotionalOffers]", string.Join(",", fieldsSubscriptionPromotionalOffers));
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsSubscriptionPromotionalOfferPrices != null)
                uriBuilder.AddParameter("fields[subscriptionPromotionalOfferPrices]", string.Join(",", fieldsSubscriptionPromotionalOfferPrices));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (limitPrices.HasValue)
                uriBuilder.AddParameter("limit[prices]", limitPrices.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionPromotionalOffersResponse>(message);
        }

        public class SubscriptionLocalizationsResponse
        {
            public class Data
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? locale { get; set; }
                    public string? description { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        PREPARE_FOR_SUBMISSION,
                        WAITING_FOR_REVIEW,
                        APPROVED,
                        REJECTED,
                    }
                    public State? state { get; set; }
                }

                public class Relationships
                {
                    public class Subscription
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptions";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public Subscription? subscription { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptionLocalizations";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Included
            {
                public class Attributes
                {
                    public string? name { get; set; }
                    public string? productId { get; set; }
                    public bool? familySharable { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum State
                    {
                        MISSING_METADATA,
                        READY_TO_SUBMIT,
                        WAITING_FOR_REVIEW,
                        IN_REVIEW,
                        DEVELOPER_ACTION_NEEDED,
                        PENDING_BINARY_APPROVAL,
                        APPROVED,
                        DEVELOPER_REMOVED_FROM_SALE,
                        REMOVED_FROM_SALE,
                        REJECTED,
                    }
                    public State? state { get; set; }
                    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
                    public enum SubscriptionPeriod
                    {
                        ONE_WEEK,
                        ONE_MONTH,
                        TWO_MONTHS,
                        THREE_MONTHS,
                        SIX_MONTHS,
                        ONE_YEAR,
                    }
                    public SubscriptionPeriod? subscriptionPeriod { get; set; }
                    public string? reviewNote { get; set; }
                    public int? groupLevel { get; set; }
                    public bool? availableInAllTerritories { get; set; }
                }

                public class Relationships
                {
                    public class SubscriptionLocalizations
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionLocalizations";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class AppStoreReviewScreenshot
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionAppStoreReviewScreenshots";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class Group
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionGroups";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public class IntroductoryOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionIntroductoryOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotionalOffers
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPromotionalOffers";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class OfferCodes
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionOfferCodes";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class Prices
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Meta
                        {
                            public class Paging
                            {
                                public int? total { get; set; }
                                public int limit { get; set; } = 0;
                            }

                            public Paging paging { get; set; } = new Paging();
                        }

                        public class Data
                        {
                            public string type { get; set; } = "subscriptionPrices";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Meta? meta { get; set; }
                        public Data[]? data { get; set; }
                    }

                    public class PromotedPurchase
                    {
                        public class Links
                        {
                            public string? self { get; set; }
                            public string? related { get; set; }
                        }

                        public class Data
                        {
                            public string type { get; set; } = "promotedPurchases";
                            public string id { get; set; } = "";
                        }

                        public Links? links { get; set; }
                        public Data? data { get; set; }
                    }

                    public SubscriptionLocalizations? subscriptionLocalizations { get; set; }
                    public AppStoreReviewScreenshot? appStoreReviewScreenshot { get; set; }
                    public Group? group { get; set; }
                    public IntroductoryOffers? introductoryOffers { get; set; }
                    public PromotionalOffers? promotionalOffers { get; set; }
                    public OfferCodes? offerCodes { get; set; }
                    public Prices? prices { get; set; }
                    public PromotedPurchase? promotedPurchase { get; set; }
                }

                public class Links
                {
                    public string self { get; set; } = "";
                }

                public string type { get; set; } = "subscriptions";
                public string id { get; set; } = "";
                public Attributes? attributes { get; set; }
                public Relationships? relationships { get; set; }
                public Links links { get; set; } = new Links();
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Included[]? included { get; set; }
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsSubscriptionLocalizationsFieldsSubscriptions
        {
            appStoreReviewScreenshot,
            availableInAllTerritories,
            familySharable,
            group,
            groupLevel,
            introductoryOffers,
            name,
            offerCodes,
            pricePoints,
            prices,
            productId,
            promotedPurchase,
            promotionalOffers,
            reviewNote,
            state,
            subscriptionLocalizations,
            subscriptionPeriod,
        }


        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetSubscriptionsSubscriptionLocalizationsFieldsSubscriptionLocalizations
        {
            description,
            locale,
            name,
            state,
            subscription,
        }




        // /v1/subscriptions/{id}/subscriptionLocalizations
        public Task<SubscriptionLocalizationsResponse> GetSubscriptionsSubscriptionLocalizations(string id, GetSubscriptionsSubscriptionLocalizationsFieldsSubscriptions[]? fieldsSubscriptions = default, GetSubscriptionsSubscriptionLocalizationsFieldsSubscriptionLocalizations[]? fieldsSubscriptionLocalizations = default, int? limit = default, string[]? include = default)
        {
            string path = "/v1/subscriptions/{id}/subscriptionLocalizations";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsSubscriptions != null)
                uriBuilder.AddParameter("fields[subscriptions]", string.Join(",", fieldsSubscriptions));
            if (fieldsSubscriptionLocalizations != null)
                uriBuilder.AddParameter("fields[subscriptionLocalizations]", string.Join(",", fieldsSubscriptionLocalizations));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());
            if (include != null)
                uriBuilder.AddParameter("include", string.Join(",", include));

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<SubscriptionLocalizationsResponse>(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUserInvitationsVisibleAppsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }



        // /v1/userInvitations/{id}/visibleApps
        public Task<AppsResponse> GetUserInvitationsVisibleApps(string id, GetUserInvitationsVisibleAppsFieldsApps[]? fieldsApps = default, int? limit = default)
        {
            string path = "/v1/userInvitations/{id}/visibleApps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppsResponse>(message);
        }

        public class GetUsersVisibleAppsResponse
        {
            public class Data
            {
                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
            }

            public class Links
            {
                public string self { get; set; } = "";
                public string? first { get; set; }
                public string? next { get; set; }
            }

            public class Meta
            {
                public class Paging
                {
                    public int? total { get; set; }
                    public int limit { get; set; } = 0;
                }

                public Paging paging { get; set; } = new Paging();
            }

            public Data[] data { get; set; } = { };
            public Links links { get; set; } = new Links();
            public Meta? meta { get; set; }
        }


        // /v1/users/{id}/relationships/visibleApps
        public Task<GetUsersVisibleAppsResponse> GetUsersVisibleApps(string id, int? limit = default)
        {
            string path = "/v1/users/{id}/relationships/visibleApps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<GetUsersVisibleAppsResponse>(message);
        }

        public class PostUsersVisibleAppsRequest
        {
            public class Data
            {
                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/users/{id}/relationships/visibleApps
        public Task PostUsersVisibleApps(string id, PostUsersVisibleAppsRequest request)
        {
            string path = "/v1/users/{id}/relationships/visibleApps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class PatchUsersVisibleAppsRequest
        {
            public class Data
            {
                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/users/{id}/relationships/visibleApps
        public Task PatchUsersVisibleApps(string id, PatchUsersVisibleAppsRequest request)
        {
            string path = "/v1/users/{id}/relationships/visibleApps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        public class DeleteUsersVisibleAppsRequest
        {
            public class Data
            {
                public string type { get; set; } = "apps";
                public string id { get; set; } = "";
            }

            public Data[] data { get; set; } = { };
        }

        // /v1/users/{id}/relationships/visibleApps
        public Task DeleteUsersVisibleApps(string id, DeleteUsersVisibleAppsRequest request)
        {
            string path = "/v1/users/{id}/relationships/visibleApps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            message.Content = new StringContent(JsonSerializer.Serialize(request), encoding: Encoding.UTF8, mediaType: "application/json");
            return SendAsync(message);
        }

        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum GetUsersVisibleAppsFieldsApps
        {
            appClips,
            appCustomProductPages,
            appEvents,
            appInfos,
            appStoreVersions,
            availableInNewTerritories,
            availableTerritories,
            betaAppLocalizations,
            betaAppReviewDetail,
            betaGroups,
            betaLicenseAgreement,
            betaTesters,
            builds,
            bundleId,
            ciProduct,
            contentRightsDeclaration,
            customerReviews,
            endUserLicenseAgreement,
            gameCenterEnabledVersions,
            inAppPurchases,
            inAppPurchasesV2,
            isOrEverWasMadeForKids,
            name,
            perfPowerMetrics,
            preOrder,
            preReleaseVersions,
            pricePoints,
            prices,
            primaryLocale,
            promotedPurchases,
            reviewSubmissions,
            sku,
            subscriptionGracePeriod,
            subscriptionGroups,
            subscriptionStatusUrl,
            subscriptionStatusUrlForSandbox,
            subscriptionStatusUrlVersion,
            subscriptionStatusUrlVersionForSandbox,
        }



        // /v1/users/{id}/visibleApps
        public Task<AppsResponse> GetUsersVisibleApps(string id, GetUsersVisibleAppsFieldsApps[]? fieldsApps = default, int? limit = default)
        {
            string path = "/v1/users/{id}/visibleApps";
            path = path.Replace("{id}", id.ToString());
            var uriBuilder = new UriBuilder(baseUri, path);
            if (fieldsApps != null)
                uriBuilder.AddParameter("fields[apps]", string.Join(",", fieldsApps));
            if (limit.HasValue)
                uriBuilder.AddParameter("limit", limit.Value.ToString());

            var message = new HttpRequestMessage(HttpMethod.Get, uriBuilder.uri);
            return SendAsync<AppsResponse>(message);
        }

    }

}

